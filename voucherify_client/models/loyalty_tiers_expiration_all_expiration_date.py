# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from voucherify_client.models.loyalty_tiers_expiration_all_expiration_date_rounding import LoyaltyTiersExpirationAllExpirationDateRounding

class LoyaltyTiersExpirationAllExpirationDate(BaseModel):
    """
    Defines the conditions for the expiration date of a tier.  # noqa: E501
    """
    type: StrictStr = Field(..., description="What triggers the tier to expire for a customer.     `END_OF_PERIOD`: Expire tier at the end of the period.     `END_OF_NEXT_PERIOD`:  Expire tier at the end of the next period.   `BALANCE_DROP`: Tier expires when the points balance drops below the required range of the tier.   `CUSTOM`: Tier expires after a certain time period passes following the instance the points balance drops below the required range of the tier.")
    extend: StrictStr = Field(..., description="Extend the expiration by adding extra months or days in ISO 8601 format. The tier will remain active even though it reaches its expiration time period. For example, a tier with a duration of `P3M` will be valid for an additional duration of 3 months and a tier with a duration of `P1D` will be valid for an additional duration of 1 day.")
    rounding: Optional[LoyaltyTiersExpirationAllExpirationDateRounding] = None
    __properties = ["type", "extend", "rounding"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('END_OF_PERIOD', 'END_OF_NEXT_PERIOD', 'BALANCE_DROP', 'CUSTOM',):
            raise ValueError("must be one of enum values ('END_OF_PERIOD', 'END_OF_NEXT_PERIOD', 'BALANCE_DROP', 'CUSTOM')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LoyaltyTiersExpirationAllExpirationDate:
        """Create an instance of LoyaltyTiersExpirationAllExpirationDate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of rounding
        if self.rounding:
            _dict['rounding'] = self.rounding.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LoyaltyTiersExpirationAllExpirationDate:
        """Create an instance of LoyaltyTiersExpirationAllExpirationDate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LoyaltyTiersExpirationAllExpirationDate.parse_obj(obj)

        _obj = LoyaltyTiersExpirationAllExpirationDate.parse_obj({
            "type": obj.get("type"),
            "extend": obj.get("extend"),
            "rounding": LoyaltyTiersExpirationAllExpirationDateRounding.from_dict(obj.get("rounding")) if obj.get("rounding") is not None else None
        })
        return _obj


