# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from voucherify_client.models.voucher_assets_barcode import VoucherAssetsBarcode
from voucherify_client.models.voucher_assets_qr import VoucherAssetsQr

class VoucherAssets(BaseModel):
    """
    Stores links to images of QR and barcode that correspond to an encrypted voucher code.  # noqa: E501
    """
    qr: Optional[VoucherAssetsQr] = None
    barcode: Optional[VoucherAssetsBarcode] = None
    __properties = ["qr", "barcode"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VoucherAssets:
        """Create an instance of VoucherAssets from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of qr
        if self.qr:
            _dict['qr'] = self.qr.to_dict()
        # override the default output from pydantic by calling `to_dict()` of barcode
        if self.barcode:
            _dict['barcode'] = self.barcode.to_dict()
        # set to None if qr (nullable) is None
        # and __fields_set__ contains the field
        if self.qr is None and "qr" in self.__fields_set__:
            _dict['qr'] = None

        # set to None if barcode (nullable) is None
        # and __fields_set__ contains the field
        if self.barcode is None and "barcode" in self.__fields_set__:
            _dict['barcode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VoucherAssets:
        """Create an instance of VoucherAssets from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VoucherAssets.parse_obj(obj)

        _obj = VoucherAssets.parse_obj({
            "qr": VoucherAssetsQr.from_dict(obj.get("qr")) if obj.get("qr") is not None else None,
            "barcode": VoucherAssetsBarcode.from_dict(obj.get("barcode")) if obj.get("barcode") is not None else None
        })
        return _obj


