# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr, validator

class ValidationsRedeemableSkipped(BaseModel):
    """
    ValidationsRedeemableSkipped
    """
    status: Optional[StrictStr] = Field('SKIPPED', description="Indicates whether the redeemable can be applied or not applied based on the validation rules.")
    id: Optional[StrictStr] = Field(None, description="Redeemable ID, i.e. the voucher code.")
    object: Optional[StrictStr] = Field(None, description="Redeemable's object type.")
    result: Optional[Dict[str, Any]] = None
    __properties = ["status", "id", "object", "result"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SKIPPED',):
            raise ValueError("must be one of enum values ('SKIPPED')")
        return value

    @validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('voucher', 'promotion_tier',):
            raise ValueError("must be one of enum values ('voucher', 'promotion_tier')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ValidationsRedeemableSkipped:
        """Create an instance of ValidationsRedeemableSkipped from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ValidationsRedeemableSkipped:
        """Create an instance of ValidationsRedeemableSkipped from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ValidationsRedeemableSkipped.parse_obj(obj)

        _obj = ValidationsRedeemableSkipped.parse_obj({
            "status": obj.get("status") if obj.get("status") is not None else 'SKIPPED',
            "id": obj.get("id"),
            "object": obj.get("object"),
            "result": obj.get("result")
        })
        return _obj


