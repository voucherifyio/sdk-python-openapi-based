# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator
from voucherify_client.models.loyalties_earning_rules_create_request_body_item_custom_event import LoyaltiesEarningRulesCreateRequestBodyItemCustomEvent
from voucherify_client.models.loyalties_earning_rules_create_request_body_item_loyalty import LoyaltiesEarningRulesCreateRequestBodyItemLoyalty
from voucherify_client.models.loyalties_earning_rules_create_request_body_item_loyalty_tier import LoyaltiesEarningRulesCreateRequestBodyItemLoyaltyTier
from voucherify_client.models.loyalties_earning_rules_create_request_body_item_segment import LoyaltiesEarningRulesCreateRequestBodyItemSegment
from voucherify_client.models.loyalties_earning_rules_create_request_body_item_source import LoyaltiesEarningRulesCreateRequestBodyItemSource
from voucherify_client.models.validity_hours import ValidityHours
from voucherify_client.models.validity_timeframe import ValidityTimeframe

class LoyaltiesEarningRulesCreateRequestBodyItem(BaseModel):
    """
    LoyaltiesEarningRulesCreateRequestBodyItem
    """
    validation_rule_id: Optional[StrictStr] = Field(None, description="A unique validation rule identifier assigned by the Voucherify API. The validation rule is verified before points are added to the balance.")
    loyalty: Optional[LoyaltiesEarningRulesCreateRequestBodyItemLoyalty] = None
    event: Optional[StrictStr] = None
    source: Optional[LoyaltiesEarningRulesCreateRequestBodyItemSource] = None
    active: Optional[StrictBool] = Field(None, description="A flag to toggle the earning rule on or off. You can disable an earning rule even though it's within the active period defined by the `start_date` and `expiration_date` of the campaign or the earning rule's own `start_date` and `expiration_date`.    - `true` indicates an *active* earning rule - `false` indicates an *inactive* earning rule")
    start_date: Optional[datetime] = Field(None, description="Start date defines when the earning rule starts to be active. Activation timestamp is presented in the ISO 8601 format. Earning rule is *inactive before* this date. If you don't define the start date for an earning rule, it'll inherit the campaign start date by default. ")
    expiration_date: Optional[datetime] = Field(None, description="Expiration date defines when the earning rule expires. Expiration timestamp is presented in the ISO 8601 format.  Earning rule is *inactive after* this date.If you don't define the expiration date for an earning rule, it'll inherit the campaign expiration date by default.")
    validity_timeframe: Optional[ValidityTimeframe] = None
    validity_day_of_week: Optional[conlist(StrictInt)] = Field(None, description="Integer array corresponding to the particular days of the week in which the voucher is valid.  - `0` Sunday - `1` Monday - `2` Tuesday - `3` Wednesday - `4` Thursday - `5` Friday - `6` Saturday")
    validity_hours: Optional[ValidityHours] = None
    metadata: Optional[Dict[str, Any]] = None
    segment: Optional[LoyaltiesEarningRulesCreateRequestBodyItemSegment] = None
    custom_event: Optional[LoyaltiesEarningRulesCreateRequestBodyItemCustomEvent] = None
    loyalty_tier: Optional[LoyaltiesEarningRulesCreateRequestBodyItemLoyaltyTier] = None
    __properties = ["validation_rule_id", "loyalty", "event", "source", "active", "start_date", "expiration_date", "validity_timeframe", "validity_day_of_week", "validity_hours", "metadata", "segment", "custom_event", "loyalty_tier"]

    @validator('validity_day_of_week')
    def validity_day_of_week_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in (0, 1, 2, 3, 4, 5, 6,):
                raise ValueError("each list item must be one of (0, 1, 2, 3, 4, 5, 6)")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LoyaltiesEarningRulesCreateRequestBodyItem:
        """Create an instance of LoyaltiesEarningRulesCreateRequestBodyItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of loyalty
        if self.loyalty:
            _dict['loyalty'] = self.loyalty.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validity_timeframe
        if self.validity_timeframe:
            _dict['validity_timeframe'] = self.validity_timeframe.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validity_hours
        if self.validity_hours:
            _dict['validity_hours'] = self.validity_hours.to_dict()
        # override the default output from pydantic by calling `to_dict()` of segment
        if self.segment:
            _dict['segment'] = self.segment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_event
        if self.custom_event:
            _dict['custom_event'] = self.custom_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loyalty_tier
        if self.loyalty_tier:
            _dict['loyalty_tier'] = self.loyalty_tier.to_dict()
        # set to None if validation_rule_id (nullable) is None
        # and __fields_set__ contains the field
        if self.validation_rule_id is None and "validation_rule_id" in self.__fields_set__:
            _dict['validation_rule_id'] = None

        # set to None if active (nullable) is None
        # and __fields_set__ contains the field
        if self.active is None and "active" in self.__fields_set__:
            _dict['active'] = None

        # set to None if start_date (nullable) is None
        # and __fields_set__ contains the field
        if self.start_date is None and "start_date" in self.__fields_set__:
            _dict['start_date'] = None

        # set to None if expiration_date (nullable) is None
        # and __fields_set__ contains the field
        if self.expiration_date is None and "expiration_date" in self.__fields_set__:
            _dict['expiration_date'] = None

        # set to None if segment (nullable) is None
        # and __fields_set__ contains the field
        if self.segment is None and "segment" in self.__fields_set__:
            _dict['segment'] = None

        # set to None if custom_event (nullable) is None
        # and __fields_set__ contains the field
        if self.custom_event is None and "custom_event" in self.__fields_set__:
            _dict['custom_event'] = None

        # set to None if loyalty_tier (nullable) is None
        # and __fields_set__ contains the field
        if self.loyalty_tier is None and "loyalty_tier" in self.__fields_set__:
            _dict['loyalty_tier'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LoyaltiesEarningRulesCreateRequestBodyItem:
        """Create an instance of LoyaltiesEarningRulesCreateRequestBodyItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LoyaltiesEarningRulesCreateRequestBodyItem.parse_obj(obj)

        _obj = LoyaltiesEarningRulesCreateRequestBodyItem.parse_obj({
            "validation_rule_id": obj.get("validation_rule_id"),
            "loyalty": LoyaltiesEarningRulesCreateRequestBodyItemLoyalty.from_dict(obj.get("loyalty")) if obj.get("loyalty") is not None else None,
            "event": obj.get("event"),
            "source": LoyaltiesEarningRulesCreateRequestBodyItemSource.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "active": obj.get("active"),
            "start_date": obj.get("start_date"),
            "expiration_date": obj.get("expiration_date"),
            "validity_timeframe": ValidityTimeframe.from_dict(obj.get("validity_timeframe")) if obj.get("validity_timeframe") is not None else None,
            "validity_day_of_week": obj.get("validity_day_of_week"),
            "validity_hours": ValidityHours.from_dict(obj.get("validity_hours")) if obj.get("validity_hours") is not None else None,
            "metadata": obj.get("metadata"),
            "segment": LoyaltiesEarningRulesCreateRequestBodyItemSegment.from_dict(obj.get("segment")) if obj.get("segment") is not None else None,
            "custom_event": LoyaltiesEarningRulesCreateRequestBodyItemCustomEvent.from_dict(obj.get("custom_event")) if obj.get("custom_event") is not None else None,
            "loyalty_tier": LoyaltiesEarningRulesCreateRequestBodyItemLoyaltyTier.from_dict(obj.get("loyalty_tier")) if obj.get("loyalty_tier") is not None else None
        })
        return _obj


