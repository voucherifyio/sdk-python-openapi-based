# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictStr

class CustomerReferralsCampaignsItem(BaseModel):
    """
    Contains information about the source of the referral.  # noqa: E501
    """
    campaign_id: StrictStr = Field(..., description="Unique campaign ID, assigned by Voucherify.")
    referrer_id: StrictStr = Field(..., description="Unique referrer ID, assigned by Voucherify. This is the customer ID of a customer that is referring this customer.")
    related_object_id: StrictStr = Field(..., description="Related object id")
    related_object_type: StrictStr = Field(..., description="Related object type, i.e. `redemption`.")
    var_date: datetime = Field(..., alias="date", description="Timestamp representing the date and time when the customer was referred in ISO 8601 format.")
    __properties = ["campaign_id", "referrer_id", "related_object_id", "related_object_type", "date"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomerReferralsCampaignsItem:
        """Create an instance of CustomerReferralsCampaignsItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomerReferralsCampaignsItem:
        """Create an instance of CustomerReferralsCampaignsItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomerReferralsCampaignsItem.parse_obj(obj)

        _obj = CustomerReferralsCampaignsItem.parse_obj({
            "campaign_id": obj.get("campaign_id"),
            "referrer_id": obj.get("referrer_id"),
            "related_object_id": obj.get("related_object_id"),
            "related_object_type": obj.get("related_object_type"),
            "var_date": obj.get("date")
        })
        return _obj


