# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, validator

class Session(BaseModel):
    """
    Session
    """
    key: Optional[StrictStr] = Field(None, description="The session unique ID assigned by Voucherify or your own unique session ID. Sending an existing ID will result in overwriting an existing session. If no session key is provided, then a new ID will be generated.")
    type: Optional[StrictStr] = Field('LOCK', description="This parameter is required to establish a new session.")
    ttl: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Value for the period of time that the session is active. Units for this parameter are defined by the session.ttl_unit parameter.")
    ttl_unit: Optional[StrictStr] = Field(None, description="Defines the type of unit in which the session time is counted.")
    __properties = ["key", "type", "ttl", "ttl_unit"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('LOCK',):
            raise ValueError("must be one of enum values ('LOCK')")
        return value

    @validator('ttl_unit')
    def ttl_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DAYS', 'HOURS', 'MICROSECONDS', 'MILLISECONDS', 'MINUTES', 'NANOSECONDS', 'SECONDS',):
            raise ValueError("must be one of enum values ('DAYS', 'HOURS', 'MICROSECONDS', 'MILLISECONDS', 'MINUTES', 'NANOSECONDS', 'SECONDS')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Session:
        """Create an instance of Session from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if key (nullable) is None
        # and __fields_set__ contains the field
        if self.key is None and "key" in self.__fields_set__:
            _dict['key'] = None

        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict['type'] = None

        # set to None if ttl (nullable) is None
        # and __fields_set__ contains the field
        if self.ttl is None and "ttl" in self.__fields_set__:
            _dict['ttl'] = None

        # set to None if ttl_unit (nullable) is None
        # and __fields_set__ contains the field
        if self.ttl_unit is None and "ttl_unit" in self.__fields_set__:
            _dict['ttl_unit'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Session:
        """Create an instance of Session from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Session.parse_obj(obj)

        _obj = Session.parse_obj({
            "key": obj.get("key"),
            "type": obj.get("type") if obj.get("type") is not None else 'LOCK',
            "ttl": obj.get("ttl"),
            "ttl_unit": obj.get("ttl_unit")
        })
        return _obj


