# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from voucherify_client.models.category import Category
from voucherify_client.models.promotion_stack_base_tiers import PromotionStackBaseTiers

class PromotionsStacksGetResponseBody(BaseModel):
    """
    Response body schema for **GET** `/promotions/{campaignId}/stacks/{stackId}`.  # noqa: E501
    """
    name: StrictStr = Field(..., description="Promotion stack name.")
    tiers: PromotionStackBaseTiers = Field(...)
    id: StrictStr = Field(..., description="Unique promotion stack ID.")
    created_at: datetime = Field(..., description="Timestamp representing the date and time when the promotion stack was created in ISO 8601 format.")
    updated_at: Optional[datetime] = Field(None, description="Timestamp representing the date and time when the promotion stack was updated in ISO 8601 format.")
    campaign_id: StrictStr = Field(..., description="Promotion stack's parent campaign's unique ID.")
    object: StrictStr = Field(..., description="The type of object represented by JSON. ")
    category_id: Optional[StrictStr] = Field(None, description="Promotion stack category ID.")
    categories: conlist(Category) = Field(..., description="Details about the category assigned to the promotion stack.")
    __properties = ["name", "tiers", "id", "created_at", "updated_at", "campaign_id", "object", "category_id", "categories"]

    @validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('promotion_stack',):
            raise ValueError("must be one of enum values ('promotion_stack')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PromotionsStacksGetResponseBody:
        """Create an instance of PromotionsStacksGetResponseBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of tiers
        if self.tiers:
            _dict['tiers'] = self.tiers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item in self.categories:
                if _item:
                    _items.append(_item.to_dict())
            _dict['categories'] = _items
        # set to None if category_id (nullable) is None
        # and __fields_set__ contains the field
        if self.category_id is None and "category_id" in self.__fields_set__:
            _dict['category_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PromotionsStacksGetResponseBody:
        """Create an instance of PromotionsStacksGetResponseBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PromotionsStacksGetResponseBody.parse_obj(obj)

        _obj = PromotionsStacksGetResponseBody.parse_obj({
            "name": obj.get("name"),
            "tiers": PromotionStackBaseTiers.from_dict(obj.get("tiers")) if obj.get("tiers") is not None else None,
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "campaign_id": obj.get("campaign_id"),
            "object": obj.get("object") if obj.get("object") is not None else 'promotion_stack',
            "category_id": obj.get("category_id"),
            "categories": [Category.from_dict(_item) for _item in obj.get("categories")] if obj.get("categories") is not None else None
        })
        return _obj


