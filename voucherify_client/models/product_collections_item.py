# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from voucherify_client.models.product_collections_create_dynamic_request_body_filter import ProductCollectionsCreateDynamicRequestBodyFilter
from voucherify_client.models.product_collections_item_products_item import ProductCollectionsItemProductsItem

class ProductCollectionsItem(BaseModel):
    """
    This is an object representing a product collection base.   # noqa: E501
    """
    id: StrictStr = Field(..., description="Product collection ID.")
    name: StrictStr = Field(..., description="Unique user-defined product collection name.")
    type: StrictStr = Field(..., description="Describes whether the product collection is dynamic (products come in and leave based on set criteria) or static (manually selected products).")
    filter: Optional[ProductCollectionsCreateDynamicRequestBodyFilter] = None
    products: Optional[conlist(ProductCollectionsItemProductsItem)] = Field(None, description="Defines a set of products for a `STATIC` product collection type.")
    created_at: datetime = Field(..., description="Timestamp representing the date and time when the product collection was created in ISO 8601 format.")
    object: StrictStr = Field(..., description="The type of object represented by JSON. This object stores information about the static product collection.")
    __properties = ["id", "name", "type", "filter", "products", "created_at", "object"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('STATIC', 'AUTO_UPDATE',):
            raise ValueError("must be one of enum values ('STATIC', 'AUTO_UPDATE')")
        return value

    @validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('products_collection',):
            raise ValueError("must be one of enum values ('products_collection')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProductCollectionsItem:
        """Create an instance of ProductCollectionsItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in products (list)
        _items = []
        if self.products:
            for _item in self.products:
                if _item:
                    _items.append(_item.to_dict())
            _dict['products'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProductCollectionsItem:
        """Create an instance of ProductCollectionsItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProductCollectionsItem.parse_obj(obj)

        _obj = ProductCollectionsItem.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "filter": ProductCollectionsCreateDynamicRequestBodyFilter.from_dict(obj.get("filter")) if obj.get("filter") is not None else None,
            "products": [ProductCollectionsItemProductsItem.from_dict(_item) for _item in obj.get("products")] if obj.get("products") is not None else None,
            "created_at": obj.get("created_at"),
            "object": obj.get("object") if obj.get("object") is not None else 'products_collection'
        })
        return _obj


