# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, validator
from voucherify_client.models.product_collections_create_dynamic_request_body_filter import ProductCollectionsCreateDynamicRequestBodyFilter

class ProductCollectionsCreateDynamicRequestBody(BaseModel):
    """
    Response body schema for **POST** `/product-collections`.  # noqa: E501
    """
    type: StrictStr = Field(..., description="Show that the product collection is dynamic (products come in and leave based on set criteria).")
    name: StrictStr = Field(..., description="Unique user-defined product collection name.")
    filter: ProductCollectionsCreateDynamicRequestBodyFilter = Field(...)
    __properties = ["type", "name", "filter"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('AUTO_UPDATE',):
            raise ValueError("must be one of enum values ('AUTO_UPDATE')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProductCollectionsCreateDynamicRequestBody:
        """Create an instance of ProductCollectionsCreateDynamicRequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of filter
        if self.filter:
            _dict['filter'] = self.filter.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProductCollectionsCreateDynamicRequestBody:
        """Create an instance of ProductCollectionsCreateDynamicRequestBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProductCollectionsCreateDynamicRequestBody.parse_obj(obj)

        _obj = ProductCollectionsCreateDynamicRequestBody.parse_obj({
            "type": obj.get("type") if obj.get("type") is not None else 'AUTO_UPDATE',
            "name": obj.get("name"),
            "filter": ProductCollectionsCreateDynamicRequestBodyFilter.from_dict(obj.get("filter")) if obj.get("filter") is not None else None
        })
        return _obj


