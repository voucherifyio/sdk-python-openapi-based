# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class VoucherRedemption(BaseModel):
    """
    Stores a summary of redemptions that have been applied to the voucher.  # noqa: E501
    """
    quantity: Optional[StrictInt] = Field(None, description="How many times a voucher can be redeemed. A `null` value means unlimited.")
    redeemed_quantity: Optional[StrictInt] = Field(None, description="How many times a voucher has already been redeemed.")
    redeemed_amount: Optional[StrictInt] = Field(None, description="Total amount redeemed. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 balance is written as 10000.")
    redeemed_points: Optional[StrictInt] = Field(None, description="Total loyalty points redeemed.")
    object: Optional[StrictStr] = Field('list', description="The type of object represented is by default `list`. To get this list, you need to make a call to the endpoint returned in the url attribute.")
    url: Optional[StrictStr] = Field(None, description="The endpoint where this list of redemptions can be accessed using a GET method. `/v1/vouchers/{voucher_code}/redemptions`")
    __properties = ["quantity", "redeemed_quantity", "redeemed_amount", "redeemed_points", "object", "url"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VoucherRedemption:
        """Create an instance of VoucherRedemption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VoucherRedemption:
        """Create an instance of VoucherRedemption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VoucherRedemption.parse_obj(obj)

        _obj = VoucherRedemption.parse_obj({
            "quantity": obj.get("quantity"),
            "redeemed_quantity": obj.get("redeemed_quantity"),
            "redeemed_amount": obj.get("redeemed_amount"),
            "redeemed_points": obj.get("redeemed_points"),
            "object": obj.get("object") if obj.get("object") is not None else 'list',
            "url": obj.get("url")
        })
        return _obj


