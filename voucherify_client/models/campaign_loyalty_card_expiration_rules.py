# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator

class CampaignLoyaltyCardExpirationRules(BaseModel):
    """
    CampaignLoyaltyCardExpirationRules
    """
    period_type: Optional[StrictStr] = Field('MONTH', description="Type of period")
    period_value: Optional[StrictInt] = Field(None, description="Value of the period")
    rounding_type: Optional[StrictStr] = Field(None, description="Type of rounding")
    rounding_value: Optional[StrictInt] = Field(None, description="Value of rounding")
    __properties = ["period_type", "period_value", "rounding_type", "rounding_value"]

    @validator('period_type')
    def period_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('MONTH',):
            raise ValueError("must be one of enum values ('MONTH')")
        return value

    @validator('rounding_type')
    def rounding_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('END_OF_MONTH', 'END_OF_QUARTER', 'END_OF_HALF_YEAR', 'END_OF_YEAR', 'PARTICULAR_MONTH',):
            raise ValueError("must be one of enum values ('END_OF_MONTH', 'END_OF_QUARTER', 'END_OF_HALF_YEAR', 'END_OF_YEAR', 'PARTICULAR_MONTH')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CampaignLoyaltyCardExpirationRules:
        """Create an instance of CampaignLoyaltyCardExpirationRules from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if period_type (nullable) is None
        # and __fields_set__ contains the field
        if self.period_type is None and "period_type" in self.__fields_set__:
            _dict['period_type'] = None

        # set to None if period_value (nullable) is None
        # and __fields_set__ contains the field
        if self.period_value is None and "period_value" in self.__fields_set__:
            _dict['period_value'] = None

        # set to None if rounding_type (nullable) is None
        # and __fields_set__ contains the field
        if self.rounding_type is None and "rounding_type" in self.__fields_set__:
            _dict['rounding_type'] = None

        # set to None if rounding_value (nullable) is None
        # and __fields_set__ contains the field
        if self.rounding_value is None and "rounding_value" in self.__fields_set__:
            _dict['rounding_value'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CampaignLoyaltyCardExpirationRules:
        """Create an instance of CampaignLoyaltyCardExpirationRules from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CampaignLoyaltyCardExpirationRules.parse_obj(obj)

        _obj = CampaignLoyaltyCardExpirationRules.parse_obj({
            "period_type": obj.get("period_type") if obj.get("period_type") is not None else 'MONTH',
            "period_value": obj.get("period_value"),
            "rounding_type": obj.get("rounding_type"),
            "rounding_value": obj.get("rounding_value")
        })
        return _obj


