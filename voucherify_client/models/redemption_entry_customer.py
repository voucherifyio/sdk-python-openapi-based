# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr, validator

class RedemptionEntryCustomer(BaseModel):
    """
    RedemptionEntryCustomer
    """
    id: Optional[StrictStr] = Field(None, description="Unique identifier of an existing customer. It is assigned by Voucherify.")
    name: Optional[StrictStr] = Field(None, description="Customer's first and last name.")
    email: Optional[StrictStr] = Field(None, description="Customer's email address.")
    source_id: Optional[StrictStr] = Field(None, description="A unique identifier of the customer. It can be a customer ID or email from a CRM system, database, or a third-party service.")
    metadata: Optional[Dict[str, Any]] = None
    object: Optional[StrictStr] = Field('customer', description="The type of the object represented by JSON.")
    __properties = ["id", "name", "email", "source_id", "metadata", "object"]

    @validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('customer',):
            raise ValueError("must be one of enum values ('customer')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RedemptionEntryCustomer:
        """Create an instance of RedemptionEntryCustomer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if email (nullable) is None
        # and __fields_set__ contains the field
        if self.email is None and "email" in self.__fields_set__:
            _dict['email'] = None

        # set to None if source_id (nullable) is None
        # and __fields_set__ contains the field
        if self.source_id is None and "source_id" in self.__fields_set__:
            _dict['source_id'] = None

        # set to None if metadata (nullable) is None
        # and __fields_set__ contains the field
        if self.metadata is None and "metadata" in self.__fields_set__:
            _dict['metadata'] = None

        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RedemptionEntryCustomer:
        """Create an instance of RedemptionEntryCustomer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RedemptionEntryCustomer.parse_obj(obj)

        _obj = RedemptionEntryCustomer.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "email": obj.get("email"),
            "source_id": obj.get("source_id"),
            "metadata": obj.get("metadata"),
            "object": obj.get("object") if obj.get("object") is not None else 'customer'
        })
        return _obj


