# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class ParameterFiltersListCustomerRedeemablesCreatedAtConditions(BaseModel):
    """
    Data filters used to narrow down the data records to be returned in the result.  # noqa: E501
    """
    after: Optional[datetime] = Field(None, alias="$after", description="Value is after this date. The value for this parameter is shown in the ISO 8601 format.")
    before: Optional[datetime] = Field(None, alias="$before", description="Value is before this date. The value for this parameter is shown in the ISO 8601 format.")
    has_value: Optional[StrictStr] = Field(None, alias="$has_value", description="Value is NOT null. The value for this parameter is an empty string.")
    is_unknown: Optional[StrictStr] = Field(None, alias="$is_unknown", description="Value is null. The value for this parameter is an empty string.")
    more_than: Optional[StrictInt] = Field(None, description="Value is more days ago before the current date and time, e.g. more than `10` days ago.")
    less_than: Optional[StrictInt] = Field(None, description="Value is less days before the current date and time, e.g. less than `10` days ago.")
    __properties = ["$after", "$before", "$has_value", "$is_unknown", "more_than", "less_than"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ParameterFiltersListCustomerRedeemablesCreatedAtConditions:
        """Create an instance of ParameterFiltersListCustomerRedeemablesCreatedAtConditions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if after (nullable) is None
        # and __fields_set__ contains the field
        if self.after is None and "after" in self.__fields_set__:
            _dict['$after'] = None

        # set to None if before (nullable) is None
        # and __fields_set__ contains the field
        if self.before is None and "before" in self.__fields_set__:
            _dict['$before'] = None

        # set to None if has_value (nullable) is None
        # and __fields_set__ contains the field
        if self.has_value is None and "has_value" in self.__fields_set__:
            _dict['$has_value'] = None

        # set to None if is_unknown (nullable) is None
        # and __fields_set__ contains the field
        if self.is_unknown is None and "is_unknown" in self.__fields_set__:
            _dict['$is_unknown'] = None

        # set to None if more_than (nullable) is None
        # and __fields_set__ contains the field
        if self.more_than is None and "more_than" in self.__fields_set__:
            _dict['more_than'] = None

        # set to None if less_than (nullable) is None
        # and __fields_set__ contains the field
        if self.less_than is None and "less_than" in self.__fields_set__:
            _dict['less_than'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ParameterFiltersListCustomerRedeemablesCreatedAtConditions:
        """Create an instance of ParameterFiltersListCustomerRedeemablesCreatedAtConditions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ParameterFiltersListCustomerRedeemablesCreatedAtConditions.parse_obj(obj)

        _obj = ParameterFiltersListCustomerRedeemablesCreatedAtConditions.parse_obj({
            "after": obj.get("$after"),
            "before": obj.get("$before"),
            "has_value": obj.get("$has_value"),
            "is_unknown": obj.get("$is_unknown"),
            "more_than": obj.get("more_than"),
            "less_than": obj.get("less_than")
        })
        return _obj


