# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator
from voucherify_client.models.campaign_loyalty_card import CampaignLoyaltyCard
from voucherify_client.models.campaigns_create_request_body_voucher_redemption import CampaignsCreateRequestBodyVoucherRedemption
from voucherify_client.models.code_config import CodeConfig
from voucherify_client.models.discount import Discount
from voucherify_client.models.gift import Gift

class CampaignsCreateRequestBodyVoucher(BaseModel):
    """
    CampaignsCreateRequestBodyVoucher
    """
    type: Optional[StrictStr] = None
    discount: Optional[Discount] = None
    code_config: Optional[CodeConfig] = None
    redemption: Optional[CampaignsCreateRequestBodyVoucherRedemption] = None
    is_referral_code: Optional[StrictBool] = Field(None, description="Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`.")
    gift: Optional[Gift] = None
    loyalty_card: Optional[CampaignLoyaltyCard] = None
    __properties = ["type", "discount", "code_config", "redemption", "is_referral_code", "gift", "loyalty_card"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DISCOUNT_VOUCHER', 'GIFT_VOUCHER', 'LOYALTY_CARD',):
            raise ValueError("must be one of enum values ('DISCOUNT_VOUCHER', 'GIFT_VOUCHER', 'LOYALTY_CARD')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CampaignsCreateRequestBodyVoucher:
        """Create an instance of CampaignsCreateRequestBodyVoucher from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of discount
        if self.discount:
            _dict['discount'] = self.discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of code_config
        if self.code_config:
            _dict['code_config'] = self.code_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of redemption
        if self.redemption:
            _dict['redemption'] = self.redemption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gift
        if self.gift:
            _dict['gift'] = self.gift.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loyalty_card
        if self.loyalty_card:
            _dict['loyalty_card'] = self.loyalty_card.to_dict()
        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict['type'] = None

        # set to None if redemption (nullable) is None
        # and __fields_set__ contains the field
        if self.redemption is None and "redemption" in self.__fields_set__:
            _dict['redemption'] = None

        # set to None if is_referral_code (nullable) is None
        # and __fields_set__ contains the field
        if self.is_referral_code is None and "is_referral_code" in self.__fields_set__:
            _dict['is_referral_code'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CampaignsCreateRequestBodyVoucher:
        """Create an instance of CampaignsCreateRequestBodyVoucher from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CampaignsCreateRequestBodyVoucher.parse_obj(obj)

        _obj = CampaignsCreateRequestBodyVoucher.parse_obj({
            "type": obj.get("type"),
            "discount": Discount.from_dict(obj.get("discount")) if obj.get("discount") is not None else None,
            "code_config": CodeConfig.from_dict(obj.get("code_config")) if obj.get("code_config") is not None else None,
            "redemption": CampaignsCreateRequestBodyVoucherRedemption.from_dict(obj.get("redemption")) if obj.get("redemption") is not None else None,
            "is_referral_code": obj.get("is_referral_code"),
            "gift": Gift.from_dict(obj.get("gift")) if obj.get("gift") is not None else None,
            "loyalty_card": CampaignLoyaltyCard.from_dict(obj.get("loyalty_card")) if obj.get("loyalty_card") is not None else None
        })
        return _obj


