# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List
from pydantic import BaseModel, Field, StrictStr, conlist

class CustomersMetadataUpdateInBulkRequestBody(BaseModel):
    """
    Request body schema for **POST** `/customers/metadata/async`.  # noqa: E501
    """
    source_ids: conlist(StrictStr) = Field(..., description="An array of customer `source_id`'s.")
    metadata: Dict[str, Any] = Field(..., description="Metadata key value pairs to be updated. A set of custom key/value pairs that you can attach to a customer. The metadata object stores all custom attributes assigned to the customer. It can be useful for storing additional information about the customer in a structured format. This metadata can be used for validating whether the customer qualifies for a discount or it can be used in building customer segments.")
    __properties = ["source_ids", "metadata"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomersMetadataUpdateInBulkRequestBody:
        """Create an instance of CustomersMetadataUpdateInBulkRequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomersMetadataUpdateInBulkRequestBody:
        """Create an instance of CustomersMetadataUpdateInBulkRequestBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomersMetadataUpdateInBulkRequestBody.parse_obj(obj)

        _obj = CustomersMetadataUpdateInBulkRequestBody.parse_obj({
            "source_ids": obj.get("source_ids"),
            "metadata": obj.get("metadata")
        })
        return _obj


