# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class LoyaltiesTransferPoints(BaseModel):
    """
    LoyaltiesTransferPoints
    """
    code: Optional[StrictStr] = Field(None, description="Unique loyalty card code from which the user wants to transfer loyalty points (source).")
    points: Optional[StrictInt] = Field(None, description="The number of loyalty points that the user wants to transfer to another loyalty card. The number of points cannot be higher than the current balance on the loyalty card (source).")
    reason: Optional[StrictStr] = Field(None, description="Reason for the transfer.")
    source_id: Optional[StrictStr] = Field(None, description="The merchant's transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service.")
    __properties = ["code", "points", "reason", "source_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LoyaltiesTransferPoints:
        """Create an instance of LoyaltiesTransferPoints from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if code (nullable) is None
        # and __fields_set__ contains the field
        if self.code is None and "code" in self.__fields_set__:
            _dict['code'] = None

        # set to None if points (nullable) is None
        # and __fields_set__ contains the field
        if self.points is None and "points" in self.__fields_set__:
            _dict['points'] = None

        # set to None if reason (nullable) is None
        # and __fields_set__ contains the field
        if self.reason is None and "reason" in self.__fields_set__:
            _dict['reason'] = None

        # set to None if source_id (nullable) is None
        # and __fields_set__ contains the field
        if self.source_id is None and "source_id" in self.__fields_set__:
            _dict['source_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LoyaltiesTransferPoints:
        """Create an instance of LoyaltiesTransferPoints from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LoyaltiesTransferPoints.parse_obj(obj)

        _obj = LoyaltiesTransferPoints.parse_obj({
            "code": obj.get("code"),
            "points": obj.get("points"),
            "reason": obj.get("reason"),
            "source_id": obj.get("source_id")
        })
        return _obj


