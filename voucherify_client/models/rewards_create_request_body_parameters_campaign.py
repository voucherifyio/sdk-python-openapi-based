# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class RewardsCreateRequestBodyParametersCampaign(BaseModel):
    """
    RewardsCreateRequestBodyParametersCampaign
    """
    id: Optional[StrictStr] = None
    balance: Optional[StrictInt] = Field(None, description="The incremental points to be added to the current balance on the loyalty card. and The incremental amout to be added to the current balance on the gift card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000.")
    __properties = ["id", "balance"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RewardsCreateRequestBodyParametersCampaign:
        """Create an instance of RewardsCreateRequestBodyParametersCampaign from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if balance (nullable) is None
        # and __fields_set__ contains the field
        if self.balance is None and "balance" in self.__fields_set__:
            _dict['balance'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RewardsCreateRequestBodyParametersCampaign:
        """Create an instance of RewardsCreateRequestBodyParametersCampaign from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RewardsCreateRequestBodyParametersCampaign.parse_obj(obj)

        _obj = RewardsCreateRequestBodyParametersCampaign.parse_obj({
            "id": obj.get("id"),
            "balance": obj.get("balance")
        })
        return _obj


