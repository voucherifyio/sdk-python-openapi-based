# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator

class BusValRuleAssignment(BaseModel):
    """
    Assignments of business validation rule  # noqa: E501
    """
    id: StrictStr = Field(..., description="The unique identifier for a assignment")
    rule_id: StrictStr = Field(..., description="The unique identifier for a rule")
    related_object_id: StrictStr = Field(..., description="The unique identifier for a related object")
    related_object_type: StrictStr = Field(..., description="The type of related object")
    created_at: Optional[datetime] = Field(None, description="Timestamp representing the date and time when the object was created in ISO 8601 format.")
    updated_at: Optional[datetime] = Field(None, description="Timestamp representing the date and time when the object was last updated in ISO 8601 format.")
    object: StrictStr = Field(..., description="The type of object represented by JSON.")
    validation_status: Optional[StrictStr] = Field(None, description="The validation status of the assignment")
    validation_omitted_rules: Optional[conlist(StrictStr)] = Field(None, description="The list of omitted rules")
    __properties = ["id", "rule_id", "related_object_id", "related_object_type", "created_at", "updated_at", "object", "validation_status", "validation_omitted_rules"]

    @validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('validation_rules_assignment',):
            raise ValueError("must be one of enum values ('validation_rules_assignment')")
        return value

    @validator('validation_status')
    def validation_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('VALID', 'PARTIALLY_VALID', 'INVALID',):
            raise ValueError("must be one of enum values ('VALID', 'PARTIALLY_VALID', 'INVALID')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BusValRuleAssignment:
        """Create an instance of BusValRuleAssignment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BusValRuleAssignment:
        """Create an instance of BusValRuleAssignment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BusValRuleAssignment.parse_obj(obj)

        _obj = BusValRuleAssignment.parse_obj({
            "id": obj.get("id"),
            "rule_id": obj.get("rule_id"),
            "related_object_id": obj.get("related_object_id"),
            "related_object_type": obj.get("related_object_type"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "object": obj.get("object") if obj.get("object") is not None else 'validation_rules_assignment',
            "validation_status": obj.get("validation_status"),
            "validation_omitted_rules": obj.get("validation_omitted_rules")
        })
        return _obj


