# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from voucherify_client.models.field_conditions import FieldConditions
from voucherify_client.models.junction import Junction

class ExportRedemptionFilters(BaseModel):
    """
    ExportRedemptionFilters
    """
    junction: Optional[Junction] = None
    id: Optional[FieldConditions] = None
    object: Optional[FieldConditions] = None
    var_date: Optional[FieldConditions] = Field(None, alias="date")
    voucher_code: Optional[FieldConditions] = None
    campaign: Optional[FieldConditions] = None
    promotion_tier_id: Optional[FieldConditions] = None
    customer_id: Optional[FieldConditions] = None
    customer_source_id: Optional[FieldConditions] = None
    customer_name: Optional[FieldConditions] = None
    tracking_id: Optional[FieldConditions] = None
    order_amount: Optional[FieldConditions] = None
    gift_amount: Optional[FieldConditions] = None
    loyalty_points: Optional[FieldConditions] = None
    result: Optional[FieldConditions] = None
    failure_code: Optional[FieldConditions] = None
    failure_message: Optional[FieldConditions] = None
    metadata: Optional[FieldConditions] = None
    __properties = ["junction", "id", "object", "date", "voucher_code", "campaign", "promotion_tier_id", "customer_id", "customer_source_id", "customer_name", "tracking_id", "order_amount", "gift_amount", "loyalty_points", "result", "failure_code", "failure_message", "metadata"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExportRedemptionFilters:
        """Create an instance of ExportRedemptionFilters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object
        if self.object:
            _dict['object'] = self.object.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_date
        if self.var_date:
            _dict['date'] = self.var_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of voucher_code
        if self.voucher_code:
            _dict['voucher_code'] = self.voucher_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of campaign
        if self.campaign:
            _dict['campaign'] = self.campaign.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promotion_tier_id
        if self.promotion_tier_id:
            _dict['promotion_tier_id'] = self.promotion_tier_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_id
        if self.customer_id:
            _dict['customer_id'] = self.customer_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_source_id
        if self.customer_source_id:
            _dict['customer_source_id'] = self.customer_source_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_name
        if self.customer_name:
            _dict['customer_name'] = self.customer_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tracking_id
        if self.tracking_id:
            _dict['tracking_id'] = self.tracking_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_amount
        if self.order_amount:
            _dict['order_amount'] = self.order_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gift_amount
        if self.gift_amount:
            _dict['gift_amount'] = self.gift_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loyalty_points
        if self.loyalty_points:
            _dict['loyalty_points'] = self.loyalty_points.to_dict()
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of failure_code
        if self.failure_code:
            _dict['failure_code'] = self.failure_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of failure_message
        if self.failure_message:
            _dict['failure_message'] = self.failure_message.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExportRedemptionFilters:
        """Create an instance of ExportRedemptionFilters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExportRedemptionFilters.parse_obj(obj)

        _obj = ExportRedemptionFilters.parse_obj({
            "junction": obj.get("junction"),
            "id": FieldConditions.from_dict(obj.get("id")) if obj.get("id") is not None else None,
            "object": FieldConditions.from_dict(obj.get("object")) if obj.get("object") is not None else None,
            "var_date": FieldConditions.from_dict(obj.get("date")) if obj.get("date") is not None else None,
            "voucher_code": FieldConditions.from_dict(obj.get("voucher_code")) if obj.get("voucher_code") is not None else None,
            "campaign": FieldConditions.from_dict(obj.get("campaign")) if obj.get("campaign") is not None else None,
            "promotion_tier_id": FieldConditions.from_dict(obj.get("promotion_tier_id")) if obj.get("promotion_tier_id") is not None else None,
            "customer_id": FieldConditions.from_dict(obj.get("customer_id")) if obj.get("customer_id") is not None else None,
            "customer_source_id": FieldConditions.from_dict(obj.get("customer_source_id")) if obj.get("customer_source_id") is not None else None,
            "customer_name": FieldConditions.from_dict(obj.get("customer_name")) if obj.get("customer_name") is not None else None,
            "tracking_id": FieldConditions.from_dict(obj.get("tracking_id")) if obj.get("tracking_id") is not None else None,
            "order_amount": FieldConditions.from_dict(obj.get("order_amount")) if obj.get("order_amount") is not None else None,
            "gift_amount": FieldConditions.from_dict(obj.get("gift_amount")) if obj.get("gift_amount") is not None else None,
            "loyalty_points": FieldConditions.from_dict(obj.get("loyalty_points")) if obj.get("loyalty_points") is not None else None,
            "result": FieldConditions.from_dict(obj.get("result")) if obj.get("result") is not None else None,
            "failure_code": FieldConditions.from_dict(obj.get("failure_code")) if obj.get("failure_code") is not None else None,
            "failure_message": FieldConditions.from_dict(obj.get("failure_message")) if obj.get("failure_message") is not None else None,
            "metadata": FieldConditions.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None
        })
        return _obj


