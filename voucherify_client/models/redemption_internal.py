# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator
from voucherify_client.models.order_calculated import OrderCalculated
from voucherify_client.models.promotion_tier import PromotionTier
from voucherify_client.models.redemption_internal_related_redemptions import RedemptionInternalRelatedRedemptions
from voucherify_client.models.redemption_reward_result import RedemptionRewardResult
from voucherify_client.models.simple_customer import SimpleCustomer
from voucherify_client.models.voucher import Voucher

class RedemptionInternal(BaseModel):
    """
    Model Used for internal communication  # noqa: E501
    """
    id: Optional[StrictStr] = Field(None, description="Unique redemption ID.")
    object: Optional[StrictStr] = Field('redemption', description="The type of object represented by the JSON. This object stores information about the `redemption`.")
    created_at: Optional[datetime] = Field(None, description="Timestamp representing the date and time when the redemption was created in ISO 8601 format.")
    tracking_id: Optional[StrictStr] = Field(None, description="Hashed customer source ID.")
    metadata: Optional[Dict[str, Any]] = Field(None, description="The metadata object stores all custom attributes assigned to the redemption.")
    channel_type: Optional[StrictStr] = Field(None, description="The source of the channel for the redemption rollback. A `USER` corresponds to the Voucherify Dashboard and an `API` corresponds to the API.")
    channel_id: Optional[StrictStr] = Field(None, description="Unique channel ID of the user performing the redemption. This is either a user ID from a user using the Voucherify Dashboard or an X-APP-Id of a user using the API.")
    failure_code: Optional[StrictStr] = Field(None, description="If the result is `FAILURE`, this parameter will provide a generic reason as to why the redemption failed.")
    failure_message: Optional[StrictStr] = Field(None, description="If the result is `FAILURE`, this parameter will provide a more expanded reason as to why the redemption failed.")
    order: Optional[OrderCalculated] = None
    previous_order: Optional[OrderCalculated] = None
    reward: Optional[RedemptionRewardResult] = None
    amount: Optional[StrictInt] = Field(None, description="A positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the total amount of the order. This is the sum of the order items' amounts.")
    reason: Optional[StrictStr] = Field(None, description="System generated cause for the redemption being invalid in the context of the provided parameters.")
    result: Optional[StrictStr] = Field(None, description="Redemption result.")
    status: Optional[StrictStr] = Field(None, description="Redemption status.")
    related_redemptions: Optional[RedemptionInternalRelatedRedemptions] = None
    parent_redemption_id: Optional[StrictStr] = Field(None, description="Unique redemption ID of the parent redemption.")
    redemption: Optional[StrictStr] = Field(None, description="Unique redemption ID of the parent redemption.")
    customer: Optional[SimpleCustomer] = None
    customer_id: Optional[StrictStr] = Field(None, description="Unique customer ID of the redeeming customer.")
    related_object_type: Optional[StrictStr] = Field(None, description="Defines the related object.")
    related_object_id: Optional[StrictStr] = Field(None, description="Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher.")
    related_object_parent_id: Optional[StrictStr] = Field(None, description="Unique related parent object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher.")
    campaign_name: Optional[StrictStr] = Field(None, description="Campaign name")
    voucher: Optional[Voucher] = None
    promotion_tier: Optional[PromotionTier] = None
    __properties = ["id", "object", "created_at", "tracking_id", "metadata", "channel_type", "channel_id", "failure_code", "failure_message", "order", "previous_order", "reward", "amount", "reason", "result", "status", "related_redemptions", "parent_redemption_id", "redemption", "customer", "customer_id", "related_object_type", "related_object_id", "related_object_parent_id", "campaign_name", "voucher", "promotion_tier"]

    @validator('channel_type')
    def channel_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('USER', 'API',):
            raise ValueError("must be one of enum values ('USER', 'API')")
        return value

    @validator('result')
    def result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SUCCESS', 'FAILURE',):
            raise ValueError("must be one of enum values ('SUCCESS', 'FAILURE')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SUCCEEDED', 'FAILED',):
            raise ValueError("must be one of enum values ('SUCCEEDED', 'FAILED')")
        return value

    @validator('related_object_type')
    def related_object_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('voucher', 'promotion_tier',):
            raise ValueError("must be one of enum values ('voucher', 'promotion_tier')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RedemptionInternal:
        """Create an instance of RedemptionInternal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of order
        if self.order:
            _dict['order'] = self.order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previous_order
        if self.previous_order:
            _dict['previous_order'] = self.previous_order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reward
        if self.reward:
            _dict['reward'] = self.reward.to_dict()
        # override the default output from pydantic by calling `to_dict()` of related_redemptions
        if self.related_redemptions:
            _dict['related_redemptions'] = self.related_redemptions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of voucher
        if self.voucher:
            _dict['voucher'] = self.voucher.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promotion_tier
        if self.promotion_tier:
            _dict['promotion_tier'] = self.promotion_tier.to_dict()
        # set to None if customer_id (nullable) is None
        # and __fields_set__ contains the field
        if self.customer_id is None and "customer_id" in self.__fields_set__:
            _dict['customer_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RedemptionInternal:
        """Create an instance of RedemptionInternal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RedemptionInternal.parse_obj(obj)

        _obj = RedemptionInternal.parse_obj({
            "id": obj.get("id"),
            "object": obj.get("object") if obj.get("object") is not None else 'redemption',
            "created_at": obj.get("created_at"),
            "tracking_id": obj.get("tracking_id"),
            "metadata": obj.get("metadata"),
            "channel_type": obj.get("channel_type"),
            "channel_id": obj.get("channel_id"),
            "failure_code": obj.get("failure_code"),
            "failure_message": obj.get("failure_message"),
            "order": OrderCalculated.from_dict(obj.get("order")) if obj.get("order") is not None else None,
            "previous_order": OrderCalculated.from_dict(obj.get("previous_order")) if obj.get("previous_order") is not None else None,
            "reward": RedemptionRewardResult.from_dict(obj.get("reward")) if obj.get("reward") is not None else None,
            "amount": obj.get("amount"),
            "reason": obj.get("reason"),
            "result": obj.get("result"),
            "status": obj.get("status"),
            "related_redemptions": RedemptionInternalRelatedRedemptions.from_dict(obj.get("related_redemptions")) if obj.get("related_redemptions") is not None else None,
            "parent_redemption_id": obj.get("parent_redemption_id"),
            "redemption": obj.get("redemption"),
            "customer": SimpleCustomer.from_dict(obj.get("customer")) if obj.get("customer") is not None else None,
            "customer_id": obj.get("customer_id"),
            "related_object_type": obj.get("related_object_type"),
            "related_object_id": obj.get("related_object_id"),
            "related_object_parent_id": obj.get("related_object_parent_id"),
            "campaign_name": obj.get("campaign_name"),
            "voucher": Voucher.from_dict(obj.get("voucher")) if obj.get("voucher") is not None else None,
            "promotion_tier": PromotionTier.from_dict(obj.get("promotion_tier")) if obj.get("promotion_tier") is not None else None
        })
        return _obj


