# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class ProductsSkusCreateRequestBody(BaseModel):
    """
    Request body schema for **POST** `/products/{productId}/skus  # noqa: E501
    """
    id: Optional[StrictStr] = Field(None, description="Unique SKU ID.")
    source_id: Optional[StrictStr] = Field(None, description="A unique SKU identifier from your inventory system.")
    sku: Optional[StrictStr] = Field(None, description="Unique user-defined SKU name.")
    price: Optional[StrictInt] = Field(None, description="SKU unit price. Value is multiplied by 100 to precisely represent 2 decimal places. For example `10000 cents` for `$100.00`.")
    currency: Optional[StrictStr] = Field(None, description="SKU price currency.")
    attributes: Optional[Dict[str, Any]] = Field(None, description="The attributes object stores values for all custom attributes inherited by the SKU from the parent product. A set of key/value pairs that are attached to a SKU object and are unique to each SKU within a product family.")
    image_url: Optional[StrictStr] = Field(None, description="The HTTPS URL pointing to the .png or .jpg file that will be used to render the SKU image.")
    metadata: Optional[Dict[str, Any]] = Field(None, description="The metadata object stores all custom attributes assigned to the SKU. A set of key/value pairs that you can attach to a SKU object. It can be useful for storing additional information about the SKU in a structured format.")
    __properties = ["id", "source_id", "sku", "price", "currency", "attributes", "image_url", "metadata"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProductsSkusCreateRequestBody:
        """Create an instance of ProductsSkusCreateRequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProductsSkusCreateRequestBody:
        """Create an instance of ProductsSkusCreateRequestBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProductsSkusCreateRequestBody.parse_obj(obj)

        _obj = ProductsSkusCreateRequestBody.parse_obj({
            "id": obj.get("id"),
            "source_id": obj.get("source_id"),
            "sku": obj.get("sku"),
            "price": obj.get("price"),
            "currency": obj.get("currency"),
            "attributes": obj.get("attributes"),
            "image_url": obj.get("image_url"),
            "metadata": obj.get("metadata")
        })
        return _obj


