# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator
from voucherify_client.models.loyalties_members_redemption_redeem_response_body_channel import LoyaltiesMembersRedemptionRedeemResponseBodyChannel
from voucherify_client.models.loyalties_members_redemption_redeem_response_body_gift import LoyaltiesMembersRedemptionRedeemResponseBodyGift
from voucherify_client.models.loyalties_members_redemption_redeem_response_body_loyalty_card import LoyaltiesMembersRedemptionRedeemResponseBodyLoyaltyCard
from voucherify_client.models.loyalties_members_redemption_redeem_response_body_related_redemptions import LoyaltiesMembersRedemptionRedeemResponseBodyRelatedRedemptions
from voucherify_client.models.loyalties_members_redemption_redeem_response_body_voucher import LoyaltiesMembersRedemptionRedeemResponseBodyVoucher
from voucherify_client.models.order_calculated import OrderCalculated
from voucherify_client.models.promotion_tier import PromotionTier
from voucherify_client.models.redemption_reward_result import RedemptionRewardResult
from voucherify_client.models.simple_customer import SimpleCustomer

class LoyaltiesMembersRedemptionRedeemResponseBody(BaseModel):
    """
    Response body schema for **POST** `v1/loyalties/{campaignId}/members/{memberId}/redemption` and for **POST** `v1/loyalties/members/{memberId}/redemption`.  # noqa: E501
    """
    id: Optional[StrictStr] = Field(None, description="Unique redemption ID.")
    object: Optional[StrictStr] = Field('redemption', description="The type of the object represented by the JSON")
    var_date: Optional[datetime] = Field(None, alias="date", description="Timestamp representing the date and time when the object was created. The value is shown in the ISO 8601 format.")
    customer_id: Optional[StrictStr] = Field(None, description="Unique customer ID of the redeeming customer.")
    tracking_id: Optional[StrictStr] = Field(None, description="Hashed customer source ID.")
    metadata: Optional[Dict[str, Any]] = Field(None, description="The metadata object stores all custom attributes assigned to the redemption.")
    amount: Optional[StrictInt] = Field(None, description="For gift cards, this is a positive integer in the smallest currency unit (e.g. 100 cents for $1.00) representing the number of redeemed credits. For loyalty cards, this is the number of loyalty points used in the transaction.")
    redemption: Optional[StrictStr] = Field(None, description="Unique redemption ID of the parent redemption.")
    result: Optional[StrictStr] = Field(None, description="Redemption result.")
    status: Optional[StrictStr] = Field(None, description="Redemption status.")
    related_redemptions: Optional[LoyaltiesMembersRedemptionRedeemResponseBodyRelatedRedemptions] = None
    failure_code: Optional[StrictStr] = Field(None, description="If the result is `FAILURE`, this parameter will provide a generic reason as to why the redemption failed.")
    failure_message: Optional[StrictStr] = Field(None, description="If the result is `FAILURE`, this parameter will provide a more expanded reason as to why the redemption failed.")
    order: Optional[OrderCalculated] = None
    channel: Optional[LoyaltiesMembersRedemptionRedeemResponseBodyChannel] = None
    customer: Optional[SimpleCustomer] = None
    related_object_type: Optional[StrictStr] = Field(None, description="Defines the related object.")
    related_object_id: Optional[StrictStr] = Field(None, description="Unique related object ID assigned by Voucherify, i.e. v_lfZi4rcEGe0sN9gmnj40bzwK2FH6QUno for a voucher.")
    voucher: Optional[LoyaltiesMembersRedemptionRedeemResponseBodyVoucher] = None
    promotion_tier: Optional[PromotionTier] = None
    reward: Optional[RedemptionRewardResult] = None
    gift: Optional[LoyaltiesMembersRedemptionRedeemResponseBodyGift] = None
    loyalty_card: Optional[LoyaltiesMembersRedemptionRedeemResponseBodyLoyaltyCard] = None
    __properties = ["id", "object", "date", "customer_id", "tracking_id", "metadata", "amount", "redemption", "result", "status", "related_redemptions", "failure_code", "failure_message", "order", "channel", "customer", "related_object_type", "related_object_id", "voucher", "promotion_tier", "reward", "gift", "loyalty_card"]

    @validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('redemption',):
            raise ValueError("must be one of enum values ('redemption')")
        return value

    @validator('result')
    def result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SUCCESS', 'FAILURE',):
            raise ValueError("must be one of enum values ('SUCCESS', 'FAILURE')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SUCCEEDED', 'FAILED', 'ROLLED_BACK',):
            raise ValueError("must be one of enum values ('SUCCEEDED', 'FAILED', 'ROLLED_BACK')")
        return value

    @validator('related_object_type')
    def related_object_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('voucher', 'promotion_tier', 'redemption',):
            raise ValueError("must be one of enum values ('voucher', 'promotion_tier', 'redemption')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LoyaltiesMembersRedemptionRedeemResponseBody:
        """Create an instance of LoyaltiesMembersRedemptionRedeemResponseBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of related_redemptions
        if self.related_redemptions:
            _dict['related_redemptions'] = self.related_redemptions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order
        if self.order:
            _dict['order'] = self.order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of channel
        if self.channel:
            _dict['channel'] = self.channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of voucher
        if self.voucher:
            _dict['voucher'] = self.voucher.to_dict()
        # override the default output from pydantic by calling `to_dict()` of promotion_tier
        if self.promotion_tier:
            _dict['promotion_tier'] = self.promotion_tier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reward
        if self.reward:
            _dict['reward'] = self.reward.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gift
        if self.gift:
            _dict['gift'] = self.gift.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loyalty_card
        if self.loyalty_card:
            _dict['loyalty_card'] = self.loyalty_card.to_dict()
        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        # set to None if var_date (nullable) is None
        # and __fields_set__ contains the field
        if self.var_date is None and "var_date" in self.__fields_set__:
            _dict['date'] = None

        # set to None if customer_id (nullable) is None
        # and __fields_set__ contains the field
        if self.customer_id is None and "customer_id" in self.__fields_set__:
            _dict['customer_id'] = None

        # set to None if tracking_id (nullable) is None
        # and __fields_set__ contains the field
        if self.tracking_id is None and "tracking_id" in self.__fields_set__:
            _dict['tracking_id'] = None

        # set to None if metadata (nullable) is None
        # and __fields_set__ contains the field
        if self.metadata is None and "metadata" in self.__fields_set__:
            _dict['metadata'] = None

        # set to None if amount (nullable) is None
        # and __fields_set__ contains the field
        if self.amount is None and "amount" in self.__fields_set__:
            _dict['amount'] = None

        # set to None if redemption (nullable) is None
        # and __fields_set__ contains the field
        if self.redemption is None and "redemption" in self.__fields_set__:
            _dict['redemption'] = None

        # set to None if result (nullable) is None
        # and __fields_set__ contains the field
        if self.result is None and "result" in self.__fields_set__:
            _dict['result'] = None

        # set to None if status (nullable) is None
        # and __fields_set__ contains the field
        if self.status is None and "status" in self.__fields_set__:
            _dict['status'] = None

        # set to None if related_redemptions (nullable) is None
        # and __fields_set__ contains the field
        if self.related_redemptions is None and "related_redemptions" in self.__fields_set__:
            _dict['related_redemptions'] = None

        # set to None if failure_code (nullable) is None
        # and __fields_set__ contains the field
        if self.failure_code is None and "failure_code" in self.__fields_set__:
            _dict['failure_code'] = None

        # set to None if failure_message (nullable) is None
        # and __fields_set__ contains the field
        if self.failure_message is None and "failure_message" in self.__fields_set__:
            _dict['failure_message'] = None

        # set to None if channel (nullable) is None
        # and __fields_set__ contains the field
        if self.channel is None and "channel" in self.__fields_set__:
            _dict['channel'] = None

        # set to None if related_object_type (nullable) is None
        # and __fields_set__ contains the field
        if self.related_object_type is None and "related_object_type" in self.__fields_set__:
            _dict['related_object_type'] = None

        # set to None if related_object_id (nullable) is None
        # and __fields_set__ contains the field
        if self.related_object_id is None and "related_object_id" in self.__fields_set__:
            _dict['related_object_id'] = None

        # set to None if voucher (nullable) is None
        # and __fields_set__ contains the field
        if self.voucher is None and "voucher" in self.__fields_set__:
            _dict['voucher'] = None

        # set to None if gift (nullable) is None
        # and __fields_set__ contains the field
        if self.gift is None and "gift" in self.__fields_set__:
            _dict['gift'] = None

        # set to None if loyalty_card (nullable) is None
        # and __fields_set__ contains the field
        if self.loyalty_card is None and "loyalty_card" in self.__fields_set__:
            _dict['loyalty_card'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LoyaltiesMembersRedemptionRedeemResponseBody:
        """Create an instance of LoyaltiesMembersRedemptionRedeemResponseBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LoyaltiesMembersRedemptionRedeemResponseBody.parse_obj(obj)

        _obj = LoyaltiesMembersRedemptionRedeemResponseBody.parse_obj({
            "id": obj.get("id"),
            "object": obj.get("object") if obj.get("object") is not None else 'redemption',
            "var_date": obj.get("date"),
            "customer_id": obj.get("customer_id"),
            "tracking_id": obj.get("tracking_id"),
            "metadata": obj.get("metadata"),
            "amount": obj.get("amount"),
            "redemption": obj.get("redemption"),
            "result": obj.get("result"),
            "status": obj.get("status"),
            "related_redemptions": LoyaltiesMembersRedemptionRedeemResponseBodyRelatedRedemptions.from_dict(obj.get("related_redemptions")) if obj.get("related_redemptions") is not None else None,
            "failure_code": obj.get("failure_code"),
            "failure_message": obj.get("failure_message"),
            "order": OrderCalculated.from_dict(obj.get("order")) if obj.get("order") is not None else None,
            "channel": LoyaltiesMembersRedemptionRedeemResponseBodyChannel.from_dict(obj.get("channel")) if obj.get("channel") is not None else None,
            "customer": SimpleCustomer.from_dict(obj.get("customer")) if obj.get("customer") is not None else None,
            "related_object_type": obj.get("related_object_type"),
            "related_object_id": obj.get("related_object_id"),
            "voucher": LoyaltiesMembersRedemptionRedeemResponseBodyVoucher.from_dict(obj.get("voucher")) if obj.get("voucher") is not None else None,
            "promotion_tier": PromotionTier.from_dict(obj.get("promotion_tier")) if obj.get("promotion_tier") is not None else None,
            "reward": RedemptionRewardResult.from_dict(obj.get("reward")) if obj.get("reward") is not None else None,
            "gift": LoyaltiesMembersRedemptionRedeemResponseBodyGift.from_dict(obj.get("gift")) if obj.get("gift") is not None else None,
            "loyalty_card": LoyaltiesMembersRedemptionRedeemResponseBodyLoyaltyCard.from_dict(obj.get("loyalty_card")) if obj.get("loyalty_card") is not None else None
        })
        return _obj


