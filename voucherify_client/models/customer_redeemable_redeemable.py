# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from voucherify_client.models.redeemable_voucher import RedeemableVoucher

class CustomerRedeemableRedeemable(BaseModel):
    """
    Detailed information about the customer's redeemable item  # noqa: E501
    """
    type: Optional[StrictStr] = Field(None, description="Type of the redeemable.")
    voucher: RedeemableVoucher = Field(...)
    status: Optional[StrictStr] = Field('ACTIVE', description="Status of the redeemable.")
    __properties = ["type", "voucher", "status"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ACTIVE', 'USED', 'DISABLED', 'NOT_ACTIVE_YET', 'EXPIRED', 'NO_BALANCE',):
            raise ValueError("must be one of enum values ('ACTIVE', 'USED', 'DISABLED', 'NOT_ACTIVE_YET', 'EXPIRED', 'NO_BALANCE')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomerRedeemableRedeemable:
        """Create an instance of CustomerRedeemableRedeemable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of voucher
        if self.voucher:
            _dict['voucher'] = self.voucher.to_dict()
        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict['type'] = None

        # set to None if status (nullable) is None
        # and __fields_set__ contains the field
        if self.status is None and "status" in self.__fields_set__:
            _dict['status'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomerRedeemableRedeemable:
        """Create an instance of CustomerRedeemableRedeemable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomerRedeemableRedeemable.parse_obj(obj)

        _obj = CustomerRedeemableRedeemable.parse_obj({
            "type": obj.get("type"),
            "voucher": RedeemableVoucher.from_dict(obj.get("voucher")) if obj.get("voucher") is not None else None,
            "status": obj.get("status") if obj.get("status") is not None else 'ACTIVE'
        })
        return _obj


