# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, validator
from voucherify_client.models.discount_fixed_vouchers_effect_types import DiscountFixedVouchersEffectTypes

class DiscountFixed(BaseModel):
    """
    DiscountFixed
    """
    type: StrictStr = Field(..., description="Defines the type of the voucher.")
    fixed_amount: Union[StrictFloat, StrictInt] = Field(..., description="Sets a fixed value for an order total or the item price. The value is multiplied by 100 to precisely represent 2 decimal places. For example, a $10 discount is written as 1000. If the fixed amount is calculated by the formula, i.e. the `fixed_amount_formula` parameter is present in the fixed amount definition, this value becomes the **fallback value**. As a result, if the formula cannot be calculated due to missing metadata, for example, this value will be used as the fixed value.")
    fixed_amount_formula: Optional[StrictStr] = None
    effect: Optional[DiscountFixedVouchersEffectTypes] = None
    is_dynamic: Optional[StrictBool] = Field(None, description="Flag indicating whether the discount was calculated using a formula.")
    __properties = ["type", "fixed_amount", "fixed_amount_formula", "effect", "is_dynamic"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('FIXED',):
            raise ValueError("must be one of enum values ('FIXED')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DiscountFixed:
        """Create an instance of DiscountFixed from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DiscountFixed:
        """Create an instance of DiscountFixed from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DiscountFixed.parse_obj(obj)

        _obj = DiscountFixed.parse_obj({
            "type": obj.get("type") if obj.get("type") is not None else 'FIXED',
            "fixed_amount": obj.get("fixed_amount"),
            "fixed_amount_formula": obj.get("fixed_amount_formula"),
            "effect": obj.get("effect"),
            "is_dynamic": obj.get("is_dynamic")
        })
        return _obj


