# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class LoyaltyCardTransactionDetailsOrder(BaseModel):
    """
    Contains information about the original order.  # noqa: E501
    """
    id: Optional[StrictStr] = Field(None, description="Unique order ID.")
    source_id: Optional[StrictStr] = Field(None, description="The merchant's order ID if it is different from the Voucherify order ID. It is really useful in case of integration between multiple systems. It can be an order ID from CRM, database or 3rd party service.")
    __properties = ["id", "source_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LoyaltyCardTransactionDetailsOrder:
        """Create an instance of LoyaltyCardTransactionDetailsOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if source_id (nullable) is None
        # and __fields_set__ contains the field
        if self.source_id is None and "source_id" in self.__fields_set__:
            _dict['source_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LoyaltyCardTransactionDetailsOrder:
        """Create an instance of LoyaltyCardTransactionDetailsOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LoyaltyCardTransactionDetailsOrder.parse_obj(obj)

        _obj = LoyaltyCardTransactionDetailsOrder.parse_obj({
            "id": obj.get("id"),
            "source_id": obj.get("source_id")
        })
        return _obj


