# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from voucherify_client.models.campaigns_vouchers_create_request_body_redemption import CampaignsVouchersCreateRequestBodyRedemption

class CampaignsVouchersCreateRequestBody(BaseModel):
    """
    Request body schema for **POST** `v1/campaigns/{campaignId}/vouchers/{code}`.  # noqa: E501
    """
    category: Optional[StrictStr] = Field(None, description="The category assigned to the campaign. Either pass this parameter OR the `category_id`.")
    metadata: Optional[Dict[str, Any]] = Field(None, description="The metadata object stores all custom attributes assigned to the voucher. A set of key/value pairs that you can attach to a voucher object. It can be useful for storing additional information about the voucher in a structured format.")
    redemption: Optional[CampaignsVouchersCreateRequestBodyRedemption] = None
    additional_info: Optional[StrictStr] = Field(None, description="An optional field to keep any extra textual information about the code such as a code description and details.")
    start_date: Optional[datetime] = Field(None, description="Activation timestamp defines when the voucher starts to be active in ISO 8601 format. Voucher is *inactive before* this date. ")
    expiration_date: Optional[datetime] = Field(None, description="Expiration timestamp defines when the voucher expires in ISO 8601 format.  Voucher is *inactive after* this date.")
    __properties = ["category", "metadata", "redemption", "additional_info", "start_date", "expiration_date"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CampaignsVouchersCreateRequestBody:
        """Create an instance of CampaignsVouchersCreateRequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of redemption
        if self.redemption:
            _dict['redemption'] = self.redemption.to_dict()
        # set to None if category (nullable) is None
        # and __fields_set__ contains the field
        if self.category is None and "category" in self.__fields_set__:
            _dict['category'] = None

        # set to None if metadata (nullable) is None
        # and __fields_set__ contains the field
        if self.metadata is None and "metadata" in self.__fields_set__:
            _dict['metadata'] = None

        # set to None if redemption (nullable) is None
        # and __fields_set__ contains the field
        if self.redemption is None and "redemption" in self.__fields_set__:
            _dict['redemption'] = None

        # set to None if additional_info (nullable) is None
        # and __fields_set__ contains the field
        if self.additional_info is None and "additional_info" in self.__fields_set__:
            _dict['additional_info'] = None

        # set to None if start_date (nullable) is None
        # and __fields_set__ contains the field
        if self.start_date is None and "start_date" in self.__fields_set__:
            _dict['start_date'] = None

        # set to None if expiration_date (nullable) is None
        # and __fields_set__ contains the field
        if self.expiration_date is None and "expiration_date" in self.__fields_set__:
            _dict['expiration_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CampaignsVouchersCreateRequestBody:
        """Create an instance of CampaignsVouchersCreateRequestBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CampaignsVouchersCreateRequestBody.parse_obj(obj)

        _obj = CampaignsVouchersCreateRequestBody.parse_obj({
            "category": obj.get("category"),
            "metadata": obj.get("metadata"),
            "redemption": CampaignsVouchersCreateRequestBodyRedemption.from_dict(obj.get("redemption")) if obj.get("redemption") is not None else None,
            "additional_info": obj.get("additional_info"),
            "start_date": obj.get("start_date"),
            "expiration_date": obj.get("expiration_date")
        })
        return _obj


