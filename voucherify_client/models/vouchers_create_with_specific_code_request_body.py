# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator
from voucherify_client.models.discount import Discount
from voucherify_client.models.gift import Gift
from voucherify_client.models.simple_loyalty_card import SimpleLoyaltyCard
from voucherify_client.models.validity_hours import ValidityHours
from voucherify_client.models.validity_timeframe import ValidityTimeframe
from voucherify_client.models.vouchers_create_with_specific_code_request_body_redemption import VouchersCreateWithSpecificCodeRequestBodyRedemption

class VouchersCreateWithSpecificCodeRequestBody(BaseModel):
    """
    VouchersCreateWithSpecificCodeRequestBody
    """
    campaign: Optional[StrictStr] = Field(None, description="Identifies the voucher's parent campaign using a unique campaign name.")
    campaign_id: Optional[StrictStr] = Field(None, description="Identifies the voucher's parent campaign using a unique campaign ID assigned by the Voucherify API.")
    category: Optional[StrictStr] = Field(None, description="The name of the category that this voucher belongs to. Useful when listing vouchers with the [List Vouchers](ref:list-vouchers) endpoint.")
    category_id: Optional[StrictStr] = Field(None, description="Unique identifier assigned by Voucherify to the name of the category that this voucher belongs to. Useful when listing vouchers with the [List Vouchers](ref:list-vouchers) endpoint.")
    start_date: Optional[datetime] = Field(None, description="Start date defines when the code starts to be active. Activation timestamp is presented in the ISO 8601 format. Voucher is *inactive before* this date.")
    expiration_date: Optional[datetime] = Field(None, description="Expiration date defines when the code expires. Expiration timestamp is presented in the ISO 8601 format.  Voucher is *inactive after* this date.")
    validity_timeframe: Optional[ValidityTimeframe] = None
    validity_day_of_week: Optional[conlist(StrictInt)] = Field(None, description="Integer array corresponding to the particular days of the week in which the voucher is valid.  - `0` Sunday - `1` Monday - `2` Tuesday - `3` Wednesday - `4` Thursday - `5` Friday - `6` Saturday")
    validity_hours: Optional[ValidityHours] = None
    active: Optional[StrictBool] = Field(None, description="A flag to toggle the voucher on or off. You can disable a voucher even though it's within the active period defined by the `start_date` and `expiration_date`.    - `true` indicates an *active* voucher - `false` indicates an *inactive* voucher")
    additional_info: Optional[StrictStr] = Field(None, description="An optional field to keep any extra textual information about the code such as a code description and details.")
    metadata: Optional[Dict[str, Any]] = None
    validation_rules: Optional[conlist(StrictStr)] = Field(None, description="Array containing the ID of the validation rule associated with the voucher.")
    redemption: Optional[VouchersCreateWithSpecificCodeRequestBodyRedemption] = None
    type: Optional[StrictStr] = None
    loyalty_card: Optional[SimpleLoyaltyCard] = None
    gift: Optional[Gift] = None
    discount: Optional[Discount] = None
    __properties = ["campaign", "campaign_id", "category", "category_id", "start_date", "expiration_date", "validity_timeframe", "validity_day_of_week", "validity_hours", "active", "additional_info", "metadata", "validation_rules", "redemption", "type", "loyalty_card", "gift", "discount"]

    @validator('validity_day_of_week')
    def validity_day_of_week_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in (0, 1, 2, 3, 4, 5, 6,):
                raise ValueError("each list item must be one of (0, 1, 2, 3, 4, 5, 6)")
        return value

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('LOYALTY_CARD', 'GIFT_VOUCHER', 'DISCOUNT_VOUCHER',):
            raise ValueError("must be one of enum values ('LOYALTY_CARD', 'GIFT_VOUCHER', 'DISCOUNT_VOUCHER')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VouchersCreateWithSpecificCodeRequestBody:
        """Create an instance of VouchersCreateWithSpecificCodeRequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of validity_timeframe
        if self.validity_timeframe:
            _dict['validity_timeframe'] = self.validity_timeframe.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validity_hours
        if self.validity_hours:
            _dict['validity_hours'] = self.validity_hours.to_dict()
        # override the default output from pydantic by calling `to_dict()` of redemption
        if self.redemption:
            _dict['redemption'] = self.redemption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loyalty_card
        if self.loyalty_card:
            _dict['loyalty_card'] = self.loyalty_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gift
        if self.gift:
            _dict['gift'] = self.gift.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discount
        if self.discount:
            _dict['discount'] = self.discount.to_dict()
        # set to None if campaign (nullable) is None
        # and __fields_set__ contains the field
        if self.campaign is None and "campaign" in self.__fields_set__:
            _dict['campaign'] = None

        # set to None if campaign_id (nullable) is None
        # and __fields_set__ contains the field
        if self.campaign_id is None and "campaign_id" in self.__fields_set__:
            _dict['campaign_id'] = None

        # set to None if category (nullable) is None
        # and __fields_set__ contains the field
        if self.category is None and "category" in self.__fields_set__:
            _dict['category'] = None

        # set to None if category_id (nullable) is None
        # and __fields_set__ contains the field
        if self.category_id is None and "category_id" in self.__fields_set__:
            _dict['category_id'] = None

        # set to None if start_date (nullable) is None
        # and __fields_set__ contains the field
        if self.start_date is None and "start_date" in self.__fields_set__:
            _dict['start_date'] = None

        # set to None if expiration_date (nullable) is None
        # and __fields_set__ contains the field
        if self.expiration_date is None and "expiration_date" in self.__fields_set__:
            _dict['expiration_date'] = None

        # set to None if active (nullable) is None
        # and __fields_set__ contains the field
        if self.active is None and "active" in self.__fields_set__:
            _dict['active'] = None

        # set to None if additional_info (nullable) is None
        # and __fields_set__ contains the field
        if self.additional_info is None and "additional_info" in self.__fields_set__:
            _dict['additional_info'] = None

        # set to None if metadata (nullable) is None
        # and __fields_set__ contains the field
        if self.metadata is None and "metadata" in self.__fields_set__:
            _dict['metadata'] = None

        # set to None if validation_rules (nullable) is None
        # and __fields_set__ contains the field
        if self.validation_rules is None and "validation_rules" in self.__fields_set__:
            _dict['validation_rules'] = None

        # set to None if redemption (nullable) is None
        # and __fields_set__ contains the field
        if self.redemption is None and "redemption" in self.__fields_set__:
            _dict['redemption'] = None

        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VouchersCreateWithSpecificCodeRequestBody:
        """Create an instance of VouchersCreateWithSpecificCodeRequestBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VouchersCreateWithSpecificCodeRequestBody.parse_obj(obj)

        _obj = VouchersCreateWithSpecificCodeRequestBody.parse_obj({
            "campaign": obj.get("campaign"),
            "campaign_id": obj.get("campaign_id"),
            "category": obj.get("category"),
            "category_id": obj.get("category_id"),
            "start_date": obj.get("start_date"),
            "expiration_date": obj.get("expiration_date"),
            "validity_timeframe": ValidityTimeframe.from_dict(obj.get("validity_timeframe")) if obj.get("validity_timeframe") is not None else None,
            "validity_day_of_week": obj.get("validity_day_of_week"),
            "validity_hours": ValidityHours.from_dict(obj.get("validity_hours")) if obj.get("validity_hours") is not None else None,
            "active": obj.get("active"),
            "additional_info": obj.get("additional_info"),
            "metadata": obj.get("metadata"),
            "validation_rules": obj.get("validation_rules"),
            "redemption": VouchersCreateWithSpecificCodeRequestBodyRedemption.from_dict(obj.get("redemption")) if obj.get("redemption") is not None else None,
            "type": obj.get("type"),
            "loyalty_card": SimpleLoyaltyCard.from_dict(obj.get("loyalty_card")) if obj.get("loyalty_card") is not None else None,
            "gift": Gift.from_dict(obj.get("gift")) if obj.get("gift") is not None else None,
            "discount": Discount.from_dict(obj.get("discount")) if obj.get("discount") is not None else None
        })
        return _obj


