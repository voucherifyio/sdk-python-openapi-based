# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class RewardTypeMaterialProduct(BaseModel):
    """
    Contains information about the product given as a reward.  # noqa: E501
    """
    id: StrictStr = Field(..., description="Unique product ID, assigned by Voucherify.")
    sku_id: Optional[StrictStr] = Field(None, description="Unique SKU ID, assigned by Voucherify, of the SKU given as a reward.")
    __properties = ["id", "sku_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RewardTypeMaterialProduct:
        """Create an instance of RewardTypeMaterialProduct from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if sku_id (nullable) is None
        # and __fields_set__ contains the field
        if self.sku_id is None and "sku_id" in self.__fields_set__:
            _dict['sku_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RewardTypeMaterialProduct:
        """Create an instance of RewardTypeMaterialProduct from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RewardTypeMaterialProduct.parse_obj(obj)

        _obj = RewardTypeMaterialProduct.parse_obj({
            "id": obj.get("id"),
            "sku_id": obj.get("sku_id")
        })
        return _obj


