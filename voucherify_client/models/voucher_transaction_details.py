# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from voucherify_client.models.simple_voucher import SimpleVoucher
from voucherify_client.models.voucher_transaction_details_balance import VoucherTransactionDetailsBalance
from voucherify_client.models.voucher_transaction_details_custom_event import VoucherTransactionDetailsCustomEvent
from voucherify_client.models.voucher_transaction_details_earning_rule import VoucherTransactionDetailsEarningRule
from voucherify_client.models.voucher_transaction_details_event import VoucherTransactionDetailsEvent
from voucherify_client.models.voucher_transaction_details_event_schema import VoucherTransactionDetailsEventSchema
from voucherify_client.models.voucher_transaction_details_loyalty_tier import VoucherTransactionDetailsLoyaltyTier
from voucherify_client.models.voucher_transaction_details_order import VoucherTransactionDetailsOrder
from voucherify_client.models.voucher_transaction_details_redemption import VoucherTransactionDetailsRedemption
from voucherify_client.models.voucher_transaction_details_reward import VoucherTransactionDetailsReward
from voucherify_client.models.voucher_transaction_details_rollback import VoucherTransactionDetailsRollback
from voucherify_client.models.voucher_transaction_details_segment import VoucherTransactionDetailsSegment

class VoucherTransactionDetails(BaseModel):
    """
    Contains the detailed information about the transaction.  # noqa: E501
    """
    balance: Optional[VoucherTransactionDetailsBalance] = None
    order: Optional[VoucherTransactionDetailsOrder] = None
    event: Optional[VoucherTransactionDetailsEvent] = None
    earning_rule: Optional[VoucherTransactionDetailsEarningRule] = None
    segment: Optional[VoucherTransactionDetailsSegment] = None
    loyalty_tier: Optional[VoucherTransactionDetailsLoyaltyTier] = None
    redemption: Optional[VoucherTransactionDetailsRedemption] = None
    rollback: Optional[VoucherTransactionDetailsRollback] = None
    custom_event: Optional[VoucherTransactionDetailsCustomEvent] = None
    event_schema: Optional[VoucherTransactionDetailsEventSchema] = None
    reward: Optional[VoucherTransactionDetailsReward] = None
    source_voucher: Optional[SimpleVoucher] = None
    destination_voucher: Optional[SimpleVoucher] = None
    __properties = ["balance", "order", "event", "earning_rule", "segment", "loyalty_tier", "redemption", "rollback", "custom_event", "event_schema", "reward", "source_voucher", "destination_voucher"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VoucherTransactionDetails:
        """Create an instance of VoucherTransactionDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of balance
        if self.balance:
            _dict['balance'] = self.balance.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order
        if self.order:
            _dict['order'] = self.order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event
        if self.event:
            _dict['event'] = self.event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of earning_rule
        if self.earning_rule:
            _dict['earning_rule'] = self.earning_rule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of segment
        if self.segment:
            _dict['segment'] = self.segment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loyalty_tier
        if self.loyalty_tier:
            _dict['loyalty_tier'] = self.loyalty_tier.to_dict()
        # override the default output from pydantic by calling `to_dict()` of redemption
        if self.redemption:
            _dict['redemption'] = self.redemption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rollback
        if self.rollback:
            _dict['rollback'] = self.rollback.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_event
        if self.custom_event:
            _dict['custom_event'] = self.custom_event.to_dict()
        # override the default output from pydantic by calling `to_dict()` of event_schema
        if self.event_schema:
            _dict['event_schema'] = self.event_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reward
        if self.reward:
            _dict['reward'] = self.reward.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_voucher
        if self.source_voucher:
            _dict['source_voucher'] = self.source_voucher.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination_voucher
        if self.destination_voucher:
            _dict['destination_voucher'] = self.destination_voucher.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VoucherTransactionDetails:
        """Create an instance of VoucherTransactionDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VoucherTransactionDetails.parse_obj(obj)

        _obj = VoucherTransactionDetails.parse_obj({
            "balance": VoucherTransactionDetailsBalance.from_dict(obj.get("balance")) if obj.get("balance") is not None else None,
            "order": VoucherTransactionDetailsOrder.from_dict(obj.get("order")) if obj.get("order") is not None else None,
            "event": VoucherTransactionDetailsEvent.from_dict(obj.get("event")) if obj.get("event") is not None else None,
            "earning_rule": VoucherTransactionDetailsEarningRule.from_dict(obj.get("earning_rule")) if obj.get("earning_rule") is not None else None,
            "segment": VoucherTransactionDetailsSegment.from_dict(obj.get("segment")) if obj.get("segment") is not None else None,
            "loyalty_tier": VoucherTransactionDetailsLoyaltyTier.from_dict(obj.get("loyalty_tier")) if obj.get("loyalty_tier") is not None else None,
            "redemption": VoucherTransactionDetailsRedemption.from_dict(obj.get("redemption")) if obj.get("redemption") is not None else None,
            "rollback": VoucherTransactionDetailsRollback.from_dict(obj.get("rollback")) if obj.get("rollback") is not None else None,
            "custom_event": VoucherTransactionDetailsCustomEvent.from_dict(obj.get("custom_event")) if obj.get("custom_event") is not None else None,
            "event_schema": VoucherTransactionDetailsEventSchema.from_dict(obj.get("event_schema")) if obj.get("event_schema") is not None else None,
            "reward": VoucherTransactionDetailsReward.from_dict(obj.get("reward")) if obj.get("reward") is not None else None,
            "source_voucher": SimpleVoucher.from_dict(obj.get("source_voucher")) if obj.get("source_voucher") is not None else None,
            "destination_voucher": SimpleVoucher.from_dict(obj.get("destination_voucher")) if obj.get("destination_voucher") is not None else None
        })
        return _obj


