# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator
from voucherify_client.models.discount import Discount
from voucherify_client.models.gift import Gift

class SimpleVoucher(BaseModel):
    """
    SimpleVoucher
    """
    id: Optional[StrictStr] = Field(None, description="A unique identifier that represents the voucher assigned by Voucherify.")
    code: StrictStr = Field(..., description="Voucher code.")
    gift: Optional[Gift] = None
    discount: Optional[Discount] = None
    loyalty_card: Optional[Dict[str, Any]] = Field(None, description="Defines the loyalty card details.")
    type: Optional[StrictStr] = Field('voucher', description="Type of the object.")
    campaign: Optional[Dict[str, Any]] = Field(None, description="Campaign object")
    campaign_id: Optional[StrictStr] = Field(None, description="Campaign unique ID.")
    is_referral_code: Optional[StrictBool] = Field(None, description="Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`.")
    holder_id: Optional[StrictStr] = Field(None, description="Unique customer ID of campaign owner.")
    referrer_id: Optional[StrictStr] = Field(None, description="Unique referrer ID.")
    created_at: Optional[datetime] = Field(None, description="Timestamp representing the date and time when the order was created in ISO 8601 format.")
    object: Optional[StrictStr] = Field('voucher', description="The type of object represented by JSON.")
    __properties = ["id", "code", "gift", "discount", "loyalty_card", "type", "campaign", "campaign_id", "is_referral_code", "holder_id", "referrer_id", "created_at", "object"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('voucher',):
            raise ValueError("must be one of enum values ('voucher')")
        return value

    @validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('voucher',):
            raise ValueError("must be one of enum values ('voucher')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SimpleVoucher:
        """Create an instance of SimpleVoucher from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of gift
        if self.gift:
            _dict['gift'] = self.gift.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discount
        if self.discount:
            _dict['discount'] = self.discount.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SimpleVoucher:
        """Create an instance of SimpleVoucher from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SimpleVoucher.parse_obj(obj)

        _obj = SimpleVoucher.parse_obj({
            "id": obj.get("id"),
            "code": obj.get("code"),
            "gift": Gift.from_dict(obj.get("gift")) if obj.get("gift") is not None else None,
            "discount": Discount.from_dict(obj.get("discount")) if obj.get("discount") is not None else None,
            "loyalty_card": obj.get("loyalty_card"),
            "type": obj.get("type") if obj.get("type") is not None else 'voucher',
            "campaign": obj.get("campaign"),
            "campaign_id": obj.get("campaign_id"),
            "is_referral_code": obj.get("is_referral_code"),
            "holder_id": obj.get("holder_id"),
            "referrer_id": obj.get("referrer_id"),
            "created_at": obj.get("created_at"),
            "object": obj.get("object") if obj.get("object") is not None else 'voucher'
        })
        return _obj


