# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator

class ValidityHoursDailyItem(BaseModel):
    """
    Defines the reccuring period(s) when the resource will be active.  # noqa: E501
    """
    start_time: Optional[StrictStr] = Field(None, description="Defines the starting hour of validity in the HH:mm format. The resource is *inactive before* this time.")
    days_of_week: Optional[conlist(StrictInt)] = Field(None, description="Integer array corresponding to the particular days of the week in which the resource is valid.  - `0` Sunday - `1` Monday - `2` Tuesday - `3`  Wednesday - `4` Thursday - `5` Friday - `6` Saturday")
    expiration_time: Optional[StrictStr] = Field(None, description="Defines the ending hour of validity in the HH:mm format. The resource is *inactive after* this time.")
    __properties = ["start_time", "days_of_week", "expiration_time"]

    @validator('days_of_week')
    def days_of_week_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in (0, 1, 2, 3, 4, 5, 6,):
                raise ValueError("each list item must be one of (0, 1, 2, 3, 4, 5, 6)")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ValidityHoursDailyItem:
        """Create an instance of ValidityHoursDailyItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ValidityHoursDailyItem:
        """Create an instance of ValidityHoursDailyItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ValidityHoursDailyItem.parse_obj(obj)

        _obj = ValidityHoursDailyItem.parse_obj({
            "start_time": obj.get("start_time"),
            "days_of_week": obj.get("days_of_week"),
            "expiration_time": obj.get("expiration_time")
        })
        return _obj


