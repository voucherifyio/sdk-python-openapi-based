# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, validator
from voucherify_client.models.qualifications_redeemable import QualificationsRedeemable

class QualificationsRedeemables(BaseModel):
    """
    List of redeemables for examine qualification.  # noqa: E501
    """
    object: Optional[StrictStr] = Field('list', description="The type of the object represented by JSON. Default is `list`.")
    data_ref: Optional[StrictStr] = Field('data', description="Identifies the name of the attribute that contains the array of qualified redeemables.")
    data: Optional[conlist(QualificationsRedeemable)] = Field(None, description="Array of qualified redeemables.")
    total: Optional[StrictInt] = Field(None, description="The number of redeemables returned in the API request.")
    has_more: Optional[StrictBool] = Field(None, description="As results are always limited, the `has_more` flag indicates if there are more records for given parameters. This lets you know if you can run another request (with different options) to get more records returned in the results.")
    more_starting_after: Optional[datetime] = Field(None, description="Timestamp representing the date and time to use in `starting_after` cursor to get more redeemables.")
    __properties = ["object", "data_ref", "data", "total", "has_more", "more_starting_after"]

    @validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('list',):
            raise ValueError("must be one of enum values ('list')")
        return value

    @validator('data_ref')
    def data_ref_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('data',):
            raise ValueError("must be one of enum values ('data')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> QualificationsRedeemables:
        """Create an instance of QualificationsRedeemables from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item in self.data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['data'] = _items
        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        # set to None if data_ref (nullable) is None
        # and __fields_set__ contains the field
        if self.data_ref is None and "data_ref" in self.__fields_set__:
            _dict['data_ref'] = None

        # set to None if data (nullable) is None
        # and __fields_set__ contains the field
        if self.data is None and "data" in self.__fields_set__:
            _dict['data'] = None

        # set to None if total (nullable) is None
        # and __fields_set__ contains the field
        if self.total is None and "total" in self.__fields_set__:
            _dict['total'] = None

        # set to None if has_more (nullable) is None
        # and __fields_set__ contains the field
        if self.has_more is None and "has_more" in self.__fields_set__:
            _dict['has_more'] = None

        # set to None if more_starting_after (nullable) is None
        # and __fields_set__ contains the field
        if self.more_starting_after is None and "more_starting_after" in self.__fields_set__:
            _dict['more_starting_after'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QualificationsRedeemables:
        """Create an instance of QualificationsRedeemables from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualificationsRedeemables.parse_obj(obj)

        _obj = QualificationsRedeemables.parse_obj({
            "object": obj.get("object") if obj.get("object") is not None else 'list',
            "data_ref": obj.get("data_ref") if obj.get("data_ref") is not None else 'data',
            "data": [QualificationsRedeemable.from_dict(_item) for _item in obj.get("data")] if obj.get("data") is not None else None,
            "total": obj.get("total"),
            "has_more": obj.get("has_more"),
            "more_starting_after": obj.get("more_starting_after")
        })
        return _obj


