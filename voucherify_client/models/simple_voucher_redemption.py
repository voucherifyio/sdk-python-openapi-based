# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt

class SimpleVoucherRedemption(BaseModel):
    """
    Defines the redemption limits on vouchers.  # noqa: E501
    """
    quantity: Optional[StrictInt] = Field(None, description="How many times a voucher can be redeemed. A `null` value means unlimited.")
    redeemed_quantity: Optional[StrictInt] = Field(None, description="How many times a voucher has already been redeemed.")
    __properties = ["quantity", "redeemed_quantity"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SimpleVoucherRedemption:
        """Create an instance of SimpleVoucherRedemption from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if quantity (nullable) is None
        # and __fields_set__ contains the field
        if self.quantity is None and "quantity" in self.__fields_set__:
            _dict['quantity'] = None

        # set to None if redeemed_quantity (nullable) is None
        # and __fields_set__ contains the field
        if self.redeemed_quantity is None and "redeemed_quantity" in self.__fields_set__:
            _dict['redeemed_quantity'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SimpleVoucherRedemption:
        """Create an instance of SimpleVoucherRedemption from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SimpleVoucherRedemption.parse_obj(obj)

        _obj = SimpleVoucherRedemption.parse_obj({
            "quantity": obj.get("quantity"),
            "redeemed_quantity": obj.get("redeemed_quantity")
        })
        return _obj


