# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator

class ParameterFiltersListCustomerRedeemablesHolderRoleConditions(BaseModel):
    """
    ParameterFiltersListCustomerRedeemablesHolderRoleConditions
    """
    var_in: Optional[conlist(StrictStr)] = Field(None, alias="$in", description="Array of resource values that should be included in the results (multiple values).")
    not_in: Optional[conlist(StrictStr)] = Field(None, alias="$not_in", description="Array of resource values that should be included in the results (multiple values).")
    var_is: Optional[StrictStr] = Field(None, alias="$is", description="Value is exactly this value (single value).")
    is_not: Optional[StrictStr] = Field(None, alias="$is_not", description="Results omit this value (single value).")
    has_value: Optional[StrictStr] = Field(None, alias="$has_value", description="Value is NOT null. The value for this parameter is an empty string.")
    is_unknown: Optional[StrictStr] = Field(None, alias="$is_unknown", description="Value is null. The value for this parameter is an empty string.")
    starts_with: Optional[StrictStr] = Field(None, alias="$starts_with", description="Value starts with the specified string.")
    ends_with: Optional[StrictStr] = Field(None, alias="$ends_with", description="Value ends with the specified string.")
    __properties = ["$in", "$not_in", "$is", "$is_not", "$has_value", "$is_unknown", "$starts_with", "$ends_with"]

    @validator('var_in')
    def var_in_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('OWNER', 'REFEREE', 'REFERRER',):
                raise ValueError("each list item must be one of ('OWNER', 'REFEREE', 'REFERRER')")
        return value

    @validator('not_in')
    def not_in_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('OWNER', 'REFEREE', 'REFERRER',):
                raise ValueError("each list item must be one of ('OWNER', 'REFEREE', 'REFERRER')")
        return value

    @validator('var_is')
    def var_is_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('OWNER', 'REFEREE', 'REFERRER',):
            raise ValueError("must be one of enum values ('OWNER', 'REFEREE', 'REFERRER')")
        return value

    @validator('is_not')
    def is_not_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('OWNER', 'REFEREE', 'REFERRER',):
            raise ValueError("must be one of enum values ('OWNER', 'REFEREE', 'REFERRER')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ParameterFiltersListCustomerRedeemablesHolderRoleConditions:
        """Create an instance of ParameterFiltersListCustomerRedeemablesHolderRoleConditions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if var_in (nullable) is None
        # and __fields_set__ contains the field
        if self.var_in is None and "var_in" in self.__fields_set__:
            _dict['$in'] = None

        # set to None if not_in (nullable) is None
        # and __fields_set__ contains the field
        if self.not_in is None and "not_in" in self.__fields_set__:
            _dict['$not_in'] = None

        # set to None if var_is (nullable) is None
        # and __fields_set__ contains the field
        if self.var_is is None and "var_is" in self.__fields_set__:
            _dict['$is'] = None

        # set to None if is_not (nullable) is None
        # and __fields_set__ contains the field
        if self.is_not is None and "is_not" in self.__fields_set__:
            _dict['$is_not'] = None

        # set to None if has_value (nullable) is None
        # and __fields_set__ contains the field
        if self.has_value is None and "has_value" in self.__fields_set__:
            _dict['$has_value'] = None

        # set to None if is_unknown (nullable) is None
        # and __fields_set__ contains the field
        if self.is_unknown is None and "is_unknown" in self.__fields_set__:
            _dict['$is_unknown'] = None

        # set to None if starts_with (nullable) is None
        # and __fields_set__ contains the field
        if self.starts_with is None and "starts_with" in self.__fields_set__:
            _dict['$starts_with'] = None

        # set to None if ends_with (nullable) is None
        # and __fields_set__ contains the field
        if self.ends_with is None and "ends_with" in self.__fields_set__:
            _dict['$ends_with'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ParameterFiltersListCustomerRedeemablesHolderRoleConditions:
        """Create an instance of ParameterFiltersListCustomerRedeemablesHolderRoleConditions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ParameterFiltersListCustomerRedeemablesHolderRoleConditions.parse_obj(obj)

        _obj = ParameterFiltersListCustomerRedeemablesHolderRoleConditions.parse_obj({
            "var_in": obj.get("$in"),
            "not_in": obj.get("$not_in"),
            "var_is": obj.get("$is"),
            "is_not": obj.get("$is_not"),
            "has_value": obj.get("$has_value"),
            "is_unknown": obj.get("$is_unknown"),
            "starts_with": obj.get("$starts_with"),
            "ends_with": obj.get("$ends_with")
        })
        return _obj


