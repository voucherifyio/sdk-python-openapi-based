# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from voucherify_client.models.customer_redeemable_redeemable import CustomerRedeemableRedeemable

class CustomerRedeemable(BaseModel):
    """
    Single customer's redeemable  # noqa: E501
    """
    id: Optional[StrictStr] = Field(None, description="Unique redeemable holder identifier.")
    created_at: Optional[datetime] = Field(None, description="Timestamp representing the date and time when the redeemable was assigned. The value is shown in the ISO 8601 format.")
    redeemable_id: Optional[StrictStr] = Field(None, description="Identifier of the redeemable item.")
    redeemable_object: Optional[StrictStr] = Field(None, description="Type of the redeemable.")
    customer_id: Optional[StrictStr] = Field(None, description="Identifier of the customer.")
    holder_role: Optional[StrictStr] = Field('OWNER', description="Role of the holder.")
    campaign_id: Optional[StrictStr] = Field(None, description="Unique campaign identifier, assigned by Voucherify.")
    campaign_type: Optional[StrictStr] = Field('DISCOUNT_COUPONS', description="Defines the type of the campaign.")
    voucher_type: Optional[StrictStr] = Field('DISCOUNT_VOUCHER', description="Defines the type of the voucher.")
    redeemable: Optional[CustomerRedeemableRedeemable] = None
    __properties = ["id", "created_at", "redeemable_id", "redeemable_object", "customer_id", "holder_role", "campaign_id", "campaign_type", "voucher_type", "redeemable"]

    @validator('holder_role')
    def holder_role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('OWNER', 'REFERRER', 'REFEREE',):
            raise ValueError("must be one of enum values ('OWNER', 'REFERRER', 'REFEREE')")
        return value

    @validator('campaign_type')
    def campaign_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('LOYALTY_PROGRAM', 'GIFT_VOUCHERS', 'DISCOUNT_COUPONS', 'PROMOTION', 'REFERRAL_PROGRAM', 'LUCKY_DRAW',):
            raise ValueError("must be one of enum values ('LOYALTY_PROGRAM', 'GIFT_VOUCHERS', 'DISCOUNT_COUPONS', 'PROMOTION', 'REFERRAL_PROGRAM', 'LUCKY_DRAW')")
        return value

    @validator('voucher_type')
    def voucher_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('GIFT_VOUCHER', 'DISCOUNT_VOUCHER', 'LOYALTY_CARD', 'LUCKY_DRAW_CODE',):
            raise ValueError("must be one of enum values ('GIFT_VOUCHER', 'DISCOUNT_VOUCHER', 'LOYALTY_CARD', 'LUCKY_DRAW_CODE')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomerRedeemable:
        """Create an instance of CustomerRedeemable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of redeemable
        if self.redeemable:
            _dict['redeemable'] = self.redeemable.to_dict()
        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict['created_at'] = None

        # set to None if redeemable_id (nullable) is None
        # and __fields_set__ contains the field
        if self.redeemable_id is None and "redeemable_id" in self.__fields_set__:
            _dict['redeemable_id'] = None

        # set to None if redeemable_object (nullable) is None
        # and __fields_set__ contains the field
        if self.redeemable_object is None and "redeemable_object" in self.__fields_set__:
            _dict['redeemable_object'] = None

        # set to None if customer_id (nullable) is None
        # and __fields_set__ contains the field
        if self.customer_id is None and "customer_id" in self.__fields_set__:
            _dict['customer_id'] = None

        # set to None if holder_role (nullable) is None
        # and __fields_set__ contains the field
        if self.holder_role is None and "holder_role" in self.__fields_set__:
            _dict['holder_role'] = None

        # set to None if campaign_id (nullable) is None
        # and __fields_set__ contains the field
        if self.campaign_id is None and "campaign_id" in self.__fields_set__:
            _dict['campaign_id'] = None

        # set to None if campaign_type (nullable) is None
        # and __fields_set__ contains the field
        if self.campaign_type is None and "campaign_type" in self.__fields_set__:
            _dict['campaign_type'] = None

        # set to None if voucher_type (nullable) is None
        # and __fields_set__ contains the field
        if self.voucher_type is None and "voucher_type" in self.__fields_set__:
            _dict['voucher_type'] = None

        # set to None if redeemable (nullable) is None
        # and __fields_set__ contains the field
        if self.redeemable is None and "redeemable" in self.__fields_set__:
            _dict['redeemable'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomerRedeemable:
        """Create an instance of CustomerRedeemable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomerRedeemable.parse_obj(obj)

        _obj = CustomerRedeemable.parse_obj({
            "id": obj.get("id"),
            "created_at": obj.get("created_at"),
            "redeemable_id": obj.get("redeemable_id"),
            "redeemable_object": obj.get("redeemable_object"),
            "customer_id": obj.get("customer_id"),
            "holder_role": obj.get("holder_role") if obj.get("holder_role") is not None else 'OWNER',
            "campaign_id": obj.get("campaign_id"),
            "campaign_type": obj.get("campaign_type") if obj.get("campaign_type") is not None else 'DISCOUNT_COUPONS',
            "voucher_type": obj.get("voucher_type") if obj.get("voucher_type") is not None else 'DISCOUNT_VOUCHER',
            "redeemable": CustomerRedeemableRedeemable.from_dict(obj.get("redeemable")) if obj.get("redeemable") is not None else None
        })
        return _obj


