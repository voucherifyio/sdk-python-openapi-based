# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr, validator

class SegmentsGetResponseBody(BaseModel):
    """
    Response body schema for **GET** `v1/v1/segments/{segmentId}`.  # noqa: E501
    """
    id: Optional[StrictStr] = Field(None, description="Unique segment ID.")
    name: Optional[StrictStr] = Field(None, description="Segment name.")
    created_at: Optional[datetime] = Field(None, description="Timestamp representing the date and time when the segment was created. The value is shown in the ISO 8601 format.")
    type: Optional[StrictStr] = Field(None, description="Describes whether the segment is dynamic (customers come in and leave based on set criteria) or static (manually selected customers).")
    filter: Optional[Dict[str, Any]] = Field(None, description="Defines a set of criteria for an `auto-update` segment type.  ")
    initial_sync_status: Optional[StrictStr] = None
    object: Optional[StrictStr] = Field('segment', description="The type of the object represented by JSON. This object stores information about the customer segment.")
    __properties = ["id", "name", "created_at", "type", "filter", "initial_sync_status", "object"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('auto-update', 'static',):
            raise ValueError("must be one of enum values ('auto-update', 'static')")
        return value

    @validator('initial_sync_status')
    def initial_sync_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('IN_PROGRESS', 'DONE',):
            raise ValueError("must be one of enum values ('IN_PROGRESS', 'DONE')")
        return value

    @validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('segment',):
            raise ValueError("must be one of enum values ('segment')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SegmentsGetResponseBody:
        """Create an instance of SegmentsGetResponseBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict['created_at'] = None

        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict['type'] = None

        # set to None if filter (nullable) is None
        # and __fields_set__ contains the field
        if self.filter is None and "filter" in self.__fields_set__:
            _dict['filter'] = None

        # set to None if initial_sync_status (nullable) is None
        # and __fields_set__ contains the field
        if self.initial_sync_status is None and "initial_sync_status" in self.__fields_set__:
            _dict['initial_sync_status'] = None

        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SegmentsGetResponseBody:
        """Create an instance of SegmentsGetResponseBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SegmentsGetResponseBody.parse_obj(obj)

        _obj = SegmentsGetResponseBody.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "created_at": obj.get("created_at"),
            "type": obj.get("type"),
            "filter": obj.get("filter"),
            "initial_sync_status": obj.get("initial_sync_status"),
            "object": obj.get("object") if obj.get("object") is not None else 'segment'
        })
        return _obj


