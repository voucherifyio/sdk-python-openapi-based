# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictStr, validator

class ValidationsRedeemableSkippedResultDetails(BaseModel):
    """
    ValidationsRedeemableSkippedResultDetails
    """
    key: Optional[StrictStr] = None
    message: Optional[StrictStr] = None
    __properties = ["key", "message"]

    @validator('key')
    def key_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('applicable_redeemables_limit_exceeded', 'applicable_redeemables_per_category_limit_exceeded', 'applicable_exclusive_redeemables_limit_exceeded', 'applicable_exclusive_redeemables_per_category_limit_exceeded', 'exclusion_rules_not_met', 'preceding_validation_failed',):
            raise ValueError("must be one of enum values ('applicable_redeemables_limit_exceeded', 'applicable_redeemables_per_category_limit_exceeded', 'applicable_exclusive_redeemables_limit_exceeded', 'applicable_exclusive_redeemables_per_category_limit_exceeded', 'exclusion_rules_not_met', 'preceding_validation_failed')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ValidationsRedeemableSkippedResultDetails:
        """Create an instance of ValidationsRedeemableSkippedResultDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if key (nullable) is None
        # and __fields_set__ contains the field
        if self.key is None and "key" in self.__fields_set__:
            _dict['key'] = None

        # set to None if message (nullable) is None
        # and __fields_set__ contains the field
        if self.message is None and "message" in self.__fields_set__:
            _dict['message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ValidationsRedeemableSkippedResultDetails:
        """Create an instance of ValidationsRedeemableSkippedResultDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ValidationsRedeemableSkippedResultDetails.parse_obj(obj)

        _obj = ValidationsRedeemableSkippedResultDetails.parse_obj({
            "key": obj.get("key"),
            "message": obj.get("message")
        })
        return _obj


