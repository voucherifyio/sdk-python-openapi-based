# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from voucherify_client.models.order_calculated import OrderCalculated
from voucherify_client.models.redemption import Redemption
from voucherify_client.models.validations_redeemable_inapplicable import ValidationsRedeemableInapplicable
from voucherify_client.models.validations_redeemable_skipped import ValidationsRedeemableSkipped

class ClientRedemptionsRedeemResponseBody(BaseModel):
    """
    Response body schema for **POST** `/redemptions`.  # noqa: E501
    """
    redemptions: Optional[conlist(Redemption)] = None
    parent_redemption: Optional[Redemption] = None
    order: Optional[OrderCalculated] = None
    inapplicable_redeemables: Optional[conlist(ValidationsRedeemableInapplicable)] = Field(None, description="Lists validation results of each inapplicable redeemable.")
    skipped_redeemables: Optional[conlist(ValidationsRedeemableSkipped)] = Field(None, description="Lists validation results of each redeemable. If a redeemable can be applied, the API returns `\"status\": \"APPLICABLE\"`.")
    __properties = ["redemptions", "parent_redemption", "order", "inapplicable_redeemables", "skipped_redeemables"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClientRedemptionsRedeemResponseBody:
        """Create an instance of ClientRedemptionsRedeemResponseBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in redemptions (list)
        _items = []
        if self.redemptions:
            for _item in self.redemptions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['redemptions'] = _items
        # override the default output from pydantic by calling `to_dict()` of parent_redemption
        if self.parent_redemption:
            _dict['parent_redemption'] = self.parent_redemption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order
        if self.order:
            _dict['order'] = self.order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in inapplicable_redeemables (list)
        _items = []
        if self.inapplicable_redeemables:
            for _item in self.inapplicable_redeemables:
                if _item:
                    _items.append(_item.to_dict())
            _dict['inapplicable_redeemables'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in skipped_redeemables (list)
        _items = []
        if self.skipped_redeemables:
            for _item in self.skipped_redeemables:
                if _item:
                    _items.append(_item.to_dict())
            _dict['skipped_redeemables'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClientRedemptionsRedeemResponseBody:
        """Create an instance of ClientRedemptionsRedeemResponseBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClientRedemptionsRedeemResponseBody.parse_obj(obj)

        _obj = ClientRedemptionsRedeemResponseBody.parse_obj({
            "redemptions": [Redemption.from_dict(_item) for _item in obj.get("redemptions")] if obj.get("redemptions") is not None else None,
            "parent_redemption": Redemption.from_dict(obj.get("parent_redemption")) if obj.get("parent_redemption") is not None else None,
            "order": OrderCalculated.from_dict(obj.get("order")) if obj.get("order") is not None else None,
            "inapplicable_redeemables": [ValidationsRedeemableInapplicable.from_dict(_item) for _item in obj.get("inapplicable_redeemables")] if obj.get("inapplicable_redeemables") is not None else None,
            "skipped_redeemables": [ValidationsRedeemableSkipped.from_dict(_item) for _item in obj.get("skipped_redeemables")] if obj.get("skipped_redeemables") is not None else None
        })
        return _obj


