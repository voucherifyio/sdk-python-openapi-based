# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from voucherify_client.models.customer_summary_orders import CustomerSummaryOrders
from voucherify_client.models.customer_summary_redemptions import CustomerSummaryRedemptions

class CustomerSummary(BaseModel):
    """
    CustomerSummary
    """
    redemptions: CustomerSummaryRedemptions = Field(...)
    orders: CustomerSummaryOrders = Field(...)
    __properties = ["redemptions", "orders"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomerSummary:
        """Create an instance of CustomerSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of redemptions
        if self.redemptions:
            _dict['redemptions'] = self.redemptions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of orders
        if self.orders:
            _dict['orders'] = self.orders.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomerSummary:
        """Create an instance of CustomerSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomerSummary.parse_obj(obj)

        _obj = CustomerSummary.parse_obj({
            "redemptions": CustomerSummaryRedemptions.from_dict(obj.get("redemptions")) if obj.get("redemptions") is not None else None,
            "orders": CustomerSummaryOrders.from_dict(obj.get("orders")) if obj.get("orders") is not None else None
        })
        return _obj


