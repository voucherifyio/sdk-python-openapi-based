# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from voucherify_client.models.validity_hours_daily_item import ValidityHoursDailyItem

class ValidityHours(BaseModel):
    """
    Determines the hours of validity, e.g. to create a happy hours scenario.  # noqa: E501
    """
    daily: Optional[conlist(ValidityHoursDailyItem)] = Field(None, description="Defines the reccuring period(s) when the resource is active. The periods should not overlap.")
    __properties = ["daily"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ValidityHours:
        """Create an instance of ValidityHours from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in daily (list)
        _items = []
        if self.daily:
            for _item in self.daily:
                if _item:
                    _items.append(_item.to_dict())
            _dict['daily'] = _items
        # set to None if daily (nullable) is None
        # and __fields_set__ contains the field
        if self.daily is None and "daily" in self.__fields_set__:
            _dict['daily'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ValidityHours:
        """Create an instance of ValidityHours from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ValidityHours.parse_obj(obj)

        _obj = ValidityHours.parse_obj({
            "daily": [ValidityHoursDailyItem.from_dict(_item) for _item in obj.get("daily")] if obj.get("daily") is not None else None
        })
        return _obj


