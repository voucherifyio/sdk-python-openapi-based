# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from voucherify_client.models.loyalties_rewards_update_assignment_request_body_parameters_loyalty import LoyaltiesRewardsUpdateAssignmentRequestBodyParametersLoyalty

class LoyaltiesRewardsUpdateAssignmentRequestBodyParameters(BaseModel):
    """
    An object that defines the price of the reward in loyalty points.  # noqa: E501
    """
    loyalty: Optional[LoyaltiesRewardsUpdateAssignmentRequestBodyParametersLoyalty] = None
    __properties = ["loyalty"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LoyaltiesRewardsUpdateAssignmentRequestBodyParameters:
        """Create an instance of LoyaltiesRewardsUpdateAssignmentRequestBodyParameters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of loyalty
        if self.loyalty:
            _dict['loyalty'] = self.loyalty.to_dict()
        # set to None if loyalty (nullable) is None
        # and __fields_set__ contains the field
        if self.loyalty is None and "loyalty" in self.__fields_set__:
            _dict['loyalty'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LoyaltiesRewardsUpdateAssignmentRequestBodyParameters:
        """Create an instance of LoyaltiesRewardsUpdateAssignmentRequestBodyParameters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LoyaltiesRewardsUpdateAssignmentRequestBodyParameters.parse_obj(obj)

        _obj = LoyaltiesRewardsUpdateAssignmentRequestBodyParameters.parse_obj({
            "loyalty": LoyaltiesRewardsUpdateAssignmentRequestBodyParametersLoyalty.from_dict(obj.get("loyalty")) if obj.get("loyalty") is not None else None
        })
        return _obj


