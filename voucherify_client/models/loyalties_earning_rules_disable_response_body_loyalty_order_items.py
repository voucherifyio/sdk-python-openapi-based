# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from voucherify_client.models.loyalties_earning_rules_disable_response_body_loyalty_order_items_amount import LoyaltiesEarningRulesDisableResponseBodyLoyaltyOrderItemsAmount
from voucherify_client.models.loyalties_earning_rules_disable_response_body_loyalty_order_items_quantity import LoyaltiesEarningRulesDisableResponseBodyLoyaltyOrderItemsQuantity
from voucherify_client.models.loyalties_earning_rules_disable_response_body_loyalty_order_items_subtotal_amount import LoyaltiesEarningRulesDisableResponseBodyLoyaltyOrderItemsSubtotalAmount

class LoyaltiesEarningRulesDisableResponseBodyLoyaltyOrderItems(BaseModel):
    """
    LoyaltiesEarningRulesDisableResponseBodyLoyaltyOrderItems
    """
    quantity: Optional[LoyaltiesEarningRulesDisableResponseBodyLoyaltyOrderItemsQuantity] = None
    amount: Optional[LoyaltiesEarningRulesDisableResponseBodyLoyaltyOrderItemsAmount] = None
    subtotal_amount: Optional[LoyaltiesEarningRulesDisableResponseBodyLoyaltyOrderItemsSubtotalAmount] = None
    __properties = ["quantity", "amount", "subtotal_amount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LoyaltiesEarningRulesDisableResponseBodyLoyaltyOrderItems:
        """Create an instance of LoyaltiesEarningRulesDisableResponseBodyLoyaltyOrderItems from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of quantity
        if self.quantity:
            _dict['quantity'] = self.quantity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subtotal_amount
        if self.subtotal_amount:
            _dict['subtotal_amount'] = self.subtotal_amount.to_dict()
        # set to None if quantity (nullable) is None
        # and __fields_set__ contains the field
        if self.quantity is None and "quantity" in self.__fields_set__:
            _dict['quantity'] = None

        # set to None if amount (nullable) is None
        # and __fields_set__ contains the field
        if self.amount is None and "amount" in self.__fields_set__:
            _dict['amount'] = None

        # set to None if subtotal_amount (nullable) is None
        # and __fields_set__ contains the field
        if self.subtotal_amount is None and "subtotal_amount" in self.__fields_set__:
            _dict['subtotal_amount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LoyaltiesEarningRulesDisableResponseBodyLoyaltyOrderItems:
        """Create an instance of LoyaltiesEarningRulesDisableResponseBodyLoyaltyOrderItems from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LoyaltiesEarningRulesDisableResponseBodyLoyaltyOrderItems.parse_obj(obj)

        _obj = LoyaltiesEarningRulesDisableResponseBodyLoyaltyOrderItems.parse_obj({
            "quantity": LoyaltiesEarningRulesDisableResponseBodyLoyaltyOrderItemsQuantity.from_dict(obj.get("quantity")) if obj.get("quantity") is not None else None,
            "amount": LoyaltiesEarningRulesDisableResponseBodyLoyaltyOrderItemsAmount.from_dict(obj.get("amount")) if obj.get("amount") is not None else None,
            "subtotal_amount": LoyaltiesEarningRulesDisableResponseBodyLoyaltyOrderItemsSubtotalAmount.from_dict(obj.get("subtotal_amount")) if obj.get("subtotal_amount") is not None else None
        })
        return _obj


