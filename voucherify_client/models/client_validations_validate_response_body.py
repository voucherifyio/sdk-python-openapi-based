# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from voucherify_client.models.order_calculated import OrderCalculated
from voucherify_client.models.session import Session
from voucherify_client.models.stacking_rules import StackingRules
from voucherify_client.models.validations_redeemable_inapplicable import ValidationsRedeemableInapplicable
from voucherify_client.models.validations_validate_all_response_body_redeemables_item import ValidationsValidateAllResponseBodyRedeemablesItem

class ClientValidationsValidateResponseBody(BaseModel):
    """
    Response body schema for POST `/validations`.  # noqa: E501
    """
    valid: StrictBool = Field(..., description="The result of the validation. It takes all of the redeemables into account and returns a `false` if at least one redeemable is inapplicable. Returns `true` if all redeemables are applicable.")
    redeemables: conlist(ValidationsValidateAllResponseBodyRedeemablesItem) = Field(..., description="Lists validation results of each redeemable. If redeemables_application_mode=\"PARTIAL\" all redeemables here will be \"APPLICABLE\"")
    skipped_redeemables: Optional[conlist(ValidationsRedeemableInapplicable)] = Field(None, description="Lists validation results of each skipped redeemable.")
    inapplicable_redeemables: Optional[conlist(ValidationsRedeemableInapplicable)] = Field(None, description="Lists validation results of each inapplicable redeemable.")
    order: Optional[OrderCalculated] = None
    tracking_id: Optional[StrictStr] = Field(None, description="Hashed customer source ID.")
    session: Optional[Session] = None
    stacking_rules: Optional[StackingRules] = None
    __properties = ["valid", "redeemables", "skipped_redeemables", "inapplicable_redeemables", "order", "tracking_id", "session", "stacking_rules"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClientValidationsValidateResponseBody:
        """Create an instance of ClientValidationsValidateResponseBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in redeemables (list)
        _items = []
        if self.redeemables:
            for _item in self.redeemables:
                if _item:
                    _items.append(_item.to_dict())
            _dict['redeemables'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in skipped_redeemables (list)
        _items = []
        if self.skipped_redeemables:
            for _item in self.skipped_redeemables:
                if _item:
                    _items.append(_item.to_dict())
            _dict['skipped_redeemables'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inapplicable_redeemables (list)
        _items = []
        if self.inapplicable_redeemables:
            for _item in self.inapplicable_redeemables:
                if _item:
                    _items.append(_item.to_dict())
            _dict['inapplicable_redeemables'] = _items
        # override the default output from pydantic by calling `to_dict()` of order
        if self.order:
            _dict['order'] = self.order.to_dict()
        # override the default output from pydantic by calling `to_dict()` of session
        if self.session:
            _dict['session'] = self.session.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stacking_rules
        if self.stacking_rules:
            _dict['stacking_rules'] = self.stacking_rules.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClientValidationsValidateResponseBody:
        """Create an instance of ClientValidationsValidateResponseBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClientValidationsValidateResponseBody.parse_obj(obj)

        _obj = ClientValidationsValidateResponseBody.parse_obj({
            "valid": obj.get("valid"),
            "redeemables": [ValidationsValidateAllResponseBodyRedeemablesItem.from_dict(_item) for _item in obj.get("redeemables")] if obj.get("redeemables") is not None else None,
            "skipped_redeemables": [ValidationsRedeemableInapplicable.from_dict(_item) for _item in obj.get("skipped_redeemables")] if obj.get("skipped_redeemables") is not None else None,
            "inapplicable_redeemables": [ValidationsRedeemableInapplicable.from_dict(_item) for _item in obj.get("inapplicable_redeemables")] if obj.get("inapplicable_redeemables") is not None else None,
            "order": OrderCalculated.from_dict(obj.get("order")) if obj.get("order") is not None else None,
            "tracking_id": obj.get("tracking_id"),
            "session": Session.from_dict(obj.get("session")) if obj.get("session") is not None else None,
            "stacking_rules": StackingRules.from_dict(obj.get("stacking_rules")) if obj.get("stacking_rules") is not None else None
        })
        return _obj


