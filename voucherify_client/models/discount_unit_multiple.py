# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from voucherify_client.models.discount_unit_multiple_one_unit import DiscountUnitMultipleOneUnit

class DiscountUnitMultiple(BaseModel):
    """
    DiscountUnitMultiple
    """
    type: StrictStr = Field(..., description="Discount type.")
    effect: Optional[StrictStr] = Field('ADD_MANY_ITEMS', description="Defines how the discount is applied to the customer's order.")
    units: conlist(DiscountUnitMultipleOneUnit) = Field(...)
    __properties = ["type", "effect", "units"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('UNIT',):
            raise ValueError("must be one of enum values ('UNIT')")
        return value

    @validator('effect')
    def effect_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ADD_MANY_ITEMS',):
            raise ValueError("must be one of enum values ('ADD_MANY_ITEMS')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DiscountUnitMultiple:
        """Create an instance of DiscountUnitMultiple from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in units (list)
        _items = []
        if self.units:
            for _item in self.units:
                if _item:
                    _items.append(_item.to_dict())
            _dict['units'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DiscountUnitMultiple:
        """Create an instance of DiscountUnitMultiple from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DiscountUnitMultiple.parse_obj(obj)

        _obj = DiscountUnitMultiple.parse_obj({
            "type": obj.get("type") if obj.get("type") is not None else 'UNIT',
            "effect": obj.get("effect") if obj.get("effect") is not None else 'ADD_MANY_ITEMS',
            "units": [DiscountUnitMultipleOneUnit.from_dict(_item) for _item in obj.get("units")] if obj.get("units") is not None else None
        })
        return _obj


