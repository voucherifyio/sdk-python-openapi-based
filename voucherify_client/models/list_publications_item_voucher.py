# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator
from voucherify_client.models.discount import Discount
from voucherify_client.models.gift import Gift

class ListPublicationsItemVoucher(BaseModel):
    """
    ListPublicationsItemVoucher
    """
    code: Optional[StrictStr] = Field(None, description="Voucher code.")
    object: Optional[StrictStr] = Field('voucher', description="The type of the object represented by JSON.")
    campaign: Optional[StrictStr] = Field(None, description="Campaign name")
    gift: Optional[Gift] = None
    loyalty_card: Optional[Dict[str, Any]] = Field(None, description="Defines the loyalty card details.")
    discount: Optional[Discount] = None
    is_referral_code: Optional[StrictBool] = Field(None, description="Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`.")
    __properties = ["code", "object", "campaign", "gift", "loyalty_card", "discount", "is_referral_code"]

    @validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('voucher',):
            raise ValueError("must be one of enum values ('voucher')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ListPublicationsItemVoucher:
        """Create an instance of ListPublicationsItemVoucher from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of gift
        if self.gift:
            _dict['gift'] = self.gift.to_dict()
        # override the default output from pydantic by calling `to_dict()` of discount
        if self.discount:
            _dict['discount'] = self.discount.to_dict()
        # set to None if code (nullable) is None
        # and __fields_set__ contains the field
        if self.code is None and "code" in self.__fields_set__:
            _dict['code'] = None

        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        # set to None if campaign (nullable) is None
        # and __fields_set__ contains the field
        if self.campaign is None and "campaign" in self.__fields_set__:
            _dict['campaign'] = None

        # set to None if loyalty_card (nullable) is None
        # and __fields_set__ contains the field
        if self.loyalty_card is None and "loyalty_card" in self.__fields_set__:
            _dict['loyalty_card'] = None

        # set to None if is_referral_code (nullable) is None
        # and __fields_set__ contains the field
        if self.is_referral_code is None and "is_referral_code" in self.__fields_set__:
            _dict['is_referral_code'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListPublicationsItemVoucher:
        """Create an instance of ListPublicationsItemVoucher from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ListPublicationsItemVoucher.parse_obj(obj)

        _obj = ListPublicationsItemVoucher.parse_obj({
            "code": obj.get("code"),
            "object": obj.get("object") if obj.get("object") is not None else 'voucher',
            "campaign": obj.get("campaign"),
            "gift": Gift.from_dict(obj.get("gift")) if obj.get("gift") is not None else None,
            "loyalty_card": obj.get("loyalty_card"),
            "discount": Discount.from_dict(obj.get("discount")) if obj.get("discount") is not None else None,
            "is_referral_code": obj.get("is_referral_code")
        })
        return _obj


