# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from voucherify_client.models.voucher_transactions_export_result import VoucherTransactionsExportResult
from voucherify_client.models.voucher_transactions_filters import VoucherTransactionsFilters

class VoucherTransactionsExport(BaseModel):
    """
    This is an object representing an export.    Using this endpoint, you can export voucher transactions as a CSV file. This functionality works asynchronously and comes down to the following steps: create an export object and return its id so you can track its status, trigger a CSV file generation, change the status to SCHEDULED when the generation is over, store the file in S3 and change the status to DONE. Now you can download it.  With parameters you can select which fields will be exported. An export request will almost always result in a single file being generated by the system. However, when your volume of data is large, the system may split the results into multiple chunks.  # noqa: E501
    """
    id: StrictStr = Field(..., description="Unique export ID.")
    object: StrictStr = Field(..., description="The type of object being represented. This object stores information about the `export`.")
    created_at: datetime = Field(..., description="Timestamp representing the date and time when the export was scheduled in ISO 8601 format.")
    status: StrictStr = Field(..., description="Status of the export. Informs you whether the export has already been completed, i.e. indicates whether the file containing the exported data has been generated.")
    channel: StrictStr = Field(..., description="The channel through which the export was triggered.")
    exported_object: StrictStr = Field(..., description="The type of exported object.")
    parameters: VoucherTransactionsFilters = Field(...)
    result: Optional[VoucherTransactionsExportResult] = None
    user_id: Optional[StrictStr] = Field(None, description="Identifies the specific user who initiated the export through the Voucherify Dashboard; returned when the `channel` value is `WEBSITE`.")
    __properties = ["id", "object", "created_at", "status", "channel", "exported_object", "parameters", "result", "user_id"]

    @validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('export',):
            raise ValueError("must be one of enum values ('export')")
        return value

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('SCHEDULED',):
            raise ValueError("must be one of enum values ('SCHEDULED')")
        return value

    @validator('exported_object')
    def exported_object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('voucher_transactions',):
            raise ValueError("must be one of enum values ('voucher_transactions')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VoucherTransactionsExport:
        """Create an instance of VoucherTransactionsExport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of result
        if self.result:
            _dict['result'] = self.result.to_dict()
        # set to None if result (nullable) is None
        # and __fields_set__ contains the field
        if self.result is None and "result" in self.__fields_set__:
            _dict['result'] = None

        # set to None if user_id (nullable) is None
        # and __fields_set__ contains the field
        if self.user_id is None and "user_id" in self.__fields_set__:
            _dict['user_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VoucherTransactionsExport:
        """Create an instance of VoucherTransactionsExport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VoucherTransactionsExport.parse_obj(obj)

        _obj = VoucherTransactionsExport.parse_obj({
            "id": obj.get("id"),
            "object": obj.get("object") if obj.get("object") is not None else 'export',
            "created_at": obj.get("created_at"),
            "status": obj.get("status") if obj.get("status") is not None else 'SCHEDULED',
            "channel": obj.get("channel") if obj.get("channel") is not None else 'API',
            "exported_object": obj.get("exported_object") if obj.get("exported_object") is not None else 'voucher_transactions',
            "parameters": VoucherTransactionsFilters.from_dict(obj.get("parameters")) if obj.get("parameters") is not None else None,
            "result": VoucherTransactionsExportResult.from_dict(obj.get("result")) if obj.get("result") is not None else None,
            "user_id": obj.get("user_id")
        })
        return _obj


