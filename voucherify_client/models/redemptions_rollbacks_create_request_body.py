# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from voucherify_client.models.customer import Customer
from voucherify_client.models.order import Order

class RedemptionsRollbacksCreateRequestBody(BaseModel):
    """
    Request body schema for **POST** `v1/redemptions/{parentRedemptionId}/rollbacks`.  # noqa: E501
    """
    reason: Optional[StrictStr] = Field(None, description="Reason for the rollback.")
    tracking_id: Optional[StrictStr] = Field(None, description="Customer's `source_id`.")
    customer: Optional[Customer] = None
    order: Optional[Order] = None
    metadata: Optional[Dict[str, Any]] = Field(None, description="A set of key/value pairs that you can send in the request body to update **redemption** metadata.")
    __properties = ["reason", "tracking_id", "customer", "order", "metadata"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RedemptionsRollbacksCreateRequestBody:
        """Create an instance of RedemptionsRollbacksCreateRequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order
        if self.order:
            _dict['order'] = self.order.to_dict()
        # set to None if reason (nullable) is None
        # and __fields_set__ contains the field
        if self.reason is None and "reason" in self.__fields_set__:
            _dict['reason'] = None

        # set to None if tracking_id (nullable) is None
        # and __fields_set__ contains the field
        if self.tracking_id is None and "tracking_id" in self.__fields_set__:
            _dict['tracking_id'] = None

        # set to None if metadata (nullable) is None
        # and __fields_set__ contains the field
        if self.metadata is None and "metadata" in self.__fields_set__:
            _dict['metadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RedemptionsRollbacksCreateRequestBody:
        """Create an instance of RedemptionsRollbacksCreateRequestBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RedemptionsRollbacksCreateRequestBody.parse_obj(obj)

        _obj = RedemptionsRollbacksCreateRequestBody.parse_obj({
            "reason": obj.get("reason"),
            "tracking_id": obj.get("tracking_id"),
            "customer": Customer.from_dict(obj.get("customer")) if obj.get("customer") is not None else None,
            "order": Order.from_dict(obj.get("order")) if obj.get("order") is not None else None,
            "metadata": obj.get("metadata")
        })
        return _obj


