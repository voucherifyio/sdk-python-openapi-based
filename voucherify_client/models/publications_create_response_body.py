# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from voucherify_client.models.customer_with_summary_loyalty_referrals import CustomerWithSummaryLoyaltyReferrals
from voucherify_client.models.voucher import Voucher

class PublicationsCreateResponseBody(BaseModel):
    """
    PublicationsCreateResponseBody
    """
    id: Optional[StrictStr] = Field(None, description="Unique publication ID, assigned by Voucherify.")
    object: Optional[StrictStr] = Field('publication', description="The type of the object represented by the JSON. This object stores information about the `publication`.")
    created_at: Optional[datetime] = Field(None, description="Timestamp representing the date and time when the publication was created. The value is shown in the ISO 8601 format.")
    customer_id: Optional[StrictStr] = Field(None, description="Unique customer ID of the customer receiving the publication.")
    tracking_id: Optional[StrictStr] = Field(None, description="Customer's `source_id`.")
    metadata: Optional[Dict[str, Any]] = None
    channel: Optional[StrictStr] = Field('API', description="How the publication was originated. It can be your own custom channel or an example value provided here.")
    source_id: Optional[StrictStr] = Field(None, description="The merchant's publication ID if it is different from the Voucherify publication ID. It's an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service. ")
    result: Optional[StrictStr] = Field('SUCCESS', description="Status of the publication attempt.")
    customer: Optional[CustomerWithSummaryLoyaltyReferrals] = None
    vouchers_id: Optional[conlist(StrictStr)] = Field(None, description="Contains the unique internal voucher ID that was assigned by Voucherify.")
    voucher: Optional[Voucher] = None
    vouchers: Optional[conlist(StrictStr)] = Field(None, description="Contains the unique voucher codes that was assigned by Voucherify.")
    __properties = ["id", "object", "created_at", "customer_id", "tracking_id", "metadata", "channel", "source_id", "result", "customer", "vouchers_id", "voucher", "vouchers"]

    @validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('publication',):
            raise ValueError("must be one of enum values ('publication')")
        return value

    @validator('channel')
    def channel_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('API',):
            raise ValueError("must be one of enum values ('API')")
        return value

    @validator('result')
    def result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('SUCCESS',):
            raise ValueError("must be one of enum values ('SUCCESS')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PublicationsCreateResponseBody:
        """Create an instance of PublicationsCreateResponseBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of voucher
        if self.voucher:
            _dict['voucher'] = self.voucher.to_dict()
        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict['id'] = None

        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict['created_at'] = None

        # set to None if customer_id (nullable) is None
        # and __fields_set__ contains the field
        if self.customer_id is None and "customer_id" in self.__fields_set__:
            _dict['customer_id'] = None

        # set to None if tracking_id (nullable) is None
        # and __fields_set__ contains the field
        if self.tracking_id is None and "tracking_id" in self.__fields_set__:
            _dict['tracking_id'] = None

        # set to None if metadata (nullable) is None
        # and __fields_set__ contains the field
        if self.metadata is None and "metadata" in self.__fields_set__:
            _dict['metadata'] = None

        # set to None if channel (nullable) is None
        # and __fields_set__ contains the field
        if self.channel is None and "channel" in self.__fields_set__:
            _dict['channel'] = None

        # set to None if source_id (nullable) is None
        # and __fields_set__ contains the field
        if self.source_id is None and "source_id" in self.__fields_set__:
            _dict['source_id'] = None

        # set to None if result (nullable) is None
        # and __fields_set__ contains the field
        if self.result is None and "result" in self.__fields_set__:
            _dict['result'] = None

        # set to None if vouchers_id (nullable) is None
        # and __fields_set__ contains the field
        if self.vouchers_id is None and "vouchers_id" in self.__fields_set__:
            _dict['vouchers_id'] = None

        # set to None if vouchers (nullable) is None
        # and __fields_set__ contains the field
        if self.vouchers is None and "vouchers" in self.__fields_set__:
            _dict['vouchers'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PublicationsCreateResponseBody:
        """Create an instance of PublicationsCreateResponseBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PublicationsCreateResponseBody.parse_obj(obj)

        _obj = PublicationsCreateResponseBody.parse_obj({
            "id": obj.get("id"),
            "object": obj.get("object") if obj.get("object") is not None else 'publication',
            "created_at": obj.get("created_at"),
            "customer_id": obj.get("customer_id"),
            "tracking_id": obj.get("tracking_id"),
            "metadata": obj.get("metadata"),
            "channel": obj.get("channel") if obj.get("channel") is not None else 'API',
            "source_id": obj.get("source_id"),
            "result": obj.get("result") if obj.get("result") is not None else 'SUCCESS',
            "customer": CustomerWithSummaryLoyaltyReferrals.from_dict(obj.get("customer")) if obj.get("customer") is not None else None,
            "vouchers_id": obj.get("vouchers_id"),
            "voucher": Voucher.from_dict(obj.get("voucher")) if obj.get("voucher") is not None else None,
            "vouchers": obj.get("vouchers")
        })
        return _obj


