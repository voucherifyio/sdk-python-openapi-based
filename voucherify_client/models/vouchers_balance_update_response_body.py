# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator
from voucherify_client.models.vouchers_balance_update_response_body_related_object import VouchersBalanceUpdateResponseBodyRelatedObject

class VouchersBalanceUpdateResponseBody(BaseModel):
    """
    Response body schema for `vouchers/{code}/balance.`  # noqa: E501
    """
    amount: Optional[StrictInt] = Field(None, description="The incremental amount added (positive integer) or subtracted (negative integer) to the current balance on the gift card or loyalty card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000.")
    total: Optional[StrictInt] = Field(None, description="Total income incurred over the lifespan of the gift card or loyalty card.")
    balance: Optional[StrictInt] = Field(None, description="The balance after adding or subtracting a specified amount. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000.")
    type: Optional[StrictStr] = Field(None, description="The type of voucher being modified.")
    operation_type: Optional[StrictStr] = 'MANUAL'
    object: Optional[StrictStr] = Field('balance', description="The type of the object represented by JSON. Default is `balance`.")
    related_object: Optional[VouchersBalanceUpdateResponseBodyRelatedObject] = None
    __properties = ["amount", "total", "balance", "type", "operation_type", "object", "related_object"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('gift_voucher', 'loyalty_card',):
            raise ValueError("must be one of enum values ('gift_voucher', 'loyalty_card')")
        return value

    @validator('operation_type')
    def operation_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('MANUAL',):
            raise ValueError("must be one of enum values ('MANUAL')")
        return value

    @validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('balance',):
            raise ValueError("must be one of enum values ('balance')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VouchersBalanceUpdateResponseBody:
        """Create an instance of VouchersBalanceUpdateResponseBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of related_object
        if self.related_object:
            _dict['related_object'] = self.related_object.to_dict()
        # set to None if amount (nullable) is None
        # and __fields_set__ contains the field
        if self.amount is None and "amount" in self.__fields_set__:
            _dict['amount'] = None

        # set to None if total (nullable) is None
        # and __fields_set__ contains the field
        if self.total is None and "total" in self.__fields_set__:
            _dict['total'] = None

        # set to None if balance (nullable) is None
        # and __fields_set__ contains the field
        if self.balance is None and "balance" in self.__fields_set__:
            _dict['balance'] = None

        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict['type'] = None

        # set to None if operation_type (nullable) is None
        # and __fields_set__ contains the field
        if self.operation_type is None and "operation_type" in self.__fields_set__:
            _dict['operation_type'] = None

        # set to None if object (nullable) is None
        # and __fields_set__ contains the field
        if self.object is None and "object" in self.__fields_set__:
            _dict['object'] = None

        # set to None if related_object (nullable) is None
        # and __fields_set__ contains the field
        if self.related_object is None and "related_object" in self.__fields_set__:
            _dict['related_object'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VouchersBalanceUpdateResponseBody:
        """Create an instance of VouchersBalanceUpdateResponseBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VouchersBalanceUpdateResponseBody.parse_obj(obj)

        _obj = VouchersBalanceUpdateResponseBody.parse_obj({
            "amount": obj.get("amount"),
            "total": obj.get("total"),
            "balance": obj.get("balance"),
            "type": obj.get("type"),
            "operation_type": obj.get("operation_type") if obj.get("operation_type") is not None else 'MANUAL',
            "object": obj.get("object") if obj.get("object") is not None else 'balance',
            "related_object": VouchersBalanceUpdateResponseBodyRelatedObject.from_dict(obj.get("related_object")) if obj.get("related_object") is not None else None
        })
        return _obj


