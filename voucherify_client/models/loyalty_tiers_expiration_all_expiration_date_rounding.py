# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator

class LoyaltyTiersExpirationAllExpirationDateRounding(BaseModel):
    """
    Defines the rounding mechanism for tier expiration.  # noqa: E501
    """
    type: Optional[StrictStr] = Field(None, description="This mechanism describes a custom rounding for the expiration date.")
    strategy: Optional[StrictStr] = Field(None, description="This mechanism describes a rounding strategy for the expiration date.")
    unit: Optional[StrictStr] = Field('MONTH', description="Defines the type of unit of time in which the rounding period is counted.")
    value: Optional[StrictInt] = Field(None, description="Value for the unit of time that the rounding applies to. Units for this parameter are defined by the `rounding.unit` parameter.     - `0`: January - `1`: February - `2`: March - `3`: April - `4`: May - `5`: June - `6`: July - `7`: August - `8`: September - `9`: October - `10`: November - `11`: December")
    __properties = ["type", "strategy", "unit", "value"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('MONTH', 'QUARTER', 'HALF_YEAR', 'YEAR', 'CUSTOM',):
            raise ValueError("must be one of enum values ('MONTH', 'QUARTER', 'HALF_YEAR', 'YEAR', 'CUSTOM')")
        return value

    @validator('strategy')
    def strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('START', 'END',):
            raise ValueError("must be one of enum values ('START', 'END')")
        return value

    @validator('unit')
    def unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('MONTH',):
            raise ValueError("must be one of enum values ('MONTH')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LoyaltyTiersExpirationAllExpirationDateRounding:
        """Create an instance of LoyaltyTiersExpirationAllExpirationDateRounding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LoyaltyTiersExpirationAllExpirationDateRounding:
        """Create an instance of LoyaltyTiersExpirationAllExpirationDateRounding from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LoyaltyTiersExpirationAllExpirationDateRounding.parse_obj(obj)

        _obj = LoyaltyTiersExpirationAllExpirationDateRounding.parse_obj({
            "type": obj.get("type"),
            "strategy": obj.get("strategy"),
            "unit": obj.get("unit") if obj.get("unit") is not None else 'MONTH',
            "value": obj.get("value")
        })
        return _obj


