# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr, constr, validator

class VoucherTransactionDetailsBalanceRelatedObject(BaseModel):
    """
    Defines the resource that is being modified with the values that are returned in the balance object.  # noqa: E501
    """
    id: StrictStr = Field(..., description="Identifies the voucher that is being modified, this is the ID that was assigned by the Voucherify API.")
    type: constr(strict=True) = Field(..., description="The object being modified, i.e. voucher.")
    __properties = ["id", "type"]

    @validator('type')
    def type_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"voucher", value):
            raise ValueError(r"must validate the regular expression /voucher/")
        return value

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('voucher',):
            raise ValueError("must be one of enum values ('voucher')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VoucherTransactionDetailsBalanceRelatedObject:
        """Create an instance of VoucherTransactionDetailsBalanceRelatedObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VoucherTransactionDetailsBalanceRelatedObject:
        """Create an instance of VoucherTransactionDetailsBalanceRelatedObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VoucherTransactionDetailsBalanceRelatedObject.parse_obj(obj)

        _obj = VoucherTransactionDetailsBalanceRelatedObject.parse_obj({
            "id": obj.get("id"),
            "type": obj.get("type") if obj.get("type") is not None else 'voucher'
        })
        return _obj


