# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictInt, StrictStr, conint

from typing import Any, Dict, Optional

from voucherify_client.models.client_events_create_request_body import ClientEventsCreateRequestBody
from voucherify_client.models.client_events_create_response_body import ClientEventsCreateResponseBody
from voucherify_client.models.client_promotions_tiers_list_response_body import ClientPromotionsTiersListResponseBody
from voucherify_client.models.client_qualifications_check_eligibility_request_body import ClientQualificationsCheckEligibilityRequestBody
from voucherify_client.models.client_qualifications_check_eligibility_response_body import ClientQualificationsCheckEligibilityResponseBody
from voucherify_client.models.client_redemptions_redeem_request_body import ClientRedemptionsRedeemRequestBody
from voucherify_client.models.client_redemptions_redeem_response_body import ClientRedemptionsRedeemResponseBody
from voucherify_client.models.client_validations_validate_request_body import ClientValidationsValidateRequestBody
from voucherify_client.models.client_validations_validate_response_body import ClientValidationsValidateResponseBody
from voucherify_client.models.parameter_order_list_promotion_tiers_client_side import ParameterOrderListPromotionTiersClientSide

from voucherify_client.api_client import ApiClient
from voucherify_client.api_response import ApiResponse
from voucherify_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ClientSideApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def check_eligibility_client_side(self, client_qualifications_check_eligibility_request_body : Annotated[Optional[ClientQualificationsCheckEligibilityRequestBody], Field(description="Define order and customer context.")] = None, **kwargs) -> ClientQualificationsCheckEligibilityResponseBody:  # noqa: E501
        """Check Eligibility (client-side)  # noqa: E501

        Generate a list of redeemables that are applicable in the context of the customer and order. The new qualifications method is an improved version of Campaign Qualifications, Voucher Qualifications, and Promotions Validation API requests. The new qualification method introduces the following improvements: - Qualification results are returned faster - No limit on the number of returned redeemables - Introduces new qualification scenarios, not available in the previous version  👍 Scenario Guide  Read our dedicated guide to learn about some use cases this endpoint can cover here. # Paging  The Voucherify Qualifications API request will return to you all of the redeemables available for the customer in batches of up to 50 redeemables. To get the next batch of redeemables, you need to use the starting_after cursor. To process of paging the redeemables works in the following manner: - You send the first API request for Qualifications without the starting_after parameter. - The response will contain a parameter named has_more. If the parameters value is set to true, then more redeemables are available. - Get the value of the created_at parameter of the last returned redeemable. The value of this parameter will be used as a cursor to retrieve the next page of redeemables. - Send another API request for Qualification with the starting_after parameter set to the value taken from the created_at parameter from the last returned redeemable. - Voucherify will return the next page of redeemables. - If the has_more parameter is set to true, apply steps 3-5 to get the next page of redeemables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.check_eligibility_client_side(client_qualifications_check_eligibility_request_body, async_req=True)
        >>> result = thread.get()

        :param client_qualifications_check_eligibility_request_body: Define order and customer context.
        :type client_qualifications_check_eligibility_request_body: ClientQualificationsCheckEligibilityRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ClientQualificationsCheckEligibilityResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the check_eligibility_client_side_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.check_eligibility_client_side_with_http_info(client_qualifications_check_eligibility_request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def check_eligibility_client_side_with_http_info(self, client_qualifications_check_eligibility_request_body : Annotated[Optional[ClientQualificationsCheckEligibilityRequestBody], Field(description="Define order and customer context.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Check Eligibility (client-side)  # noqa: E501

        Generate a list of redeemables that are applicable in the context of the customer and order. The new qualifications method is an improved version of Campaign Qualifications, Voucher Qualifications, and Promotions Validation API requests. The new qualification method introduces the following improvements: - Qualification results are returned faster - No limit on the number of returned redeemables - Introduces new qualification scenarios, not available in the previous version  👍 Scenario Guide  Read our dedicated guide to learn about some use cases this endpoint can cover here. # Paging  The Voucherify Qualifications API request will return to you all of the redeemables available for the customer in batches of up to 50 redeemables. To get the next batch of redeemables, you need to use the starting_after cursor. To process of paging the redeemables works in the following manner: - You send the first API request for Qualifications without the starting_after parameter. - The response will contain a parameter named has_more. If the parameters value is set to true, then more redeemables are available. - Get the value of the created_at parameter of the last returned redeemable. The value of this parameter will be used as a cursor to retrieve the next page of redeemables. - Send another API request for Qualification with the starting_after parameter set to the value taken from the created_at parameter from the last returned redeemable. - Voucherify will return the next page of redeemables. - If the has_more parameter is set to true, apply steps 3-5 to get the next page of redeemables.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.check_eligibility_client_side_with_http_info(client_qualifications_check_eligibility_request_body, async_req=True)
        >>> result = thread.get()

        :param client_qualifications_check_eligibility_request_body: Define order and customer context.
        :type client_qualifications_check_eligibility_request_body: ClientQualificationsCheckEligibilityRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ClientQualificationsCheckEligibilityResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_qualifications_check_eligibility_request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_eligibility_client_side" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['client_qualifications_check_eligibility_request_body'] is not None:
            _body_params = _params['client_qualifications_check_eligibility_request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['X-Client-Application-Id', 'X-Client-Token']  # noqa: E501

        _response_types_map = {
            '200': "ClientQualificationsCheckEligibilityResponseBody",
        }

        return self.api_client.call_api(
            '/client/v1/qualifications', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_promotion_tiers_client_side(self, origin : Annotated[StrictStr, Field(..., description="Indicates the origin (scheme, hostname, and port).")], is_available : Annotated[Optional[StrictBool], Field(description="This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions.")] = None, limit : Annotated[Optional[conint(strict=True, le=100, ge=1)], Field(description="Limits the number of objects to be returned. The limit can range between 1 and 100 items.")] = None, page : Annotated[Optional[StrictInt], Field(description="Which page of results to return. The lowest value is 1.")] = None, order : Annotated[Optional[ParameterOrderListPromotionTiersClientSide], Field(description="Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order.")] = None, **kwargs) -> ClientPromotionsTiersListResponseBody:  # noqa: E501
        """List Promotion Tiers (client-side)  # noqa: E501

        This method enables you to list promotion tiers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_promotion_tiers_client_side(origin, is_available, limit, page, order, async_req=True)
        >>> result = thread.get()

        :param origin: Indicates the origin (scheme, hostname, and port). (required)
        :type origin: str
        :param is_available: This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions.
        :type is_available: bool
        :param limit: Limits the number of objects to be returned. The limit can range between 1 and 100 items.
        :type limit: int
        :param page: Which page of results to return. The lowest value is 1.
        :type page: int
        :param order: Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order.
        :type order: ParameterOrderListPromotionTiersClientSide
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ClientPromotionsTiersListResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_promotion_tiers_client_side_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_promotion_tiers_client_side_with_http_info(origin, is_available, limit, page, order, **kwargs)  # noqa: E501

    @validate_arguments
    def list_promotion_tiers_client_side_with_http_info(self, origin : Annotated[StrictStr, Field(..., description="Indicates the origin (scheme, hostname, and port).")], is_available : Annotated[Optional[StrictBool], Field(description="This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions.")] = None, limit : Annotated[Optional[conint(strict=True, le=100, ge=1)], Field(description="Limits the number of objects to be returned. The limit can range between 1 and 100 items.")] = None, page : Annotated[Optional[StrictInt], Field(description="Which page of results to return. The lowest value is 1.")] = None, order : Annotated[Optional[ParameterOrderListPromotionTiersClientSide], Field(description="Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List Promotion Tiers (client-side)  # noqa: E501

        This method enables you to list promotion tiers.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_promotion_tiers_client_side_with_http_info(origin, is_available, limit, page, order, async_req=True)
        >>> result = thread.get()

        :param origin: Indicates the origin (scheme, hostname, and port). (required)
        :type origin: str
        :param is_available: This parameter allows filtering promotions that are only available at the moment. When set to true, it selects only non-expired and active promotions.
        :type is_available: bool
        :param limit: Limits the number of objects to be returned. The limit can range between 1 and 100 items.
        :type limit: int
        :param page: Which page of results to return. The lowest value is 1.
        :type page: int
        :param order: Sorts the results using one of the filtering options, where the dash - preceding a sorting option means sorting in a descending order.
        :type order: ParameterOrderListPromotionTiersClientSide
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ClientPromotionsTiersListResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'origin',
            'is_available',
            'limit',
            'page',
            'order'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_promotion_tiers_client_side" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('is_available') is not None:  # noqa: E501
            _query_params.append(('is_available', _params['is_available']))

        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('order') is not None:  # noqa: E501
            _query_params.append(('order', _params['order'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['origin']:
            _header_params['origin'] = _params['origin']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['X-Client-Application-Id', 'X-Client-Token']  # noqa: E501

        _response_types_map = {
            '200': "ClientPromotionsTiersListResponseBody",
        }

        return self.api_client.call_api(
            '/client/v1/promotions/tiers', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def redeem_stacked_discounts_client_side(self, origin : Annotated[StrictStr, Field(..., description="Indicates the origin (scheme, hostname, and port).")], client_redemptions_redeem_request_body : Optional[ClientRedemptionsRedeemRequestBody] = None, **kwargs) -> ClientRedemptionsRedeemResponseBody:  # noqa: E501
        """Redeem Stackable Discounts (client-side)  # noqa: E501

        This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications. # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    📘 Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.redeem_stacked_discounts_client_side(origin, client_redemptions_redeem_request_body, async_req=True)
        >>> result = thread.get()

        :param origin: Indicates the origin (scheme, hostname, and port). (required)
        :type origin: str
        :param client_redemptions_redeem_request_body:
        :type client_redemptions_redeem_request_body: ClientRedemptionsRedeemRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ClientRedemptionsRedeemResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the redeem_stacked_discounts_client_side_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.redeem_stacked_discounts_client_side_with_http_info(origin, client_redemptions_redeem_request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def redeem_stacked_discounts_client_side_with_http_info(self, origin : Annotated[StrictStr, Field(..., description="Indicates the origin (scheme, hostname, and port).")], client_redemptions_redeem_request_body : Optional[ClientRedemptionsRedeemRequestBody] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Redeem Stackable Discounts (client-side)  # noqa: E501

        This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications. # How API returns calculated discounts and order amounts in the response In the table below, you can see the logic the API follows to calculate discounts and amounts:    📘 Rollbacks  You cant roll back a child redemption. When you call rollback on a stacked redemption, all child redemptions will be rolled back. You need to refer to a parent redemption ID in your rollback request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.redeem_stacked_discounts_client_side_with_http_info(origin, client_redemptions_redeem_request_body, async_req=True)
        >>> result = thread.get()

        :param origin: Indicates the origin (scheme, hostname, and port). (required)
        :type origin: str
        :param client_redemptions_redeem_request_body:
        :type client_redemptions_redeem_request_body: ClientRedemptionsRedeemRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ClientRedemptionsRedeemResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'origin',
            'client_redemptions_redeem_request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method redeem_stacked_discounts_client_side" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['origin']:
            _header_params['origin'] = _params['origin']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['client_redemptions_redeem_request_body'] is not None:
            _body_params = _params['client_redemptions_redeem_request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['X-Client-Application-Id', 'X-Client-Token']  # noqa: E501

        _response_types_map = {
            '200': "ClientRedemptionsRedeemResponseBody",
        }

        return self.api_client.call_api(
            '/client/v1/redemptions', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def track_custom_event_client_side(self, origin : Annotated[StrictStr, Field(..., description="Indicates the origin (scheme, hostname, and port).")], client_events_create_request_body : Annotated[Optional[ClientEventsCreateRequestBody], Field(description="Specify the details of the custom event.")] = None, **kwargs) -> ClientEventsCreateResponseBody:  # noqa: E501
        """Track Custom Event (client-side)  # noqa: E501

        To track a custom event, you create an event object.   The event object must be linked to the customer who performs the action. If a customer doesnt exist in Voucherify, the customer will be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.track_custom_event_client_side(origin, client_events_create_request_body, async_req=True)
        >>> result = thread.get()

        :param origin: Indicates the origin (scheme, hostname, and port). (required)
        :type origin: str
        :param client_events_create_request_body: Specify the details of the custom event.
        :type client_events_create_request_body: ClientEventsCreateRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ClientEventsCreateResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the track_custom_event_client_side_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.track_custom_event_client_side_with_http_info(origin, client_events_create_request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def track_custom_event_client_side_with_http_info(self, origin : Annotated[StrictStr, Field(..., description="Indicates the origin (scheme, hostname, and port).")], client_events_create_request_body : Annotated[Optional[ClientEventsCreateRequestBody], Field(description="Specify the details of the custom event.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Track Custom Event (client-side)  # noqa: E501

        To track a custom event, you create an event object.   The event object must be linked to the customer who performs the action. If a customer doesnt exist in Voucherify, the customer will be created.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.track_custom_event_client_side_with_http_info(origin, client_events_create_request_body, async_req=True)
        >>> result = thread.get()

        :param origin: Indicates the origin (scheme, hostname, and port). (required)
        :type origin: str
        :param client_events_create_request_body: Specify the details of the custom event.
        :type client_events_create_request_body: ClientEventsCreateRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ClientEventsCreateResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'origin',
            'client_events_create_request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method track_custom_event_client_side" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['origin']:
            _header_params['origin'] = _params['origin']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['client_events_create_request_body'] is not None:
            _body_params = _params['client_events_create_request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['X-Client-Application-Id', 'X-Client-Token']  # noqa: E501

        _response_types_map = {
            '200': "ClientEventsCreateResponseBody",
        }

        return self.api_client.call_api(
            '/client/v1/events', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_customers_consents_client_side(self, customer_id : Annotated[StrictStr, Field(..., description="A Voucherify customer identifier or source_id")], body : Annotated[Optional[Dict[str, Any]], Field(description="Key-value pairs where the key is the consent identifier and value is a boolean that identifies if a customer has given the consent or not. To deny all consents use unsubscribed as a consent identifier and true as its value.   ## Examples  Opt-out from all communication: ")] = None, **kwargs) -> None:  # noqa: E501
        """(Deprecated) Update Customer's consents (client-side) [Deprecated]  # noqa: E501

        Update marketing permissions for the specified customer. ❗️ Deprecated  This endpoint is deprecated. The feature of managing consents will be soon removed from Voucherify, including this endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_customers_consents_client_side(customer_id, body, async_req=True)
        >>> result = thread.get()

        :param customer_id: A Voucherify customer identifier or source_id (required)
        :type customer_id: str
        :param body: Key-value pairs where the key is the consent identifier and value is a boolean that identifies if a customer has given the consent or not. To deny all consents use unsubscribed as a consent identifier and true as its value.   ## Examples  Opt-out from all communication: 
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_customers_consents_client_side_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_customers_consents_client_side_with_http_info(customer_id, body, **kwargs)  # noqa: E501

    @validate_arguments
    def update_customers_consents_client_side_with_http_info(self, customer_id : Annotated[StrictStr, Field(..., description="A Voucherify customer identifier or source_id")], body : Annotated[Optional[Dict[str, Any]], Field(description="Key-value pairs where the key is the consent identifier and value is a boolean that identifies if a customer has given the consent or not. To deny all consents use unsubscribed as a consent identifier and true as its value.   ## Examples  Opt-out from all communication: ")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) Update Customer's consents (client-side) [Deprecated]  # noqa: E501

        Update marketing permissions for the specified customer. ❗️ Deprecated  This endpoint is deprecated. The feature of managing consents will be soon removed from Voucherify, including this endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_customers_consents_client_side_with_http_info(customer_id, body, async_req=True)
        >>> result = thread.get()

        :param customer_id: A Voucherify customer identifier or source_id (required)
        :type customer_id: str
        :param body: Key-value pairs where the key is the consent identifier and value is a boolean that identifies if a customer has given the consent or not. To deny all consents use unsubscribed as a consent identifier and true as its value.   ## Examples  Opt-out from all communication: 
        :type body: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        warnings.warn("PUT /client/v1/customers/{customerId}/consents is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'customer_id',
            'body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_customers_consents_client_side" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['customer_id']:
            _path_params['customerId'] = _params['customer_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['body'] is not None:
            _body_params = _params['body']

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['X-Client-Application-Id', 'X-Client-Token']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/client/v1/customers/{customerId}/consents', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def validate_stacked_discounts_client_side(self, origin : Annotated[StrictStr, Field(..., description="Indicates the origin (scheme, hostname, and port).")], client_validations_validate_request_body : Optional[ClientValidationsValidateRequestBody] = None, **kwargs) -> ClientValidationsValidateResponseBody:  # noqa: E501
        """Validate Stackable Discounts (client-side)  # noqa: E501

        Verify redeemables provided in the request. This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validate_stacked_discounts_client_side(origin, client_validations_validate_request_body, async_req=True)
        >>> result = thread.get()

        :param origin: Indicates the origin (scheme, hostname, and port). (required)
        :type origin: str
        :param client_validations_validate_request_body:
        :type client_validations_validate_request_body: ClientValidationsValidateRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ClientValidationsValidateResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the validate_stacked_discounts_client_side_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.validate_stacked_discounts_client_side_with_http_info(origin, client_validations_validate_request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def validate_stacked_discounts_client_side_with_http_info(self, origin : Annotated[StrictStr, Field(..., description="Indicates the origin (scheme, hostname, and port).")], client_validations_validate_request_body : Optional[ClientValidationsValidateRequestBody] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Validate Stackable Discounts (client-side)  # noqa: E501

        Verify redeemables provided in the request. This method is accessible through public keys which you can use in client side requests coming from mobile and web browser applications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.validate_stacked_discounts_client_side_with_http_info(origin, client_validations_validate_request_body, async_req=True)
        >>> result = thread.get()

        :param origin: Indicates the origin (scheme, hostname, and port). (required)
        :type origin: str
        :param client_validations_validate_request_body:
        :type client_validations_validate_request_body: ClientValidationsValidateRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ClientValidationsValidateResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'origin',
            'client_validations_validate_request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_stacked_discounts_client_side" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        if _params['origin']:
            _header_params['origin'] = _params['origin']

        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['client_validations_validate_request_body'] is not None:
            _body_params = _params['client_validations_validate_request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['X-Client-Application-Id', 'X-Client-Token']  # noqa: E501

        _response_types_map = {
            '200': "ClientValidationsValidateResponseBody",
        }

        return self.api_client.call_api(
            '/client/v1/validations', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
