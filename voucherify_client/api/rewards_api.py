# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictStr, conint

from typing import Optional

from voucherify_client.models.rewards_assignments_create_request_body import RewardsAssignmentsCreateRequestBody
from voucherify_client.models.rewards_assignments_create_response_body import RewardsAssignmentsCreateResponseBody
from voucherify_client.models.rewards_assignments_get_response_body import RewardsAssignmentsGetResponseBody
from voucherify_client.models.rewards_assignments_list_response_body import RewardsAssignmentsListResponseBody
from voucherify_client.models.rewards_assignments_update_request_body import RewardsAssignmentsUpdateRequestBody
from voucherify_client.models.rewards_assignments_update_response_body import RewardsAssignmentsUpdateResponseBody

from voucherify_client.api_client import ApiClient
from voucherify_client.api_response import ApiResponse
from voucherify_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class RewardsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_reward_assignment(self, reward_id : Annotated[StrictStr, Field(..., description="A unique reward ID.")], rewards_assignments_create_request_body : Annotated[Optional[RewardsAssignmentsCreateRequestBody], Field(description="Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points.")] = None, **kwargs) -> RewardsAssignmentsCreateResponseBody:  # noqa: E501
        """Create Reward Assignment  # noqa: E501

        Assigns a reward to a specified loyalty campaign.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_reward_assignment(reward_id, rewards_assignments_create_request_body, async_req=True)
        >>> result = thread.get()

        :param reward_id: A unique reward ID. (required)
        :type reward_id: str
        :param rewards_assignments_create_request_body: Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points.
        :type rewards_assignments_create_request_body: RewardsAssignmentsCreateRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RewardsAssignmentsCreateResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_reward_assignment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_reward_assignment_with_http_info(reward_id, rewards_assignments_create_request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def create_reward_assignment_with_http_info(self, reward_id : Annotated[StrictStr, Field(..., description="A unique reward ID.")], rewards_assignments_create_request_body : Annotated[Optional[RewardsAssignmentsCreateRequestBody], Field(description="Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Reward Assignment  # noqa: E501

        Assigns a reward to a specified loyalty campaign.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_reward_assignment_with_http_info(reward_id, rewards_assignments_create_request_body, async_req=True)
        >>> result = thread.get()

        :param reward_id: A unique reward ID. (required)
        :type reward_id: str
        :param rewards_assignments_create_request_body: Provide the campaign ID of the campaign to which the reward is to be assigned and define the cost of the reward in terms of loyalty points.
        :type rewards_assignments_create_request_body: RewardsAssignmentsCreateRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RewardsAssignmentsCreateResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'reward_id',
            'rewards_assignments_create_request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_reward_assignment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['reward_id']:
            _path_params['rewardId'] = _params['reward_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['rewards_assignments_create_request_body'] is not None:
            _body_params = _params['rewards_assignments_create_request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['X-App-Id', 'X-App-Token']  # noqa: E501

        _response_types_map = {
            '200': "RewardsAssignmentsCreateResponseBody",
        }

        return self.api_client.call_api(
            '/v1/rewards/{rewardId}/assignments', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_reward(self, reward_id : Annotated[StrictStr, Field(..., description="A unique reward ID.")], **kwargs) -> None:  # noqa: E501
        """Delete Reward  # noqa: E501

        Delete a reward.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_reward(reward_id, async_req=True)
        >>> result = thread.get()

        :param reward_id: A unique reward ID. (required)
        :type reward_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_reward_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_reward_with_http_info(reward_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_reward_with_http_info(self, reward_id : Annotated[StrictStr, Field(..., description="A unique reward ID.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Reward  # noqa: E501

        Delete a reward.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_reward_with_http_info(reward_id, async_req=True)
        >>> result = thread.get()

        :param reward_id: A unique reward ID. (required)
        :type reward_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'reward_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_reward" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['reward_id']:
            _path_params['rewardId'] = _params['reward_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['X-App-Id', 'X-App-Token']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v1/rewards/{rewardId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_reward_assignment(self, reward_id : Annotated[StrictStr, Field(..., description="A unique reward ID.")], assignment_id : Annotated[StrictStr, Field(..., description="A unique reward assignment ID.")], **kwargs) -> None:  # noqa: E501
        """Delete Reward Assignment  # noqa: E501

        This method deletes a reward assignment for a particular reward.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_reward_assignment(reward_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param reward_id: A unique reward ID. (required)
        :type reward_id: str
        :param assignment_id: A unique reward assignment ID. (required)
        :type assignment_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_reward_assignment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_reward_assignment_with_http_info(reward_id, assignment_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_reward_assignment_with_http_info(self, reward_id : Annotated[StrictStr, Field(..., description="A unique reward ID.")], assignment_id : Annotated[StrictStr, Field(..., description="A unique reward assignment ID.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Delete Reward Assignment  # noqa: E501

        This method deletes a reward assignment for a particular reward.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_reward_assignment_with_http_info(reward_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param reward_id: A unique reward ID. (required)
        :type reward_id: str
        :param assignment_id: A unique reward assignment ID. (required)
        :type assignment_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'reward_id',
            'assignment_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_reward_assignment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['reward_id']:
            _path_params['rewardId'] = _params['reward_id']

        if _params['assignment_id']:
            _path_params['assignmentId'] = _params['assignment_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['X-App-Id', 'X-App-Token']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/v1/rewards/{rewardId}/assignments/{assignmentId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_reward_assignment(self, reward_id : Annotated[StrictStr, Field(..., description="A unique reward ID.")], assignment_id : Annotated[StrictStr, Field(..., description="A unique reward assignment ID.")], **kwargs) -> RewardsAssignmentsGetResponseBody:  # noqa: E501
        """Get Reward Assignment  # noqa: E501

        Retrieve a reward assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_reward_assignment(reward_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param reward_id: A unique reward ID. (required)
        :type reward_id: str
        :param assignment_id: A unique reward assignment ID. (required)
        :type assignment_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RewardsAssignmentsGetResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_reward_assignment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_reward_assignment_with_http_info(reward_id, assignment_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_reward_assignment_with_http_info(self, reward_id : Annotated[StrictStr, Field(..., description="A unique reward ID.")], assignment_id : Annotated[StrictStr, Field(..., description="A unique reward assignment ID.")], **kwargs) -> ApiResponse:  # noqa: E501
        """Get Reward Assignment  # noqa: E501

        Retrieve a reward assignment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_reward_assignment_with_http_info(reward_id, assignment_id, async_req=True)
        >>> result = thread.get()

        :param reward_id: A unique reward ID. (required)
        :type reward_id: str
        :param assignment_id: A unique reward assignment ID. (required)
        :type assignment_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RewardsAssignmentsGetResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'reward_id',
            'assignment_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reward_assignment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['reward_id']:
            _path_params['rewardId'] = _params['reward_id']

        if _params['assignment_id']:
            _path_params['assignmentId'] = _params['assignment_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['X-App-Id', 'X-App-Token']  # noqa: E501

        _response_types_map = {
            '200': "RewardsAssignmentsGetResponseBody",
        }

        return self.api_client.call_api(
            '/v1/rewards/{rewardId}/assignments/{assignmentId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_reward_assignments(self, reward_id : Annotated[StrictStr, Field(..., description="A unique reward ID.")], limit : Annotated[Optional[conint(strict=True, le=100, ge=1)], Field(description="A limit on the number of objects to be returned. Limit can range between 1 and 100 items.")] = None, page : Annotated[Optional[conint(strict=True, le=100)], Field(description="Which page of results to return.")] = None, **kwargs) -> RewardsAssignmentsListResponseBody:  # noqa: E501
        """List Reward Assignments  # noqa: E501

        Retrieve reward assignments by the reward ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_reward_assignments(reward_id, limit, page, async_req=True)
        >>> result = thread.get()

        :param reward_id: A unique reward ID. (required)
        :type reward_id: str
        :param limit: A limit on the number of objects to be returned. Limit can range between 1 and 100 items.
        :type limit: int
        :param page: Which page of results to return.
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RewardsAssignmentsListResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_reward_assignments_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_reward_assignments_with_http_info(reward_id, limit, page, **kwargs)  # noqa: E501

    @validate_arguments
    def list_reward_assignments_with_http_info(self, reward_id : Annotated[StrictStr, Field(..., description="A unique reward ID.")], limit : Annotated[Optional[conint(strict=True, le=100, ge=1)], Field(description="A limit on the number of objects to be returned. Limit can range between 1 and 100 items.")] = None, page : Annotated[Optional[conint(strict=True, le=100)], Field(description="Which page of results to return.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List Reward Assignments  # noqa: E501

        Retrieve reward assignments by the reward ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_reward_assignments_with_http_info(reward_id, limit, page, async_req=True)
        >>> result = thread.get()

        :param reward_id: A unique reward ID. (required)
        :type reward_id: str
        :param limit: A limit on the number of objects to be returned. Limit can range between 1 and 100 items.
        :type limit: int
        :param page: Which page of results to return.
        :type page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RewardsAssignmentsListResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'reward_id',
            'limit',
            'page'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_reward_assignments" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['reward_id']:
            _path_params['rewardId'] = _params['reward_id']


        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['X-App-Id', 'X-App-Token']  # noqa: E501

        _response_types_map = {
            '200': "RewardsAssignmentsListResponseBody",
        }

        return self.api_client.call_api(
            '/v1/rewards/{rewardId}/assignments', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_reward_assignment(self, reward_id : Annotated[StrictStr, Field(..., description="A unique reward ID.")], assignment_id : Annotated[StrictStr, Field(..., description="A unique reward assignment ID.")], rewards_assignments_update_request_body : Annotated[Optional[RewardsAssignmentsUpdateRequestBody], Field(description="Define the number of points required to exchange for the reward.")] = None, **kwargs) -> RewardsAssignmentsUpdateResponseBody:  # noqa: E501
        """Update Reward Assignment  # noqa: E501

        Update the number of points needed to successfully redeem the reward.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_reward_assignment(reward_id, assignment_id, rewards_assignments_update_request_body, async_req=True)
        >>> result = thread.get()

        :param reward_id: A unique reward ID. (required)
        :type reward_id: str
        :param assignment_id: A unique reward assignment ID. (required)
        :type assignment_id: str
        :param rewards_assignments_update_request_body: Define the number of points required to exchange for the reward.
        :type rewards_assignments_update_request_body: RewardsAssignmentsUpdateRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RewardsAssignmentsUpdateResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the update_reward_assignment_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.update_reward_assignment_with_http_info(reward_id, assignment_id, rewards_assignments_update_request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def update_reward_assignment_with_http_info(self, reward_id : Annotated[StrictStr, Field(..., description="A unique reward ID.")], assignment_id : Annotated[StrictStr, Field(..., description="A unique reward assignment ID.")], rewards_assignments_update_request_body : Annotated[Optional[RewardsAssignmentsUpdateRequestBody], Field(description="Define the number of points required to exchange for the reward.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Update Reward Assignment  # noqa: E501

        Update the number of points needed to successfully redeem the reward.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_reward_assignment_with_http_info(reward_id, assignment_id, rewards_assignments_update_request_body, async_req=True)
        >>> result = thread.get()

        :param reward_id: A unique reward ID. (required)
        :type reward_id: str
        :param assignment_id: A unique reward assignment ID. (required)
        :type assignment_id: str
        :param rewards_assignments_update_request_body: Define the number of points required to exchange for the reward.
        :type rewards_assignments_update_request_body: RewardsAssignmentsUpdateRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RewardsAssignmentsUpdateResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'reward_id',
            'assignment_id',
            'rewards_assignments_update_request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_reward_assignment" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['reward_id']:
            _path_params['rewardId'] = _params['reward_id']

        if _params['assignment_id']:
            _path_params['assignmentId'] = _params['assignment_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['rewards_assignments_update_request_body'] is not None:
            _body_params = _params['rewards_assignments_update_request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['X-App-Id', 'X-App-Token']  # noqa: E501

        _response_types_map = {
            '200': "RewardsAssignmentsUpdateResponseBody",
        }

        return self.api_client.call_api(
            '/v1/rewards/{rewardId}/assignments/{assignmentId}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
