# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictStr, conint

from typing import Any, Dict, Optional

from openapi_client.models.create_publication_campaign import CreatePublicationCampaign
from openapi_client.models.parameter_order_list_publications import ParameterOrderListPublications
from openapi_client.models.parameter_result_list_publications import ParameterResultListPublications
from openapi_client.models.parameter_voucher_type_list_publications import ParameterVoucherTypeListPublications
from openapi_client.models.publications_create_request_body import PublicationsCreateRequestBody
from openapi_client.models.publications_create_response_body import PublicationsCreateResponseBody
from openapi_client.models.publications_list_response_body import PublicationsListResponseBody

from openapi_client.api_client import ApiClient
from openapi_client.api_response import ApiResponse
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PublicationsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_publication(self, join_once : Annotated[Optional[StrictBool], Field(description="Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer.")] = None, publications_create_request_body : Annotated[Optional[PublicationsCreateRequestBody], Field(description="Specify the publication parameters.")] = None, **kwargs) -> PublicationsCreateResponseBody:  # noqa: E501
        """Create Publication  # noqa: E501

        This method selects vouchers that are suitable for publication, adds a publish entry and returns the publication.  A voucher is suitable for publication when it's active and hasn't been published yet.    <!-- theme: warning --> > 🚧 Clearly define the source of the voucher > > You must clearly define which source you want to publish the voucher code from. It can either be a code from a campaign or a specific voucher identified by a code.   <!-- theme: warning --> > 🚧 Publish multiple vouchers > In case you want to publish multiple vouchers within a single publication, you need to specify the campaign name and number of vouchers you want to publish.   <!-- theme: info -->  > 📘 Auto-update campaign > > In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use an **auto-update** campaign.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_publication(join_once, publications_create_request_body, async_req=True)
        >>> result = thread.get()

        :param join_once: Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer.
        :type join_once: bool
        :param publications_create_request_body: Specify the publication parameters.
        :type publications_create_request_body: PublicationsCreateRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PublicationsCreateResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_publication_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_publication_with_http_info(join_once, publications_create_request_body, **kwargs)  # noqa: E501

    @validate_arguments
    def create_publication_with_http_info(self, join_once : Annotated[Optional[StrictBool], Field(description="Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer.")] = None, publications_create_request_body : Annotated[Optional[PublicationsCreateRequestBody], Field(description="Specify the publication parameters.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Publication  # noqa: E501

        This method selects vouchers that are suitable for publication, adds a publish entry and returns the publication.  A voucher is suitable for publication when it's active and hasn't been published yet.    <!-- theme: warning --> > 🚧 Clearly define the source of the voucher > > You must clearly define which source you want to publish the voucher code from. It can either be a code from a campaign or a specific voucher identified by a code.   <!-- theme: warning --> > 🚧 Publish multiple vouchers > In case you want to publish multiple vouchers within a single publication, you need to specify the campaign name and number of vouchers you want to publish.   <!-- theme: info -->  > 📘 Auto-update campaign > > In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use an **auto-update** campaign.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_publication_with_http_info(join_once, publications_create_request_body, async_req=True)
        >>> result = thread.get()

        :param join_once: Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer.
        :type join_once: bool
        :param publications_create_request_body: Specify the publication parameters.
        :type publications_create_request_body: PublicationsCreateRequestBody
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PublicationsCreateResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'join_once',
            'publications_create_request_body'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_publication" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('join_once') is not None:  # noqa: E501
            _query_params.append(('join_once', _params['join_once']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['publications_create_request_body'] is not None:
            _body_params = _params['publications_create_request_body']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['X-App-Id-1', 'X-App-Token-1']  # noqa: E501

        _response_types_map = {
            '200': "PublicationsCreateResponseBody",
        }

        return self.api_client.call_api(
            '/v1/publications', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_publication1(self, customer : Annotated[Any, Field(..., description="Contains information about the customer to whom the publication was directed.")], join_once : Annotated[Optional[StrictBool], Field(description="Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer.")] = None, voucher : Annotated[Optional[StrictStr], Field(description="Code of voucher being published.")] = None, campaign : Annotated[Optional[CreatePublicationCampaign], Field(description="Create publication with campaign.")] = None, source_id : Annotated[Optional[StrictStr], Field(description="The merchant’s publication ID if it is different from the Voucherify publication ID. It's an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service. If `source_id` is provided only 1 voucher can be published per request.")] = None, metadata : Annotated[Optional[Dict[str, Dict[str, Any]]], Field(description="The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format.")] = None, **kwargs) -> PublicationsCreateResponseBody:  # noqa: E501
        """Create Publication  # noqa: E501

        This method selects vouchers that are suitable for publication, adds a publish entry and returns the publication.  A voucher is suitable for publication when it's active and hasn't been published yet. > ❗️ Limited access > > Access to this endpoint is limited. This endpoint is designed for specific integrations and the API keys need to be configured to access this endpoint. Navigate to the **Dashboard** &rarr; **Project Settings** &rarr; **General** &rarr; **Integration Keys** to set up a pair of API keys and use them to send the request.    <!-- theme: warning --> > 🚧 Clearly define the source of the voucher > > You must clearly define which source you want to publish the voucher code from. It can either be a code from a campaign or a specific voucher identified by a code.   <!-- theme: warning --> > 🚧 Publish multiple vouchers > This endpoint does not support the publishing of multiple vouchers from a single campaign. In case you want to publish multiple vouchers within a single publication, you need to use a [dedicated endpoint](ref:create-publication).    <!-- theme: info -->  > 📘 Auto-update campaign > > In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use an **auto-update** campaign.    ## Example Request  ```markdown Publication Query  /publications/create?campaign[name]=BlackFriday&customer[source_id]=Customer_Source_ID  ```    <!-- theme: danger --> > ❗️ Required   > > Query param `voucher` OR `campaign` MUST be filled out. If you provide both, `campaign` param will be skipped.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_publication1(customer, join_once, voucher, campaign, source_id, metadata, async_req=True)
        >>> result = thread.get()

        :param customer: Contains information about the customer to whom the publication was directed. (required)
        :type customer: Customer
        :param join_once: Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer.
        :type join_once: bool
        :param voucher: Code of voucher being published.
        :type voucher: str
        :param campaign: Create publication with campaign.
        :type campaign: CreatePublicationCampaign
        :param source_id: The merchant’s publication ID if it is different from the Voucherify publication ID. It's an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service. If `source_id` is provided only 1 voucher can be published per request.
        :type source_id: str
        :param metadata: The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format.
        :type metadata: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PublicationsCreateResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_publication1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_publication1_with_http_info(customer, join_once, voucher, campaign, source_id, metadata, **kwargs)  # noqa: E501

    @validate_arguments
    def create_publication1_with_http_info(self, customer : Annotated[Any, Field(..., description="Contains information about the customer to whom the publication was directed.")], join_once : Annotated[Optional[StrictBool], Field(description="Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer.")] = None, voucher : Annotated[Optional[StrictStr], Field(description="Code of voucher being published.")] = None, campaign : Annotated[Optional[CreatePublicationCampaign], Field(description="Create publication with campaign.")] = None, source_id : Annotated[Optional[StrictStr], Field(description="The merchant’s publication ID if it is different from the Voucherify publication ID. It's an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service. If `source_id` is provided only 1 voucher can be published per request.")] = None, metadata : Annotated[Optional[Dict[str, Dict[str, Any]]], Field(description="The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Create Publication  # noqa: E501

        This method selects vouchers that are suitable for publication, adds a publish entry and returns the publication.  A voucher is suitable for publication when it's active and hasn't been published yet. > ❗️ Limited access > > Access to this endpoint is limited. This endpoint is designed for specific integrations and the API keys need to be configured to access this endpoint. Navigate to the **Dashboard** &rarr; **Project Settings** &rarr; **General** &rarr; **Integration Keys** to set up a pair of API keys and use them to send the request.    <!-- theme: warning --> > 🚧 Clearly define the source of the voucher > > You must clearly define which source you want to publish the voucher code from. It can either be a code from a campaign or a specific voucher identified by a code.   <!-- theme: warning --> > 🚧 Publish multiple vouchers > This endpoint does not support the publishing of multiple vouchers from a single campaign. In case you want to publish multiple vouchers within a single publication, you need to use a [dedicated endpoint](ref:create-publication).    <!-- theme: info -->  > 📘 Auto-update campaign > > In case you want to ensure the number of publishable codes increases automatically with the number of customers, you should use an **auto-update** campaign.    ## Example Request  ```markdown Publication Query  /publications/create?campaign[name]=BlackFriday&customer[source_id]=Customer_Source_ID  ```    <!-- theme: danger --> > ❗️ Required   > > Query param `voucher` OR `campaign` MUST be filled out. If you provide both, `campaign` param will be skipped.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_publication1_with_http_info(customer, join_once, voucher, campaign, source_id, metadata, async_req=True)
        >>> result = thread.get()

        :param customer: Contains information about the customer to whom the publication was directed. (required)
        :type customer: Customer
        :param join_once: Through this flag, you can control if a particular person gets only one and always the same code even if the app sends multiple publication requests. It means that if you have a referral program, a referrer is assigned only to one code if an integration sends publication requests more than once for the same customer.
        :type join_once: bool
        :param voucher: Code of voucher being published.
        :type voucher: str
        :param campaign: Create publication with campaign.
        :type campaign: CreatePublicationCampaign
        :param source_id: The merchant’s publication ID if it is different from the Voucherify publication ID. It's an optional tracking identifier of a publication. It is really useful in case of an integration between multiple systems. It can be a publication ID from a CRM system, database or 3rd-party service. If `source_id` is provided only 1 voucher can be published per request.
        :type source_id: str
        :param metadata: The metadata object stores all custom attributes assigned to the publication. A set of key/value pairs that you can attach to a publication object. It can be useful for storing additional information about the publication in a structured format.
        :type metadata: object
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PublicationsCreateResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'customer',
            'join_once',
            'voucher',
            'campaign',
            'source_id',
            'metadata'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_publication1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('join_once') is not None:  # noqa: E501
            _query_params.append(('join_once', _params['join_once']))

        if _params.get('voucher') is not None:  # noqa: E501
            _query_params.append(('voucher', _params['voucher']))

        if _params.get('campaign') is not None:  # noqa: E501
            _query_params.append(('campaign', _params['campaign']))

        if _params.get('source_id') is not None:  # noqa: E501
            _query_params.append(('source_id', _params['source_id']))

        if _params.get('customer') is not None:  # noqa: E501
            _query_params.append(('customer', _params['customer']))

        if _params.get('metadata') is not None:  # noqa: E501
            _query_params.append(('metadata', _params['metadata']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['X-App-Id-1', 'X-App-Token-1']  # noqa: E501

        _response_types_map = {
            '200': "PublicationsCreateResponseBody",
        }

        return self.api_client.call_api(
            '/v1/publications/create', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_publications(self, limit : Annotated[Optional[conint(strict=True, le=100, ge=1)], Field(description="A limit on the number of objects to be returned. Limit can range between 1 and 100 items.")] = None, page : Annotated[Optional[conint(strict=True, le=100)], Field(description="Which page of results to return.")] = None, order : Annotated[Optional[ParameterOrderListPublications], Field(description="Sorts the results using one of the filtering options, where the dash `-` preceding a sorting option means sorting in a descending order.")] = None, campaign : Annotated[Optional[StrictStr], Field(description="Filters by a given campaign name.")] = None, customer : Annotated[Optional[StrictStr], Field(description="Filters by a unique customer ID.")] = None, voucher : Annotated[Optional[StrictStr], Field(description="Filters by a given voucher code.")] = None, result : Annotated[Optional[ParameterResultListPublications], Field(description="Filters by a publication result.")] = None, voucher_type : Annotated[Optional[ParameterVoucherTypeListPublications], Field(description="Filters by a voucher type.")] = None, is_referral_code : Annotated[Optional[StrictBool], Field(description="This filter works only for the `true` option. If set to `true`, the query returns only publications of codes from referral campaigns. ")] = None, filters : Annotated[Optional[StrictStr], Field(description="Allows for combining the filters mentioned in the endpoint description.")] = None, source_id : Annotated[Optional[StrictStr], Field(description="Using this endpoint with a particular publication `source_id`, which was sent with the original request to create a publication, returns in the response, exactly the same code published initially because the code was assigned to the given publication. As a result, you can use this endpoint as a reference and return a code that was assigned in a publication by using a particular `source_id`.")] = None, **kwargs) -> PublicationsListResponseBody:  # noqa: E501
        """List Publications  # noqa: E501

        Retrieve a list of publications. To return a **particular** publication, you can use the `source_id` query parameter and provide the `source_id` of the publication you are looking for specifically.  ## Pagination  <!-- theme: warning --> > 🚧 Important! > > If you want to scroll through a huge set of records, it is recommended to use the <!-- [Exports API](OpenAPI.json/components/schemas/16_obj_export_object) -->[Exports API](ref:create-export). This API will return an error `page_over_limit` if you reach a page above 1000.  ## Filter Query  The `filters` query parameter allows for joining multiple parameters with logical operators. The syntax looks as follows:  <!-- title: \"Filter template\" --> ```url filters[<field_name>][conditions][<operator>][<index>]=<value> ```  ### Operators:  <!-- title: \"Operators\" --> ```     \"$in\"     \"$not_in\"     \"$is\"     \"$is_not\"     \"$has_value\"     \"$is_unknown\"     \"$contains\"     \"$starts_with\"     \"$ends_with\"     \"$more_than\"     \"$less_than\"     \"$more_than_equal\"     \"$less_than_equal\" ```  ### Examples  <!-- title: \"Example 1 - List publications of a given customer\" --> ```url GET /v1/publications?filters[customer_id][conditions][$is][0]=cust_lUET6gRpO5Wxlg5p2j2gRCgL ``` <!-- title: \"Example 2 - List publications of 2 customers\" --> ```url GET /v1/publications?filters[customer_id][conditions][$in][0]=cust_lUET6gRpO5Wxlg5p2j2gRCgL&filters[customer_id][conditions][$in][1]=cust_aR7NfHusxT7PdTMAKMfWDXnc ``` <!-- title: \"Example 3 - List publications of 2 customers using junction operator\" --> ```url GET /v1/publications?filters[customer_id][conditions][$is][0]=cust_lUET6gRpO5Wxlg5p2j2gRCgL&filters[customer_id][conditions][$is][1]=cust_aR7NfHusxT7PdTMAKMfWDXnc&filters[junction]=OR ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_publications(limit, page, order, campaign, customer, voucher, result, voucher_type, is_referral_code, filters, source_id, async_req=True)
        >>> result = thread.get()

        :param limit: A limit on the number of objects to be returned. Limit can range between 1 and 100 items.
        :type limit: int
        :param page: Which page of results to return.
        :type page: int
        :param order: Sorts the results using one of the filtering options, where the dash `-` preceding a sorting option means sorting in a descending order.
        :type order: ParameterOrderListPublications
        :param campaign: Filters by a given campaign name.
        :type campaign: str
        :param customer: Filters by a unique customer ID.
        :type customer: str
        :param voucher: Filters by a given voucher code.
        :type voucher: str
        :param result: Filters by a publication result.
        :type result: ParameterResultListPublications
        :param voucher_type: Filters by a voucher type.
        :type voucher_type: ParameterVoucherTypeListPublications
        :param is_referral_code: This filter works only for the `true` option. If set to `true`, the query returns only publications of codes from referral campaigns. 
        :type is_referral_code: bool
        :param filters: Allows for combining the filters mentioned in the endpoint description.
        :type filters: str
        :param source_id: Using this endpoint with a particular publication `source_id`, which was sent with the original request to create a publication, returns in the response, exactly the same code published initially because the code was assigned to the given publication. As a result, you can use this endpoint as a reference and return a code that was assigned in a publication by using a particular `source_id`.
        :type source_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PublicationsListResponseBody
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_publications_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_publications_with_http_info(limit, page, order, campaign, customer, voucher, result, voucher_type, is_referral_code, filters, source_id, **kwargs)  # noqa: E501

    @validate_arguments
    def list_publications_with_http_info(self, limit : Annotated[Optional[conint(strict=True, le=100, ge=1)], Field(description="A limit on the number of objects to be returned. Limit can range between 1 and 100 items.")] = None, page : Annotated[Optional[conint(strict=True, le=100)], Field(description="Which page of results to return.")] = None, order : Annotated[Optional[ParameterOrderListPublications], Field(description="Sorts the results using one of the filtering options, where the dash `-` preceding a sorting option means sorting in a descending order.")] = None, campaign : Annotated[Optional[StrictStr], Field(description="Filters by a given campaign name.")] = None, customer : Annotated[Optional[StrictStr], Field(description="Filters by a unique customer ID.")] = None, voucher : Annotated[Optional[StrictStr], Field(description="Filters by a given voucher code.")] = None, result : Annotated[Optional[ParameterResultListPublications], Field(description="Filters by a publication result.")] = None, voucher_type : Annotated[Optional[ParameterVoucherTypeListPublications], Field(description="Filters by a voucher type.")] = None, is_referral_code : Annotated[Optional[StrictBool], Field(description="This filter works only for the `true` option. If set to `true`, the query returns only publications of codes from referral campaigns. ")] = None, filters : Annotated[Optional[StrictStr], Field(description="Allows for combining the filters mentioned in the endpoint description.")] = None, source_id : Annotated[Optional[StrictStr], Field(description="Using this endpoint with a particular publication `source_id`, which was sent with the original request to create a publication, returns in the response, exactly the same code published initially because the code was assigned to the given publication. As a result, you can use this endpoint as a reference and return a code that was assigned in a publication by using a particular `source_id`.")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List Publications  # noqa: E501

        Retrieve a list of publications. To return a **particular** publication, you can use the `source_id` query parameter and provide the `source_id` of the publication you are looking for specifically.  ## Pagination  <!-- theme: warning --> > 🚧 Important! > > If you want to scroll through a huge set of records, it is recommended to use the <!-- [Exports API](OpenAPI.json/components/schemas/16_obj_export_object) -->[Exports API](ref:create-export). This API will return an error `page_over_limit` if you reach a page above 1000.  ## Filter Query  The `filters` query parameter allows for joining multiple parameters with logical operators. The syntax looks as follows:  <!-- title: \"Filter template\" --> ```url filters[<field_name>][conditions][<operator>][<index>]=<value> ```  ### Operators:  <!-- title: \"Operators\" --> ```     \"$in\"     \"$not_in\"     \"$is\"     \"$is_not\"     \"$has_value\"     \"$is_unknown\"     \"$contains\"     \"$starts_with\"     \"$ends_with\"     \"$more_than\"     \"$less_than\"     \"$more_than_equal\"     \"$less_than_equal\" ```  ### Examples  <!-- title: \"Example 1 - List publications of a given customer\" --> ```url GET /v1/publications?filters[customer_id][conditions][$is][0]=cust_lUET6gRpO5Wxlg5p2j2gRCgL ``` <!-- title: \"Example 2 - List publications of 2 customers\" --> ```url GET /v1/publications?filters[customer_id][conditions][$in][0]=cust_lUET6gRpO5Wxlg5p2j2gRCgL&filters[customer_id][conditions][$in][1]=cust_aR7NfHusxT7PdTMAKMfWDXnc ``` <!-- title: \"Example 3 - List publications of 2 customers using junction operator\" --> ```url GET /v1/publications?filters[customer_id][conditions][$is][0]=cust_lUET6gRpO5Wxlg5p2j2gRCgL&filters[customer_id][conditions][$is][1]=cust_aR7NfHusxT7PdTMAKMfWDXnc&filters[junction]=OR ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_publications_with_http_info(limit, page, order, campaign, customer, voucher, result, voucher_type, is_referral_code, filters, source_id, async_req=True)
        >>> result = thread.get()

        :param limit: A limit on the number of objects to be returned. Limit can range between 1 and 100 items.
        :type limit: int
        :param page: Which page of results to return.
        :type page: int
        :param order: Sorts the results using one of the filtering options, where the dash `-` preceding a sorting option means sorting in a descending order.
        :type order: ParameterOrderListPublications
        :param campaign: Filters by a given campaign name.
        :type campaign: str
        :param customer: Filters by a unique customer ID.
        :type customer: str
        :param voucher: Filters by a given voucher code.
        :type voucher: str
        :param result: Filters by a publication result.
        :type result: ParameterResultListPublications
        :param voucher_type: Filters by a voucher type.
        :type voucher_type: ParameterVoucherTypeListPublications
        :param is_referral_code: This filter works only for the `true` option. If set to `true`, the query returns only publications of codes from referral campaigns. 
        :type is_referral_code: bool
        :param filters: Allows for combining the filters mentioned in the endpoint description.
        :type filters: str
        :param source_id: Using this endpoint with a particular publication `source_id`, which was sent with the original request to create a publication, returns in the response, exactly the same code published initially because the code was assigned to the given publication. As a result, you can use this endpoint as a reference and return a code that was assigned in a publication by using a particular `source_id`.
        :type source_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PublicationsListResponseBody, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'limit',
            'page',
            'order',
            'campaign',
            'customer',
            'voucher',
            'result',
            'voucher_type',
            'is_referral_code',
            'filters',
            'source_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_publications" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('page') is not None:  # noqa: E501
            _query_params.append(('page', _params['page']))

        if _params.get('order') is not None:  # noqa: E501
            _query_params.append(('order', _params['order'].value))

        if _params.get('campaign') is not None:  # noqa: E501
            _query_params.append(('campaign', _params['campaign']))

        if _params.get('customer') is not None:  # noqa: E501
            _query_params.append(('customer', _params['customer']))

        if _params.get('voucher') is not None:  # noqa: E501
            _query_params.append(('voucher', _params['voucher']))

        if _params.get('result') is not None:  # noqa: E501
            _query_params.append(('result', _params['result'].value))

        if _params.get('voucher_type') is not None:  # noqa: E501
            _query_params.append(('voucher_type', _params['voucher_type'].value))

        if _params.get('is_referral_code') is not None:  # noqa: E501
            _query_params.append(('is_referral_code', _params['is_referral_code']))

        if _params.get('filters') is not None:  # noqa: E501
            _query_params.append(('filters', _params['filters']))

        if _params.get('source_id') is not None:  # noqa: E501
            _query_params.append(('source_id', _params['source_id']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['X-App-Id-1', 'X-App-Token-1']  # noqa: E501

        _response_types_map = {
            '200': "PublicationsListResponseBody",
        }

        return self.api_client.call_api(
            '/v1/publications', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
