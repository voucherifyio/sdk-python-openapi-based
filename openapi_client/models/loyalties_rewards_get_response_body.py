# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from openapi_client.models.reward_assignment_parameters_parameters import RewardAssignmentParametersParameters

class LoyaltiesRewardsGetResponseBody(BaseModel):
    """
    Response body schema for **GET** `/loyalties/{campaignId}/rewards/{assignmentId}`  # noqa: E501
    """
    id: StrictStr = Field(..., description="Unique reward assignment ID, assigned by Voucherify.")
    reward_id: StrictStr = Field(..., description="Associated reward ID.")
    created_at: datetime = Field(..., description="Timestamp representing the date and time when the reward assignment was created in ISO 8601 format.")
    updated_at: Optional[datetime] = Field(None, description="Timestamp representing the date and time when the reward assignment was updated in ISO 8601 format.")
    object: StrictStr = Field(..., description="The type of object represented by the JSON. This object stores information about the reward assignment.")
    related_object_id: StrictStr = Field(..., description="Related object ID to which the reward was assigned.")
    related_object_type: StrictStr = Field(..., description="Related object type to which the reward was assigned.")
    parameters: Optional[RewardAssignmentParametersParameters] = None
    __properties = ["id", "reward_id", "created_at", "updated_at", "object", "related_object_id", "related_object_type", "parameters"]

    @validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('reward_assignment',):
            raise ValueError("must be one of enum values ('reward_assignment')")
        return value

    @validator('related_object_type')
    def related_object_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('campaign',):
            raise ValueError("must be one of enum values ('campaign')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LoyaltiesRewardsGetResponseBody:
        """Create an instance of LoyaltiesRewardsGetResponseBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        # set to None if updated_at (nullable) is None
        # and __fields_set__ contains the field
        if self.updated_at is None and "updated_at" in self.__fields_set__:
            _dict['updated_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LoyaltiesRewardsGetResponseBody:
        """Create an instance of LoyaltiesRewardsGetResponseBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LoyaltiesRewardsGetResponseBody.parse_obj(obj)

        _obj = LoyaltiesRewardsGetResponseBody.parse_obj({
            "id": obj.get("id"),
            "reward_id": obj.get("reward_id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "object": obj.get("object") if obj.get("object") is not None else 'reward_assignment',
            "related_object_id": obj.get("related_object_id"),
            "related_object_type": obj.get("related_object_type") if obj.get("related_object_type") is not None else 'campaign',
            "parameters": RewardAssignmentParametersParameters.from_dict(obj.get("parameters")) if obj.get("parameters") is not None else None
        })
        return _obj


