# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator

class RewardTypeCampaignCampaign(BaseModel):
    """
    Objects stores information about the campaign related to the reward.  # noqa: E501
    """
    id: StrictStr = Field(..., description="Unique campaign ID, assigned by Voucherify.")
    balance: Optional[StrictInt] = Field(None, description="The incremental amout to be added to the current balance on the gift card. Value is multiplied by 100 to precisely represent 2 decimal places. For example, $100 amount is written as 10000.")
    type: StrictStr = Field(..., description="Campaign type.")
    __properties = ["id", "balance", "type"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('DISCOUNT_COUPONS', 'PROMOTION', 'GIFT_VOUCHERS', 'REFERRAL_PROGRAM', 'LOYALTY_PROGRAM',):
            raise ValueError("must be one of enum values ('DISCOUNT_COUPONS', 'PROMOTION', 'GIFT_VOUCHERS', 'REFERRAL_PROGRAM', 'LOYALTY_PROGRAM')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RewardTypeCampaignCampaign:
        """Create an instance of RewardTypeCampaignCampaign from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RewardTypeCampaignCampaign:
        """Create an instance of RewardTypeCampaignCampaign from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RewardTypeCampaignCampaign.parse_obj(obj)

        _obj = RewardTypeCampaignCampaign.parse_obj({
            "id": obj.get("id"),
            "balance": obj.get("balance"),
            "type": obj.get("type")
        })
        return _obj


