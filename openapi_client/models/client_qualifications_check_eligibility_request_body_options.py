# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conint, conlist, validator
from openapi_client.models.client_qualifications_check_eligibility_request_body_options_filters import ClientQualificationsCheckEligibilityRequestBodyOptionsFilters

class ClientQualificationsCheckEligibilityRequestBodyOptions(BaseModel):
    """
    Configure parameters returned in the response.  # noqa: E501
    """
    limit: Optional[conint(strict=True, le=100)] = Field(None, description="The maximum number of redeemables to be returned in the API request. The actual number of returned redeemables will be determined by the API. The default value is set to 5")
    starting_after: Optional[datetime] = Field(None, description="Cursor used for paging.")
    filters: Optional[ClientQualificationsCheckEligibilityRequestBodyOptionsFilters] = None
    expand: Optional[conlist(StrictStr)] = Field(None, description="The expand array lets you configure the parameters included in the response. Depending on the strings included in the array, the response will contain different details.   | **Expand Option** | **Response Body** | |:---|:---| | [\"redeemable\"] | - Returns the redeemables' metadata. | | [\"category\"] | - Returns an expanded `categories` object, showing details about the category. | | [\"validation_rules\"] | - Returns an expanded `validation_rules` object, showing details about the validation rules. |")
    sorting_rule: Optional[StrictStr] = Field(None, description="Is used to determine the order in which data is displayed in the result array.    - `DEFAULT` - Sorting descending by `created_at`   - `BEST_DEAL` - Sorting descending by `total_applied_discount_amount`   - `LEAST_DEAL` - Sorting ascending by `total_applied_discount_amount`")
    __properties = ["limit", "starting_after", "filters", "expand", "sorting_rule"]

    @validator('expand')
    def expand_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('redeemable', 'category', 'validation_rules',):
                raise ValueError("each list item must be one of ('redeemable', 'category', 'validation_rules')")
        return value

    @validator('sorting_rule')
    def sorting_rule_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('BEST_DEAL', 'LEAST_DEAL', 'DEFAULT',):
            raise ValueError("must be one of enum values ('BEST_DEAL', 'LEAST_DEAL', 'DEFAULT')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ClientQualificationsCheckEligibilityRequestBodyOptions:
        """Create an instance of ClientQualificationsCheckEligibilityRequestBodyOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of filters
        if self.filters:
            _dict['filters'] = self.filters.to_dict()
        # set to None if starting_after (nullable) is None
        # and __fields_set__ contains the field
        if self.starting_after is None and "starting_after" in self.__fields_set__:
            _dict['starting_after'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ClientQualificationsCheckEligibilityRequestBodyOptions:
        """Create an instance of ClientQualificationsCheckEligibilityRequestBodyOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ClientQualificationsCheckEligibilityRequestBodyOptions.parse_obj(obj)

        _obj = ClientQualificationsCheckEligibilityRequestBodyOptions.parse_obj({
            "limit": obj.get("limit"),
            "starting_after": obj.get("starting_after"),
            "filters": ClientQualificationsCheckEligibilityRequestBodyOptionsFilters.from_dict(obj.get("filters")) if obj.get("filters") is not None else None,
            "expand": obj.get("expand"),
            "sorting_rule": obj.get("sorting_rule")
        })
        return _obj


