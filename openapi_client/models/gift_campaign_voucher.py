# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator
from openapi_client.models.campaign_loyalty_voucher_redemption import CampaignLoyaltyVoucherRedemption
from openapi_client.models.code_config import CodeConfig
from openapi_client.models.gift import Gift

class GiftCampaignVoucher(BaseModel):
    """
    Schema model for a discount voucher.  # noqa: E501
    """
    type: StrictStr = Field(..., description="Type of voucher.")
    gift: Gift = Field(...)
    redemption: Optional[CampaignLoyaltyVoucherRedemption] = None
    code_config: Optional[CodeConfig] = None
    __properties = ["type", "gift", "redemption", "code_config"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('GIFT_VOUCHER',):
            raise ValueError("must be one of enum values ('GIFT_VOUCHER')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GiftCampaignVoucher:
        """Create an instance of GiftCampaignVoucher from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of gift
        if self.gift:
            _dict['gift'] = self.gift.to_dict()
        # override the default output from pydantic by calling `to_dict()` of redemption
        if self.redemption:
            _dict['redemption'] = self.redemption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of code_config
        if self.code_config:
            _dict['code_config'] = self.code_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GiftCampaignVoucher:
        """Create an instance of GiftCampaignVoucher from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return GiftCampaignVoucher.parse_obj(obj)

        _obj = GiftCampaignVoucher.parse_obj({
            "type": obj.get("type") if obj.get("type") is not None else 'GIFT_VOUCHER',
            "gift": Gift.from_dict(obj.get("gift")) if obj.get("gift") is not None else None,
            "redemption": CampaignLoyaltyVoucherRedemption.from_dict(obj.get("redemption")) if obj.get("redemption") is not None else None,
            "code_config": CodeConfig.from_dict(obj.get("code_config")) if obj.get("code_config") is not None else None
        })
        return _obj


