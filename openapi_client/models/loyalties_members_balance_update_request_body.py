# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from openapi_client.models.points_expiration_types import PointsExpirationTypes

class LoyaltiesMembersBalanceUpdateRequestBody(BaseModel):
    """
    Request Body schema for **post** `/loyalties/members/{memberId}/balance` and **POST** `/loyalties/{campaignId}/members/{memberId}/balance`.  # noqa: E501
    """
    points: StrictInt = Field(..., description="Incremental balance to be added to/subtracted from the loyalty card.  - To add points: 100 - To subtract points, add a minus: -100")
    expiration_type: Optional[PointsExpirationTypes] = None
    expiration_date: Optional[datetime] = Field(None, description="Set expiration date for added points, i.e. `YYYY-MM-DD`. This parameter is required only when expiration_type is set to `CUSTOM_DATE`.")
    reason: Optional[StrictStr] = Field(None, description="Reason for the transfer.")
    source_id: Optional[StrictStr] = Field(None, description="The merchantâ€™s transaction ID if it is different from the Voucherify transaction ID. It is really useful in case of an integration between multiple systems. It can be a transaction ID from a CRM system, database or 3rd-party service.")
    __properties = ["points", "expiration_type", "expiration_date", "reason", "source_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LoyaltiesMembersBalanceUpdateRequestBody:
        """Create an instance of LoyaltiesMembersBalanceUpdateRequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LoyaltiesMembersBalanceUpdateRequestBody:
        """Create an instance of LoyaltiesMembersBalanceUpdateRequestBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LoyaltiesMembersBalanceUpdateRequestBody.parse_obj(obj)

        _obj = LoyaltiesMembersBalanceUpdateRequestBody.parse_obj({
            "points": obj.get("points"),
            "expiration_type": obj.get("expiration_type"),
            "expiration_date": obj.get("expiration_date"),
            "reason": obj.get("reason"),
            "source_id": obj.get("source_id")
        })
        return _obj


