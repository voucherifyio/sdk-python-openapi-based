# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from openapi_client.models.promotion_tier_action import PromotionTierAction
from openapi_client.models.promotion_tier_validity_timeframe import PromotionTierValidityTimeframe

class PromotionTierCreateParams(BaseModel):
    """
    This is an object representing a promotion tier create params. Promotion tiers are always assigned to a campaign and cannot be used standalone.  # noqa: E501
    """
    name: StrictStr = Field(..., description="Name of the promotion tier.")
    banner: Optional[StrictStr] = Field(None, description="Text to be displayed to your customers on your website.")
    action: Optional[PromotionTierAction] = None
    metadata: Optional[Dict[str, Any]] = Field(None, description="The metadata object stores all custom attributes assigned to the promotion tier. A set of key/value pairs that you can attach to a promotion tier object. It can be useful for storing additional information about the promotion tier in a structured format.")
    validation_rules: Optional[conlist(StrictStr)] = Field(None, description="Array containing the ID of the validation rule associated with the promotion tier.")
    active: Optional[StrictBool] = Field(None, description="A flag to toggle the promotion tier on or off. You can disable a promotion tier even though it's within the active period defined by the `start_date` and `expiration_date`.    - `true` indicates an *active* promotion tier - `false` indicates an *inactive* promotion tier")
    hierarchy: Optional[StrictInt] = Field(None, description="The promotions hierarchy defines the order in which the discounts from different tiers will be applied to a customer's order. If a customer qualifies for discounts from more than one tier, discounts will be applied in the order defined in the hierarchy.")
    start_date: Optional[datetime] = Field(None, description="Activation timestamp defines when the promotion tier starts to be active in ISO 8601 format. Promotion tier is *inactive before* this date. ")
    expiration_date: Optional[datetime] = Field(None, description="Activation timestamp defines when the promotion tier expires in ISO 8601 format. Promotion tier is *inactive after* this date. ")
    validity_timeframe: Optional[PromotionTierValidityTimeframe] = None
    validity_day_of_week: Optional[conlist(StrictInt)] = Field(None, description="Integer array corresponding to the particular days of the week in which the promotion tier is valid.  - `0`  Sunday   - `1`  Monday   - `2`  Tuesday   - `3`  Wednesday   - `4`  Thursday   - `5`  Friday   - `6`  Saturday  ")
    category: Optional[StrictStr] = Field(None, description="Assign category to the promotion tier.")
    category_id: Optional[StrictStr] = Field(None, description="Instead of using the category name, you can alternatively assign a new category to a promotion tier using a unique category ID, i.e. `cat_0c9da30e7116ba6bba`.")
    __properties = ["name", "banner", "action", "metadata", "validation_rules", "active", "hierarchy", "start_date", "expiration_date", "validity_timeframe", "validity_day_of_week", "category", "category_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PromotionTierCreateParams:
        """Create an instance of PromotionTierCreateParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of action
        if self.action:
            _dict['action'] = self.action.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validity_timeframe
        if self.validity_timeframe:
            _dict['validity_timeframe'] = self.validity_timeframe.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PromotionTierCreateParams:
        """Create an instance of PromotionTierCreateParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PromotionTierCreateParams.parse_obj(obj)

        _obj = PromotionTierCreateParams.parse_obj({
            "name": obj.get("name"),
            "banner": obj.get("banner"),
            "action": PromotionTierAction.from_dict(obj.get("action")) if obj.get("action") is not None else None,
            "metadata": obj.get("metadata"),
            "validation_rules": obj.get("validation_rules"),
            "active": obj.get("active"),
            "hierarchy": obj.get("hierarchy"),
            "start_date": obj.get("start_date"),
            "expiration_date": obj.get("expiration_date"),
            "validity_timeframe": PromotionTierValidityTimeframe.from_dict(obj.get("validity_timeframe")) if obj.get("validity_timeframe") is not None else None,
            "validity_day_of_week": obj.get("validity_day_of_week"),
            "category": obj.get("category"),
            "category_id": obj.get("category_id")
        })
        return _obj


