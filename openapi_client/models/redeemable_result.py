# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from openapi_client.models.discount import Discount
from openapi_client.models.error import Error
from openapi_client.models.redeemable_gift import RedeemableGift
from openapi_client.models.redeemable_loyalty_card import RedeemableLoyaltyCard

class RedeemableResult(BaseModel):
    """
    Information about redeemable result.  # noqa: E501
    """
    discount: Optional[Discount] = None
    gift: Optional[RedeemableGift] = None
    loyalty_card: Optional[RedeemableLoyaltyCard] = None
    error: Optional[Error] = None
    __properties = ["discount", "gift", "loyalty_card", "error"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RedeemableResult:
        """Create an instance of RedeemableResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of discount
        if self.discount:
            _dict['discount'] = self.discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gift
        if self.gift:
            _dict['gift'] = self.gift.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loyalty_card
        if self.loyalty_card:
            _dict['loyalty_card'] = self.loyalty_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RedeemableResult:
        """Create an instance of RedeemableResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RedeemableResult.parse_obj(obj)

        _obj = RedeemableResult.parse_obj({
            "discount": Discount.from_dict(obj.get("discount")) if obj.get("discount") is not None else None,
            "gift": RedeemableGift.from_dict(obj.get("gift")) if obj.get("gift") is not None else None,
            "loyalty_card": RedeemableLoyaltyCard.from_dict(obj.get("loyalty_card")) if obj.get("loyalty_card") is not None else None,
            "error": Error.from_dict(obj.get("error")) if obj.get("error") is not None else None
        })
        return _obj


