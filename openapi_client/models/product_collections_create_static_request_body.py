# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from openapi_client.models.product_collections_create_dynamic_request_body_products_item import ProductCollectionsCreateDynamicRequestBodyProductsItem

class ProductCollectionsCreateStaticRequestBody(BaseModel):
    """
    Response body schema for **POST** `/product-collections`.  # noqa: E501
    """
    type: StrictStr = Field(..., description="Show that the product collection is static (manually selected products).")
    name: StrictStr = Field(..., description="Unique user-defined product collection name.")
    products: Optional[conlist(ProductCollectionsCreateDynamicRequestBodyProductsItem)] = Field(None, description="Defines a set of products for a `STATIC` product collection type.")
    __properties = ["type", "name", "products"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('STATIC', 'AUTO_UPDATE',):
            raise ValueError("must be one of enum values ('STATIC', 'AUTO_UPDATE')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ProductCollectionsCreateStaticRequestBody:
        """Create an instance of ProductCollectionsCreateStaticRequestBody from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in products (list)
        _items = []
        if self.products:
            for _item in self.products:
                if _item:
                    _items.append(_item.to_dict())
            _dict['products'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ProductCollectionsCreateStaticRequestBody:
        """Create an instance of ProductCollectionsCreateStaticRequestBody from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProductCollectionsCreateStaticRequestBody.parse_obj(obj)

        _obj = ProductCollectionsCreateStaticRequestBody.parse_obj({
            "type": obj.get("type") if obj.get("type") is not None else 'STATIC',
            "name": obj.get("name"),
            "products": [ProductCollectionsCreateDynamicRequestBodyProductsItem.from_dict(_item) for _item in obj.get("products")] if obj.get("products") is not None else None
        })
        return _obj


