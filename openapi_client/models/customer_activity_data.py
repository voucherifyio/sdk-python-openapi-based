# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from openapi_client.models.event_customer_active_campaign_failed import EventCustomerActiveCampaignFailed
from openapi_client.models.event_customer_active_campaign_recovered import EventCustomerActiveCampaignRecovered
from openapi_client.models.event_customer_active_campaign_sent import EventCustomerActiveCampaignSent
from openapi_client.models.event_customer_batch_failed import EventCustomerBatchFailed
from openapi_client.models.event_customer_batch_recovered import EventCustomerBatchRecovered
from openapi_client.models.event_customer_batch_sent import EventCustomerBatchSent
from openapi_client.models.event_customer_braze_failed import EventCustomerBrazeFailed
from openapi_client.models.event_customer_braze_recovered import EventCustomerBrazeRecovered
from openapi_client.models.event_customer_braze_sent import EventCustomerBrazeSent
from openapi_client.models.event_customer_confirmed import EventCustomerConfirmed
from openapi_client.models.event_customer_consents_given import EventCustomerConsentsGiven
from openapi_client.models.event_customer_consents_revoked import EventCustomerConsentsRevoked
from openapi_client.models.event_customer_created import EventCustomerCreated
from openapi_client.models.event_customer_custom_event import EventCustomerCustomEvent
from openapi_client.models.event_customer_deleted import EventCustomerDeleted
from openapi_client.models.event_customer_email_failed import EventCustomerEmailFailed
from openapi_client.models.event_customer_email_recovered import EventCustomerEmailRecovered
from openapi_client.models.event_customer_email_sent import EventCustomerEmailSent
from openapi_client.models.event_customer_gift_voucher_balance_added import EventCustomerGiftVoucherBalanceAdded
from openapi_client.models.event_customer_intercom_failed import EventCustomerIntercomFailed
from openapi_client.models.event_customer_intercom_recovered import EventCustomerIntercomRecovered
from openapi_client.models.event_customer_intercom_sent import EventCustomerIntercomSent
from openapi_client.models.event_customer_klaviyo_failed import EventCustomerKlaviyoFailed
from openapi_client.models.event_customer_klaviyo_recovered import EventCustomerKlaviyoRecovered
from openapi_client.models.event_customer_klaviyo_sent import EventCustomerKlaviyoSent
from openapi_client.models.event_customer_loyalty_card_points_added import EventCustomerLoyaltyCardPointsAdded
from openapi_client.models.event_customer_loyalty_card_points_transferred import EventCustomerLoyaltyCardPointsTransferred
from openapi_client.models.event_customer_loyalty_tier_downgraded import EventCustomerLoyaltyTierDowngraded
from openapi_client.models.event_customer_loyalty_tier_expiration_changed import EventCustomerLoyaltyTierExpirationChanged
from openapi_client.models.event_customer_loyalty_tier_joined import EventCustomerLoyaltyTierJoined
from openapi_client.models.event_customer_loyalty_tier_left import EventCustomerLoyaltyTierLeft
from openapi_client.models.event_customer_loyalty_tier_prolonged import EventCustomerLoyaltyTierProlonged
from openapi_client.models.event_customer_loyalty_tier_upgraded import EventCustomerLoyaltyTierUpgraded
from openapi_client.models.event_customer_loyalty_updated import EventCustomerLoyaltyUpdated
from openapi_client.models.event_customer_mailchimp_failed import EventCustomerMailchimpFailed
from openapi_client.models.event_customer_mailchimp_recovered import EventCustomerMailchimpRecovered
from openapi_client.models.event_customer_mailchimp_sent import EventCustomerMailchimpSent
from openapi_client.models.event_customer_order_canceled import EventCustomerOrderCanceled
from openapi_client.models.event_customer_order_created import EventCustomerOrderCreated
from openapi_client.models.event_customer_order_fulfilled import EventCustomerOrderFulfilled
from openapi_client.models.event_customer_order_paid import EventCustomerOrderPaid
from openapi_client.models.event_customer_order_processing import EventCustomerOrderProcessing
from openapi_client.models.event_customer_order_updated import EventCustomerOrderUpdated
from openapi_client.models.event_customer_publication_failed import EventCustomerPublicationFailed
from openapi_client.models.event_customer_publication_succeeded import EventCustomerPublicationSucceeded
from openapi_client.models.event_customer_redemption_failed import EventCustomerRedemptionFailed
from openapi_client.models.event_customer_redemption_rollback_failed import EventCustomerRedemptionRollbackFailed
from openapi_client.models.event_customer_redemption_rollback_succeeded import EventCustomerRedemptionRollbackSucceeded
from openapi_client.models.event_customer_redemption_succeeded import EventCustomerRedemptionSucceeded
from openapi_client.models.event_customer_referred import EventCustomerReferred
from openapi_client.models.event_customer_reward_redemptions_completed import EventCustomerRewardRedemptionsCompleted
from openapi_client.models.event_customer_reward_redemptions_created import EventCustomerRewardRedemptionsCreated
from openapi_client.models.event_customer_reward_redemptions_pending import EventCustomerRewardRedemptionsPending
from openapi_client.models.event_customer_reward_redemptions_rolled_back import EventCustomerRewardRedemptionsRolledBack
from openapi_client.models.event_customer_rewarded import EventCustomerRewarded
from openapi_client.models.event_customer_rewarded_loyalty_points import EventCustomerRewardedLoyaltyPoints
from openapi_client.models.event_customer_segment_entered import EventCustomerSegmentEntered
from openapi_client.models.event_customer_segment_left import EventCustomerSegmentLeft
from openapi_client.models.event_customer_shopify_failed import EventCustomerShopifyFailed
from openapi_client.models.event_customer_shopify_recovered import EventCustomerShopifyRecovered
from openapi_client.models.event_customer_shopify_sent import EventCustomerShopifySent
from openapi_client.models.event_customer_sms_failed import EventCustomerSmsFailed
from openapi_client.models.event_customer_sms_recovered import EventCustomerSmsRecovered
from openapi_client.models.event_customer_sms_sent import EventCustomerSmsSent
from openapi_client.models.event_customer_updated import EventCustomerUpdated
from openapi_client.models.event_customer_validation_failed import EventCustomerValidationFailed
from openapi_client.models.event_customer_validation_succeeded import EventCustomerValidationSucceeded
from openapi_client.models.event_customer_voucher_deleted import EventCustomerVoucherDeleted
from openapi_client.models.event_customer_vouchers_loyalty_points_expired import EventCustomerVouchersLoyaltyPointsExpired
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

CUSTOMER_ACTIVITY_DATA_ONE_OF_SCHEMAS = ["EventCustomerActiveCampaignFailed", "EventCustomerActiveCampaignRecovered", "EventCustomerActiveCampaignSent", "EventCustomerBatchFailed", "EventCustomerBatchRecovered", "EventCustomerBatchSent", "EventCustomerBrazeFailed", "EventCustomerBrazeRecovered", "EventCustomerBrazeSent", "EventCustomerConfirmed", "EventCustomerConsentsGiven", "EventCustomerConsentsRevoked", "EventCustomerCreated", "EventCustomerCustomEvent", "EventCustomerDeleted", "EventCustomerEmailFailed", "EventCustomerEmailRecovered", "EventCustomerEmailSent", "EventCustomerGiftVoucherBalanceAdded", "EventCustomerIntercomFailed", "EventCustomerIntercomRecovered", "EventCustomerIntercomSent", "EventCustomerKlaviyoFailed", "EventCustomerKlaviyoRecovered", "EventCustomerKlaviyoSent", "EventCustomerLoyaltyCardPointsAdded", "EventCustomerLoyaltyCardPointsTransferred", "EventCustomerLoyaltyTierDowngraded", "EventCustomerLoyaltyTierExpirationChanged", "EventCustomerLoyaltyTierJoined", "EventCustomerLoyaltyTierLeft", "EventCustomerLoyaltyTierProlonged", "EventCustomerLoyaltyTierUpgraded", "EventCustomerLoyaltyUpdated", "EventCustomerMailchimpFailed", "EventCustomerMailchimpRecovered", "EventCustomerMailchimpSent", "EventCustomerOrderCanceled", "EventCustomerOrderCreated", "EventCustomerOrderFulfilled", "EventCustomerOrderPaid", "EventCustomerOrderProcessing", "EventCustomerOrderUpdated", "EventCustomerPublicationFailed", "EventCustomerPublicationSucceeded", "EventCustomerRedemptionFailed", "EventCustomerRedemptionRollbackFailed", "EventCustomerRedemptionRollbackSucceeded", "EventCustomerRedemptionSucceeded", "EventCustomerReferred", "EventCustomerRewardRedemptionsCompleted", "EventCustomerRewardRedemptionsCreated", "EventCustomerRewardRedemptionsPending", "EventCustomerRewardRedemptionsRolledBack", "EventCustomerRewarded", "EventCustomerRewardedLoyaltyPoints", "EventCustomerSegmentEntered", "EventCustomerSegmentLeft", "EventCustomerShopifyFailed", "EventCustomerShopifyRecovered", "EventCustomerShopifySent", "EventCustomerSmsFailed", "EventCustomerSmsRecovered", "EventCustomerSmsSent", "EventCustomerUpdated", "EventCustomerValidationFailed", "EventCustomerValidationSucceeded", "EventCustomerVoucherDeleted", "EventCustomerVouchersLoyaltyPointsExpired"]

class CustomerActivityData(BaseModel):
    """
    Event data object schema.
    """
    # data type: EventCustomerConfirmed
    oneof_schema_1_validator: Optional[EventCustomerConfirmed] = None
    # data type: EventCustomerCreated
    oneof_schema_2_validator: Optional[EventCustomerCreated] = None
    # data type: EventCustomerUpdated
    oneof_schema_3_validator: Optional[EventCustomerUpdated] = None
    # data type: EventCustomerDeleted
    oneof_schema_4_validator: Optional[EventCustomerDeleted] = None
    # data type: EventCustomerReferred
    oneof_schema_5_validator: Optional[EventCustomerReferred] = None
    # data type: EventCustomerCustomEvent
    oneof_schema_6_validator: Optional[EventCustomerCustomEvent] = None
    # data type: EventCustomerSegmentEntered
    oneof_schema_7_validator: Optional[EventCustomerSegmentEntered] = None
    # data type: EventCustomerSegmentLeft
    oneof_schema_8_validator: Optional[EventCustomerSegmentLeft] = None
    # data type: EventCustomerSmsSent
    oneof_schema_9_validator: Optional[EventCustomerSmsSent] = None
    # data type: EventCustomerSmsRecovered
    oneof_schema_10_validator: Optional[EventCustomerSmsRecovered] = None
    # data type: EventCustomerSmsFailed
    oneof_schema_11_validator: Optional[EventCustomerSmsFailed] = None
    # data type: EventCustomerEmailSent
    oneof_schema_12_validator: Optional[EventCustomerEmailSent] = None
    # data type: EventCustomerEmailRecovered
    oneof_schema_13_validator: Optional[EventCustomerEmailRecovered] = None
    # data type: EventCustomerEmailFailed
    oneof_schema_14_validator: Optional[EventCustomerEmailFailed] = None
    # data type: EventCustomerActiveCampaignSent
    oneof_schema_15_validator: Optional[EventCustomerActiveCampaignSent] = None
    # data type: EventCustomerActiveCampaignRecovered
    oneof_schema_16_validator: Optional[EventCustomerActiveCampaignRecovered] = None
    # data type: EventCustomerActiveCampaignFailed
    oneof_schema_17_validator: Optional[EventCustomerActiveCampaignFailed] = None
    # data type: EventCustomerBrazeSent
    oneof_schema_18_validator: Optional[EventCustomerBrazeSent] = None
    # data type: EventCustomerBrazeRecovered
    oneof_schema_19_validator: Optional[EventCustomerBrazeRecovered] = None
    # data type: EventCustomerBrazeFailed
    oneof_schema_20_validator: Optional[EventCustomerBrazeFailed] = None
    # data type: EventCustomerMailchimpSent
    oneof_schema_21_validator: Optional[EventCustomerMailchimpSent] = None
    # data type: EventCustomerMailchimpRecovered
    oneof_schema_22_validator: Optional[EventCustomerMailchimpRecovered] = None
    # data type: EventCustomerMailchimpFailed
    oneof_schema_23_validator: Optional[EventCustomerMailchimpFailed] = None
    # data type: EventCustomerIntercomSent
    oneof_schema_24_validator: Optional[EventCustomerIntercomSent] = None
    # data type: EventCustomerIntercomRecovered
    oneof_schema_25_validator: Optional[EventCustomerIntercomRecovered] = None
    # data type: EventCustomerIntercomFailed
    oneof_schema_26_validator: Optional[EventCustomerIntercomFailed] = None
    # data type: EventCustomerShopifySent
    oneof_schema_27_validator: Optional[EventCustomerShopifySent] = None
    # data type: EventCustomerShopifyRecovered
    oneof_schema_28_validator: Optional[EventCustomerShopifyRecovered] = None
    # data type: EventCustomerShopifyFailed
    oneof_schema_29_validator: Optional[EventCustomerShopifyFailed] = None
    # data type: EventCustomerKlaviyoSent
    oneof_schema_30_validator: Optional[EventCustomerKlaviyoSent] = None
    # data type: EventCustomerKlaviyoRecovered
    oneof_schema_31_validator: Optional[EventCustomerKlaviyoRecovered] = None
    # data type: EventCustomerKlaviyoFailed
    oneof_schema_32_validator: Optional[EventCustomerKlaviyoFailed] = None
    # data type: EventCustomerBatchSent
    oneof_schema_33_validator: Optional[EventCustomerBatchSent] = None
    # data type: EventCustomerBatchRecovered
    oneof_schema_34_validator: Optional[EventCustomerBatchRecovered] = None
    # data type: EventCustomerBatchFailed
    oneof_schema_35_validator: Optional[EventCustomerBatchFailed] = None
    # data type: EventCustomerRewarded
    oneof_schema_36_validator: Optional[EventCustomerRewarded] = None
    # data type: EventCustomerRewardedLoyaltyPoints
    oneof_schema_37_validator: Optional[EventCustomerRewardedLoyaltyPoints] = None
    # data type: EventCustomerGiftVoucherBalanceAdded
    oneof_schema_38_validator: Optional[EventCustomerGiftVoucherBalanceAdded] = None
    # data type: EventCustomerLoyaltyCardPointsAdded
    oneof_schema_39_validator: Optional[EventCustomerLoyaltyCardPointsAdded] = None
    # data type: EventCustomerLoyaltyCardPointsTransferred
    oneof_schema_40_validator: Optional[EventCustomerLoyaltyCardPointsTransferred] = None
    # data type: EventCustomerVouchersLoyaltyPointsExpired
    oneof_schema_41_validator: Optional[EventCustomerVouchersLoyaltyPointsExpired] = None
    # data type: EventCustomerVoucherDeleted
    oneof_schema_42_validator: Optional[EventCustomerVoucherDeleted] = None
    # data type: EventCustomerPublicationSucceeded
    oneof_schema_43_validator: Optional[EventCustomerPublicationSucceeded] = None
    # data type: EventCustomerPublicationFailed
    oneof_schema_44_validator: Optional[EventCustomerPublicationFailed] = None
    # data type: EventCustomerValidationSucceeded
    oneof_schema_45_validator: Optional[EventCustomerValidationSucceeded] = None
    # data type: EventCustomerValidationFailed
    oneof_schema_46_validator: Optional[EventCustomerValidationFailed] = None
    # data type: EventCustomerRedemptionSucceeded
    oneof_schema_47_validator: Optional[EventCustomerRedemptionSucceeded] = None
    # data type: EventCustomerRedemptionFailed
    oneof_schema_48_validator: Optional[EventCustomerRedemptionFailed] = None
    # data type: EventCustomerRedemptionRollbackSucceeded
    oneof_schema_49_validator: Optional[EventCustomerRedemptionRollbackSucceeded] = None
    # data type: EventCustomerRedemptionRollbackFailed
    oneof_schema_50_validator: Optional[EventCustomerRedemptionRollbackFailed] = None
    # data type: EventCustomerConsentsGiven
    oneof_schema_51_validator: Optional[EventCustomerConsentsGiven] = None
    # data type: EventCustomerConsentsRevoked
    oneof_schema_52_validator: Optional[EventCustomerConsentsRevoked] = None
    # data type: EventCustomerOrderCanceled
    oneof_schema_53_validator: Optional[EventCustomerOrderCanceled] = None
    # data type: EventCustomerOrderCreated
    oneof_schema_54_validator: Optional[EventCustomerOrderCreated] = None
    # data type: EventCustomerOrderFulfilled
    oneof_schema_55_validator: Optional[EventCustomerOrderFulfilled] = None
    # data type: EventCustomerOrderPaid
    oneof_schema_56_validator: Optional[EventCustomerOrderPaid] = None
    # data type: EventCustomerOrderProcessing
    oneof_schema_57_validator: Optional[EventCustomerOrderProcessing] = None
    # data type: EventCustomerOrderUpdated
    oneof_schema_58_validator: Optional[EventCustomerOrderUpdated] = None
    # data type: EventCustomerRewardRedemptionsCreated
    oneof_schema_59_validator: Optional[EventCustomerRewardRedemptionsCreated] = None
    # data type: EventCustomerRewardRedemptionsPending
    oneof_schema_60_validator: Optional[EventCustomerRewardRedemptionsPending] = None
    # data type: EventCustomerRewardRedemptionsCompleted
    oneof_schema_61_validator: Optional[EventCustomerRewardRedemptionsCompleted] = None
    # data type: EventCustomerRewardRedemptionsRolledBack
    oneof_schema_62_validator: Optional[EventCustomerRewardRedemptionsRolledBack] = None
    # data type: EventCustomerLoyaltyUpdated
    oneof_schema_63_validator: Optional[EventCustomerLoyaltyUpdated] = None
    # data type: EventCustomerLoyaltyTierUpgraded
    oneof_schema_64_validator: Optional[EventCustomerLoyaltyTierUpgraded] = None
    # data type: EventCustomerLoyaltyTierDowngraded
    oneof_schema_65_validator: Optional[EventCustomerLoyaltyTierDowngraded] = None
    # data type: EventCustomerLoyaltyTierProlonged
    oneof_schema_66_validator: Optional[EventCustomerLoyaltyTierProlonged] = None
    # data type: EventCustomerLoyaltyTierExpirationChanged
    oneof_schema_67_validator: Optional[EventCustomerLoyaltyTierExpirationChanged] = None
    # data type: EventCustomerLoyaltyTierJoined
    oneof_schema_68_validator: Optional[EventCustomerLoyaltyTierJoined] = None
    # data type: EventCustomerLoyaltyTierLeft
    oneof_schema_69_validator: Optional[EventCustomerLoyaltyTierLeft] = None
    if TYPE_CHECKING:
        actual_instance: Union[EventCustomerActiveCampaignFailed, EventCustomerActiveCampaignRecovered, EventCustomerActiveCampaignSent, EventCustomerBatchFailed, EventCustomerBatchRecovered, EventCustomerBatchSent, EventCustomerBrazeFailed, EventCustomerBrazeRecovered, EventCustomerBrazeSent, EventCustomerConfirmed, EventCustomerConsentsGiven, EventCustomerConsentsRevoked, EventCustomerCreated, EventCustomerCustomEvent, EventCustomerDeleted, EventCustomerEmailFailed, EventCustomerEmailRecovered, EventCustomerEmailSent, EventCustomerGiftVoucherBalanceAdded, EventCustomerIntercomFailed, EventCustomerIntercomRecovered, EventCustomerIntercomSent, EventCustomerKlaviyoFailed, EventCustomerKlaviyoRecovered, EventCustomerKlaviyoSent, EventCustomerLoyaltyCardPointsAdded, EventCustomerLoyaltyCardPointsTransferred, EventCustomerLoyaltyTierDowngraded, EventCustomerLoyaltyTierExpirationChanged, EventCustomerLoyaltyTierJoined, EventCustomerLoyaltyTierLeft, EventCustomerLoyaltyTierProlonged, EventCustomerLoyaltyTierUpgraded, EventCustomerLoyaltyUpdated, EventCustomerMailchimpFailed, EventCustomerMailchimpRecovered, EventCustomerMailchimpSent, EventCustomerOrderCanceled, EventCustomerOrderCreated, EventCustomerOrderFulfilled, EventCustomerOrderPaid, EventCustomerOrderProcessing, EventCustomerOrderUpdated, EventCustomerPublicationFailed, EventCustomerPublicationSucceeded, EventCustomerRedemptionFailed, EventCustomerRedemptionRollbackFailed, EventCustomerRedemptionRollbackSucceeded, EventCustomerRedemptionSucceeded, EventCustomerReferred, EventCustomerRewardRedemptionsCompleted, EventCustomerRewardRedemptionsCreated, EventCustomerRewardRedemptionsPending, EventCustomerRewardRedemptionsRolledBack, EventCustomerRewarded, EventCustomerRewardedLoyaltyPoints, EventCustomerSegmentEntered, EventCustomerSegmentLeft, EventCustomerShopifyFailed, EventCustomerShopifyRecovered, EventCustomerShopifySent, EventCustomerSmsFailed, EventCustomerSmsRecovered, EventCustomerSmsSent, EventCustomerUpdated, EventCustomerValidationFailed, EventCustomerValidationSucceeded, EventCustomerVoucherDeleted, EventCustomerVouchersLoyaltyPointsExpired]
    else:
        actual_instance: Any
    one_of_schemas: List[str] = Field(CUSTOMER_ACTIVITY_DATA_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = CustomerActivityData.construct()
        error_messages = []
        match = 0
        # validate data type: EventCustomerConfirmed
        if not isinstance(v, EventCustomerConfirmed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerConfirmed`")
        else:
            match += 1
        # validate data type: EventCustomerCreated
        if not isinstance(v, EventCustomerCreated):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerCreated`")
        else:
            match += 1
        # validate data type: EventCustomerUpdated
        if not isinstance(v, EventCustomerUpdated):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerUpdated`")
        else:
            match += 1
        # validate data type: EventCustomerDeleted
        if not isinstance(v, EventCustomerDeleted):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerDeleted`")
        else:
            match += 1
        # validate data type: EventCustomerReferred
        if not isinstance(v, EventCustomerReferred):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerReferred`")
        else:
            match += 1
        # validate data type: EventCustomerCustomEvent
        if not isinstance(v, EventCustomerCustomEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerCustomEvent`")
        else:
            match += 1
        # validate data type: EventCustomerSegmentEntered
        if not isinstance(v, EventCustomerSegmentEntered):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerSegmentEntered`")
        else:
            match += 1
        # validate data type: EventCustomerSegmentLeft
        if not isinstance(v, EventCustomerSegmentLeft):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerSegmentLeft`")
        else:
            match += 1
        # validate data type: EventCustomerSmsSent
        if not isinstance(v, EventCustomerSmsSent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerSmsSent`")
        else:
            match += 1
        # validate data type: EventCustomerSmsRecovered
        if not isinstance(v, EventCustomerSmsRecovered):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerSmsRecovered`")
        else:
            match += 1
        # validate data type: EventCustomerSmsFailed
        if not isinstance(v, EventCustomerSmsFailed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerSmsFailed`")
        else:
            match += 1
        # validate data type: EventCustomerEmailSent
        if not isinstance(v, EventCustomerEmailSent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerEmailSent`")
        else:
            match += 1
        # validate data type: EventCustomerEmailRecovered
        if not isinstance(v, EventCustomerEmailRecovered):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerEmailRecovered`")
        else:
            match += 1
        # validate data type: EventCustomerEmailFailed
        if not isinstance(v, EventCustomerEmailFailed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerEmailFailed`")
        else:
            match += 1
        # validate data type: EventCustomerActiveCampaignSent
        if not isinstance(v, EventCustomerActiveCampaignSent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerActiveCampaignSent`")
        else:
            match += 1
        # validate data type: EventCustomerActiveCampaignRecovered
        if not isinstance(v, EventCustomerActiveCampaignRecovered):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerActiveCampaignRecovered`")
        else:
            match += 1
        # validate data type: EventCustomerActiveCampaignFailed
        if not isinstance(v, EventCustomerActiveCampaignFailed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerActiveCampaignFailed`")
        else:
            match += 1
        # validate data type: EventCustomerBrazeSent
        if not isinstance(v, EventCustomerBrazeSent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerBrazeSent`")
        else:
            match += 1
        # validate data type: EventCustomerBrazeRecovered
        if not isinstance(v, EventCustomerBrazeRecovered):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerBrazeRecovered`")
        else:
            match += 1
        # validate data type: EventCustomerBrazeFailed
        if not isinstance(v, EventCustomerBrazeFailed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerBrazeFailed`")
        else:
            match += 1
        # validate data type: EventCustomerMailchimpSent
        if not isinstance(v, EventCustomerMailchimpSent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerMailchimpSent`")
        else:
            match += 1
        # validate data type: EventCustomerMailchimpRecovered
        if not isinstance(v, EventCustomerMailchimpRecovered):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerMailchimpRecovered`")
        else:
            match += 1
        # validate data type: EventCustomerMailchimpFailed
        if not isinstance(v, EventCustomerMailchimpFailed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerMailchimpFailed`")
        else:
            match += 1
        # validate data type: EventCustomerIntercomSent
        if not isinstance(v, EventCustomerIntercomSent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerIntercomSent`")
        else:
            match += 1
        # validate data type: EventCustomerIntercomRecovered
        if not isinstance(v, EventCustomerIntercomRecovered):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerIntercomRecovered`")
        else:
            match += 1
        # validate data type: EventCustomerIntercomFailed
        if not isinstance(v, EventCustomerIntercomFailed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerIntercomFailed`")
        else:
            match += 1
        # validate data type: EventCustomerShopifySent
        if not isinstance(v, EventCustomerShopifySent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerShopifySent`")
        else:
            match += 1
        # validate data type: EventCustomerShopifyRecovered
        if not isinstance(v, EventCustomerShopifyRecovered):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerShopifyRecovered`")
        else:
            match += 1
        # validate data type: EventCustomerShopifyFailed
        if not isinstance(v, EventCustomerShopifyFailed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerShopifyFailed`")
        else:
            match += 1
        # validate data type: EventCustomerKlaviyoSent
        if not isinstance(v, EventCustomerKlaviyoSent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerKlaviyoSent`")
        else:
            match += 1
        # validate data type: EventCustomerKlaviyoRecovered
        if not isinstance(v, EventCustomerKlaviyoRecovered):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerKlaviyoRecovered`")
        else:
            match += 1
        # validate data type: EventCustomerKlaviyoFailed
        if not isinstance(v, EventCustomerKlaviyoFailed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerKlaviyoFailed`")
        else:
            match += 1
        # validate data type: EventCustomerBatchSent
        if not isinstance(v, EventCustomerBatchSent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerBatchSent`")
        else:
            match += 1
        # validate data type: EventCustomerBatchRecovered
        if not isinstance(v, EventCustomerBatchRecovered):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerBatchRecovered`")
        else:
            match += 1
        # validate data type: EventCustomerBatchFailed
        if not isinstance(v, EventCustomerBatchFailed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerBatchFailed`")
        else:
            match += 1
        # validate data type: EventCustomerRewarded
        if not isinstance(v, EventCustomerRewarded):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerRewarded`")
        else:
            match += 1
        # validate data type: EventCustomerRewardedLoyaltyPoints
        if not isinstance(v, EventCustomerRewardedLoyaltyPoints):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerRewardedLoyaltyPoints`")
        else:
            match += 1
        # validate data type: EventCustomerGiftVoucherBalanceAdded
        if not isinstance(v, EventCustomerGiftVoucherBalanceAdded):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerGiftVoucherBalanceAdded`")
        else:
            match += 1
        # validate data type: EventCustomerLoyaltyCardPointsAdded
        if not isinstance(v, EventCustomerLoyaltyCardPointsAdded):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerLoyaltyCardPointsAdded`")
        else:
            match += 1
        # validate data type: EventCustomerLoyaltyCardPointsTransferred
        if not isinstance(v, EventCustomerLoyaltyCardPointsTransferred):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerLoyaltyCardPointsTransferred`")
        else:
            match += 1
        # validate data type: EventCustomerVouchersLoyaltyPointsExpired
        if not isinstance(v, EventCustomerVouchersLoyaltyPointsExpired):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerVouchersLoyaltyPointsExpired`")
        else:
            match += 1
        # validate data type: EventCustomerVoucherDeleted
        if not isinstance(v, EventCustomerVoucherDeleted):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerVoucherDeleted`")
        else:
            match += 1
        # validate data type: EventCustomerPublicationSucceeded
        if not isinstance(v, EventCustomerPublicationSucceeded):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerPublicationSucceeded`")
        else:
            match += 1
        # validate data type: EventCustomerPublicationFailed
        if not isinstance(v, EventCustomerPublicationFailed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerPublicationFailed`")
        else:
            match += 1
        # validate data type: EventCustomerValidationSucceeded
        if not isinstance(v, EventCustomerValidationSucceeded):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerValidationSucceeded`")
        else:
            match += 1
        # validate data type: EventCustomerValidationFailed
        if not isinstance(v, EventCustomerValidationFailed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerValidationFailed`")
        else:
            match += 1
        # validate data type: EventCustomerRedemptionSucceeded
        if not isinstance(v, EventCustomerRedemptionSucceeded):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerRedemptionSucceeded`")
        else:
            match += 1
        # validate data type: EventCustomerRedemptionFailed
        if not isinstance(v, EventCustomerRedemptionFailed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerRedemptionFailed`")
        else:
            match += 1
        # validate data type: EventCustomerRedemptionRollbackSucceeded
        if not isinstance(v, EventCustomerRedemptionRollbackSucceeded):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerRedemptionRollbackSucceeded`")
        else:
            match += 1
        # validate data type: EventCustomerRedemptionRollbackFailed
        if not isinstance(v, EventCustomerRedemptionRollbackFailed):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerRedemptionRollbackFailed`")
        else:
            match += 1
        # validate data type: EventCustomerConsentsGiven
        if not isinstance(v, EventCustomerConsentsGiven):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerConsentsGiven`")
        else:
            match += 1
        # validate data type: EventCustomerConsentsRevoked
        if not isinstance(v, EventCustomerConsentsRevoked):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerConsentsRevoked`")
        else:
            match += 1
        # validate data type: EventCustomerOrderCanceled
        if not isinstance(v, EventCustomerOrderCanceled):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerOrderCanceled`")
        else:
            match += 1
        # validate data type: EventCustomerOrderCreated
        if not isinstance(v, EventCustomerOrderCreated):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerOrderCreated`")
        else:
            match += 1
        # validate data type: EventCustomerOrderFulfilled
        if not isinstance(v, EventCustomerOrderFulfilled):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerOrderFulfilled`")
        else:
            match += 1
        # validate data type: EventCustomerOrderPaid
        if not isinstance(v, EventCustomerOrderPaid):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerOrderPaid`")
        else:
            match += 1
        # validate data type: EventCustomerOrderProcessing
        if not isinstance(v, EventCustomerOrderProcessing):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerOrderProcessing`")
        else:
            match += 1
        # validate data type: EventCustomerOrderUpdated
        if not isinstance(v, EventCustomerOrderUpdated):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerOrderUpdated`")
        else:
            match += 1
        # validate data type: EventCustomerRewardRedemptionsCreated
        if not isinstance(v, EventCustomerRewardRedemptionsCreated):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerRewardRedemptionsCreated`")
        else:
            match += 1
        # validate data type: EventCustomerRewardRedemptionsPending
        if not isinstance(v, EventCustomerRewardRedemptionsPending):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerRewardRedemptionsPending`")
        else:
            match += 1
        # validate data type: EventCustomerRewardRedemptionsCompleted
        if not isinstance(v, EventCustomerRewardRedemptionsCompleted):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerRewardRedemptionsCompleted`")
        else:
            match += 1
        # validate data type: EventCustomerRewardRedemptionsRolledBack
        if not isinstance(v, EventCustomerRewardRedemptionsRolledBack):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerRewardRedemptionsRolledBack`")
        else:
            match += 1
        # validate data type: EventCustomerLoyaltyUpdated
        if not isinstance(v, EventCustomerLoyaltyUpdated):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerLoyaltyUpdated`")
        else:
            match += 1
        # validate data type: EventCustomerLoyaltyTierUpgraded
        if not isinstance(v, EventCustomerLoyaltyTierUpgraded):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerLoyaltyTierUpgraded`")
        else:
            match += 1
        # validate data type: EventCustomerLoyaltyTierDowngraded
        if not isinstance(v, EventCustomerLoyaltyTierDowngraded):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerLoyaltyTierDowngraded`")
        else:
            match += 1
        # validate data type: EventCustomerLoyaltyTierProlonged
        if not isinstance(v, EventCustomerLoyaltyTierProlonged):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerLoyaltyTierProlonged`")
        else:
            match += 1
        # validate data type: EventCustomerLoyaltyTierExpirationChanged
        if not isinstance(v, EventCustomerLoyaltyTierExpirationChanged):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerLoyaltyTierExpirationChanged`")
        else:
            match += 1
        # validate data type: EventCustomerLoyaltyTierJoined
        if not isinstance(v, EventCustomerLoyaltyTierJoined):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerLoyaltyTierJoined`")
        else:
            match += 1
        # validate data type: EventCustomerLoyaltyTierLeft
        if not isinstance(v, EventCustomerLoyaltyTierLeft):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventCustomerLoyaltyTierLeft`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in CustomerActivityData with oneOf schemas: EventCustomerActiveCampaignFailed, EventCustomerActiveCampaignRecovered, EventCustomerActiveCampaignSent, EventCustomerBatchFailed, EventCustomerBatchRecovered, EventCustomerBatchSent, EventCustomerBrazeFailed, EventCustomerBrazeRecovered, EventCustomerBrazeSent, EventCustomerConfirmed, EventCustomerConsentsGiven, EventCustomerConsentsRevoked, EventCustomerCreated, EventCustomerCustomEvent, EventCustomerDeleted, EventCustomerEmailFailed, EventCustomerEmailRecovered, EventCustomerEmailSent, EventCustomerGiftVoucherBalanceAdded, EventCustomerIntercomFailed, EventCustomerIntercomRecovered, EventCustomerIntercomSent, EventCustomerKlaviyoFailed, EventCustomerKlaviyoRecovered, EventCustomerKlaviyoSent, EventCustomerLoyaltyCardPointsAdded, EventCustomerLoyaltyCardPointsTransferred, EventCustomerLoyaltyTierDowngraded, EventCustomerLoyaltyTierExpirationChanged, EventCustomerLoyaltyTierJoined, EventCustomerLoyaltyTierLeft, EventCustomerLoyaltyTierProlonged, EventCustomerLoyaltyTierUpgraded, EventCustomerLoyaltyUpdated, EventCustomerMailchimpFailed, EventCustomerMailchimpRecovered, EventCustomerMailchimpSent, EventCustomerOrderCanceled, EventCustomerOrderCreated, EventCustomerOrderFulfilled, EventCustomerOrderPaid, EventCustomerOrderProcessing, EventCustomerOrderUpdated, EventCustomerPublicationFailed, EventCustomerPublicationSucceeded, EventCustomerRedemptionFailed, EventCustomerRedemptionRollbackFailed, EventCustomerRedemptionRollbackSucceeded, EventCustomerRedemptionSucceeded, EventCustomerReferred, EventCustomerRewardRedemptionsCompleted, EventCustomerRewardRedemptionsCreated, EventCustomerRewardRedemptionsPending, EventCustomerRewardRedemptionsRolledBack, EventCustomerRewarded, EventCustomerRewardedLoyaltyPoints, EventCustomerSegmentEntered, EventCustomerSegmentLeft, EventCustomerShopifyFailed, EventCustomerShopifyRecovered, EventCustomerShopifySent, EventCustomerSmsFailed, EventCustomerSmsRecovered, EventCustomerSmsSent, EventCustomerUpdated, EventCustomerValidationFailed, EventCustomerValidationSucceeded, EventCustomerVoucherDeleted, EventCustomerVouchersLoyaltyPointsExpired. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in CustomerActivityData with oneOf schemas: EventCustomerActiveCampaignFailed, EventCustomerActiveCampaignRecovered, EventCustomerActiveCampaignSent, EventCustomerBatchFailed, EventCustomerBatchRecovered, EventCustomerBatchSent, EventCustomerBrazeFailed, EventCustomerBrazeRecovered, EventCustomerBrazeSent, EventCustomerConfirmed, EventCustomerConsentsGiven, EventCustomerConsentsRevoked, EventCustomerCreated, EventCustomerCustomEvent, EventCustomerDeleted, EventCustomerEmailFailed, EventCustomerEmailRecovered, EventCustomerEmailSent, EventCustomerGiftVoucherBalanceAdded, EventCustomerIntercomFailed, EventCustomerIntercomRecovered, EventCustomerIntercomSent, EventCustomerKlaviyoFailed, EventCustomerKlaviyoRecovered, EventCustomerKlaviyoSent, EventCustomerLoyaltyCardPointsAdded, EventCustomerLoyaltyCardPointsTransferred, EventCustomerLoyaltyTierDowngraded, EventCustomerLoyaltyTierExpirationChanged, EventCustomerLoyaltyTierJoined, EventCustomerLoyaltyTierLeft, EventCustomerLoyaltyTierProlonged, EventCustomerLoyaltyTierUpgraded, EventCustomerLoyaltyUpdated, EventCustomerMailchimpFailed, EventCustomerMailchimpRecovered, EventCustomerMailchimpSent, EventCustomerOrderCanceled, EventCustomerOrderCreated, EventCustomerOrderFulfilled, EventCustomerOrderPaid, EventCustomerOrderProcessing, EventCustomerOrderUpdated, EventCustomerPublicationFailed, EventCustomerPublicationSucceeded, EventCustomerRedemptionFailed, EventCustomerRedemptionRollbackFailed, EventCustomerRedemptionRollbackSucceeded, EventCustomerRedemptionSucceeded, EventCustomerReferred, EventCustomerRewardRedemptionsCompleted, EventCustomerRewardRedemptionsCreated, EventCustomerRewardRedemptionsPending, EventCustomerRewardRedemptionsRolledBack, EventCustomerRewarded, EventCustomerRewardedLoyaltyPoints, EventCustomerSegmentEntered, EventCustomerSegmentLeft, EventCustomerShopifyFailed, EventCustomerShopifyRecovered, EventCustomerShopifySent, EventCustomerSmsFailed, EventCustomerSmsRecovered, EventCustomerSmsSent, EventCustomerUpdated, EventCustomerValidationFailed, EventCustomerValidationSucceeded, EventCustomerVoucherDeleted, EventCustomerVouchersLoyaltyPointsExpired. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> CustomerActivityData:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> CustomerActivityData:
        """Returns the object represented by the json string"""
        instance = CustomerActivityData.construct()
        error_messages = []
        match = 0

        # deserialize data into EventCustomerConfirmed
        try:
            instance.actual_instance = EventCustomerConfirmed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerCreated
        try:
            instance.actual_instance = EventCustomerCreated.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerUpdated
        try:
            instance.actual_instance = EventCustomerUpdated.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerDeleted
        try:
            instance.actual_instance = EventCustomerDeleted.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerReferred
        try:
            instance.actual_instance = EventCustomerReferred.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerCustomEvent
        try:
            instance.actual_instance = EventCustomerCustomEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerSegmentEntered
        try:
            instance.actual_instance = EventCustomerSegmentEntered.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerSegmentLeft
        try:
            instance.actual_instance = EventCustomerSegmentLeft.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerSmsSent
        try:
            instance.actual_instance = EventCustomerSmsSent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerSmsRecovered
        try:
            instance.actual_instance = EventCustomerSmsRecovered.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerSmsFailed
        try:
            instance.actual_instance = EventCustomerSmsFailed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerEmailSent
        try:
            instance.actual_instance = EventCustomerEmailSent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerEmailRecovered
        try:
            instance.actual_instance = EventCustomerEmailRecovered.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerEmailFailed
        try:
            instance.actual_instance = EventCustomerEmailFailed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerActiveCampaignSent
        try:
            instance.actual_instance = EventCustomerActiveCampaignSent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerActiveCampaignRecovered
        try:
            instance.actual_instance = EventCustomerActiveCampaignRecovered.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerActiveCampaignFailed
        try:
            instance.actual_instance = EventCustomerActiveCampaignFailed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerBrazeSent
        try:
            instance.actual_instance = EventCustomerBrazeSent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerBrazeRecovered
        try:
            instance.actual_instance = EventCustomerBrazeRecovered.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerBrazeFailed
        try:
            instance.actual_instance = EventCustomerBrazeFailed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerMailchimpSent
        try:
            instance.actual_instance = EventCustomerMailchimpSent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerMailchimpRecovered
        try:
            instance.actual_instance = EventCustomerMailchimpRecovered.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerMailchimpFailed
        try:
            instance.actual_instance = EventCustomerMailchimpFailed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerIntercomSent
        try:
            instance.actual_instance = EventCustomerIntercomSent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerIntercomRecovered
        try:
            instance.actual_instance = EventCustomerIntercomRecovered.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerIntercomFailed
        try:
            instance.actual_instance = EventCustomerIntercomFailed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerShopifySent
        try:
            instance.actual_instance = EventCustomerShopifySent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerShopifyRecovered
        try:
            instance.actual_instance = EventCustomerShopifyRecovered.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerShopifyFailed
        try:
            instance.actual_instance = EventCustomerShopifyFailed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerKlaviyoSent
        try:
            instance.actual_instance = EventCustomerKlaviyoSent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerKlaviyoRecovered
        try:
            instance.actual_instance = EventCustomerKlaviyoRecovered.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerKlaviyoFailed
        try:
            instance.actual_instance = EventCustomerKlaviyoFailed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerBatchSent
        try:
            instance.actual_instance = EventCustomerBatchSent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerBatchRecovered
        try:
            instance.actual_instance = EventCustomerBatchRecovered.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerBatchFailed
        try:
            instance.actual_instance = EventCustomerBatchFailed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerRewarded
        try:
            instance.actual_instance = EventCustomerRewarded.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerRewardedLoyaltyPoints
        try:
            instance.actual_instance = EventCustomerRewardedLoyaltyPoints.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerGiftVoucherBalanceAdded
        try:
            instance.actual_instance = EventCustomerGiftVoucherBalanceAdded.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerLoyaltyCardPointsAdded
        try:
            instance.actual_instance = EventCustomerLoyaltyCardPointsAdded.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerLoyaltyCardPointsTransferred
        try:
            instance.actual_instance = EventCustomerLoyaltyCardPointsTransferred.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerVouchersLoyaltyPointsExpired
        try:
            instance.actual_instance = EventCustomerVouchersLoyaltyPointsExpired.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerVoucherDeleted
        try:
            instance.actual_instance = EventCustomerVoucherDeleted.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerPublicationSucceeded
        try:
            instance.actual_instance = EventCustomerPublicationSucceeded.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerPublicationFailed
        try:
            instance.actual_instance = EventCustomerPublicationFailed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerValidationSucceeded
        try:
            instance.actual_instance = EventCustomerValidationSucceeded.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerValidationFailed
        try:
            instance.actual_instance = EventCustomerValidationFailed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerRedemptionSucceeded
        try:
            instance.actual_instance = EventCustomerRedemptionSucceeded.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerRedemptionFailed
        try:
            instance.actual_instance = EventCustomerRedemptionFailed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerRedemptionRollbackSucceeded
        try:
            instance.actual_instance = EventCustomerRedemptionRollbackSucceeded.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerRedemptionRollbackFailed
        try:
            instance.actual_instance = EventCustomerRedemptionRollbackFailed.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerConsentsGiven
        try:
            instance.actual_instance = EventCustomerConsentsGiven.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerConsentsRevoked
        try:
            instance.actual_instance = EventCustomerConsentsRevoked.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerOrderCanceled
        try:
            instance.actual_instance = EventCustomerOrderCanceled.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerOrderCreated
        try:
            instance.actual_instance = EventCustomerOrderCreated.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerOrderFulfilled
        try:
            instance.actual_instance = EventCustomerOrderFulfilled.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerOrderPaid
        try:
            instance.actual_instance = EventCustomerOrderPaid.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerOrderProcessing
        try:
            instance.actual_instance = EventCustomerOrderProcessing.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerOrderUpdated
        try:
            instance.actual_instance = EventCustomerOrderUpdated.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerRewardRedemptionsCreated
        try:
            instance.actual_instance = EventCustomerRewardRedemptionsCreated.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerRewardRedemptionsPending
        try:
            instance.actual_instance = EventCustomerRewardRedemptionsPending.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerRewardRedemptionsCompleted
        try:
            instance.actual_instance = EventCustomerRewardRedemptionsCompleted.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerRewardRedemptionsRolledBack
        try:
            instance.actual_instance = EventCustomerRewardRedemptionsRolledBack.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerLoyaltyUpdated
        try:
            instance.actual_instance = EventCustomerLoyaltyUpdated.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerLoyaltyTierUpgraded
        try:
            instance.actual_instance = EventCustomerLoyaltyTierUpgraded.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerLoyaltyTierDowngraded
        try:
            instance.actual_instance = EventCustomerLoyaltyTierDowngraded.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerLoyaltyTierProlonged
        try:
            instance.actual_instance = EventCustomerLoyaltyTierProlonged.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerLoyaltyTierExpirationChanged
        try:
            instance.actual_instance = EventCustomerLoyaltyTierExpirationChanged.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerLoyaltyTierJoined
        try:
            instance.actual_instance = EventCustomerLoyaltyTierJoined.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventCustomerLoyaltyTierLeft
        try:
            instance.actual_instance = EventCustomerLoyaltyTierLeft.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into CustomerActivityData with oneOf schemas: EventCustomerActiveCampaignFailed, EventCustomerActiveCampaignRecovered, EventCustomerActiveCampaignSent, EventCustomerBatchFailed, EventCustomerBatchRecovered, EventCustomerBatchSent, EventCustomerBrazeFailed, EventCustomerBrazeRecovered, EventCustomerBrazeSent, EventCustomerConfirmed, EventCustomerConsentsGiven, EventCustomerConsentsRevoked, EventCustomerCreated, EventCustomerCustomEvent, EventCustomerDeleted, EventCustomerEmailFailed, EventCustomerEmailRecovered, EventCustomerEmailSent, EventCustomerGiftVoucherBalanceAdded, EventCustomerIntercomFailed, EventCustomerIntercomRecovered, EventCustomerIntercomSent, EventCustomerKlaviyoFailed, EventCustomerKlaviyoRecovered, EventCustomerKlaviyoSent, EventCustomerLoyaltyCardPointsAdded, EventCustomerLoyaltyCardPointsTransferred, EventCustomerLoyaltyTierDowngraded, EventCustomerLoyaltyTierExpirationChanged, EventCustomerLoyaltyTierJoined, EventCustomerLoyaltyTierLeft, EventCustomerLoyaltyTierProlonged, EventCustomerLoyaltyTierUpgraded, EventCustomerLoyaltyUpdated, EventCustomerMailchimpFailed, EventCustomerMailchimpRecovered, EventCustomerMailchimpSent, EventCustomerOrderCanceled, EventCustomerOrderCreated, EventCustomerOrderFulfilled, EventCustomerOrderPaid, EventCustomerOrderProcessing, EventCustomerOrderUpdated, EventCustomerPublicationFailed, EventCustomerPublicationSucceeded, EventCustomerRedemptionFailed, EventCustomerRedemptionRollbackFailed, EventCustomerRedemptionRollbackSucceeded, EventCustomerRedemptionSucceeded, EventCustomerReferred, EventCustomerRewardRedemptionsCompleted, EventCustomerRewardRedemptionsCreated, EventCustomerRewardRedemptionsPending, EventCustomerRewardRedemptionsRolledBack, EventCustomerRewarded, EventCustomerRewardedLoyaltyPoints, EventCustomerSegmentEntered, EventCustomerSegmentLeft, EventCustomerShopifyFailed, EventCustomerShopifyRecovered, EventCustomerShopifySent, EventCustomerSmsFailed, EventCustomerSmsRecovered, EventCustomerSmsSent, EventCustomerUpdated, EventCustomerValidationFailed, EventCustomerValidationSucceeded, EventCustomerVoucherDeleted, EventCustomerVouchersLoyaltyPointsExpired. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into CustomerActivityData with oneOf schemas: EventCustomerActiveCampaignFailed, EventCustomerActiveCampaignRecovered, EventCustomerActiveCampaignSent, EventCustomerBatchFailed, EventCustomerBatchRecovered, EventCustomerBatchSent, EventCustomerBrazeFailed, EventCustomerBrazeRecovered, EventCustomerBrazeSent, EventCustomerConfirmed, EventCustomerConsentsGiven, EventCustomerConsentsRevoked, EventCustomerCreated, EventCustomerCustomEvent, EventCustomerDeleted, EventCustomerEmailFailed, EventCustomerEmailRecovered, EventCustomerEmailSent, EventCustomerGiftVoucherBalanceAdded, EventCustomerIntercomFailed, EventCustomerIntercomRecovered, EventCustomerIntercomSent, EventCustomerKlaviyoFailed, EventCustomerKlaviyoRecovered, EventCustomerKlaviyoSent, EventCustomerLoyaltyCardPointsAdded, EventCustomerLoyaltyCardPointsTransferred, EventCustomerLoyaltyTierDowngraded, EventCustomerLoyaltyTierExpirationChanged, EventCustomerLoyaltyTierJoined, EventCustomerLoyaltyTierLeft, EventCustomerLoyaltyTierProlonged, EventCustomerLoyaltyTierUpgraded, EventCustomerLoyaltyUpdated, EventCustomerMailchimpFailed, EventCustomerMailchimpRecovered, EventCustomerMailchimpSent, EventCustomerOrderCanceled, EventCustomerOrderCreated, EventCustomerOrderFulfilled, EventCustomerOrderPaid, EventCustomerOrderProcessing, EventCustomerOrderUpdated, EventCustomerPublicationFailed, EventCustomerPublicationSucceeded, EventCustomerRedemptionFailed, EventCustomerRedemptionRollbackFailed, EventCustomerRedemptionRollbackSucceeded, EventCustomerRedemptionSucceeded, EventCustomerReferred, EventCustomerRewardRedemptionsCompleted, EventCustomerRewardRedemptionsCreated, EventCustomerRewardRedemptionsPending, EventCustomerRewardRedemptionsRolledBack, EventCustomerRewarded, EventCustomerRewardedLoyaltyPoints, EventCustomerSegmentEntered, EventCustomerSegmentLeft, EventCustomerShopifyFailed, EventCustomerShopifyRecovered, EventCustomerShopifySent, EventCustomerSmsFailed, EventCustomerSmsRecovered, EventCustomerSmsSent, EventCustomerUpdated, EventCustomerValidationFailed, EventCustomerValidationSucceeded, EventCustomerVoucherDeleted, EventCustomerVouchersLoyaltyPointsExpired. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())


