# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class CodeConfig(BaseModel):
    """
    Schema containing information about config used for voucher. Defines code's pattern (prefix, suffix, length, charset, etc).  # noqa: E501
    """
    length: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Number of characters in a generated code (excluding prefix and postfix).")
    charset: Optional[StrictStr] = Field(None, description="Characters that can appear in the code.    Examples:  - Alphanumeric: `0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`  - Alphabetic: `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`  - Alphabetic Lowercase: `abcdefghijklmnopqrstuvwxyz`  - Alphabetic Uppercase: `ABCDEFGHIJKLMNOPQRSTUVWXYZ`  - Numbers: `0123456789`   - Custom: a custom character set")
    prefix: Optional[StrictStr] = Field(None, description="A text appended before the code.")
    postfix: Optional[StrictStr] = Field(None, description="A text appended after the code.")
    pattern: Optional[StrictStr] = Field(None, description="A pattern for codes where hashes (#) will be replaced with random characters. Overrides `length`.")
    initial_count: Optional[StrictInt] = Field(None, description="The initial count")
    __properties = ["length", "charset", "prefix", "postfix", "pattern", "initial_count"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CodeConfig:
        """Create an instance of CodeConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CodeConfig:
        """Create an instance of CodeConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CodeConfig.parse_obj(obj)

        _obj = CodeConfig.parse_obj({
            "length": obj.get("length"),
            "charset": obj.get("charset"),
            "prefix": obj.get("prefix"),
            "postfix": obj.get("postfix"),
            "pattern": obj.get("pattern"),
            "initial_count": obj.get("initial_count")
        })
        return _obj


