# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator
from openapi_client.models.customer_activity_data import CustomerActivityData

class CustomerActivity(BaseModel):
    """
    This is an object representing customer activity.    This is a general object which presents moments from customers' activity. There are all types of different events that customers perform during their journey once they participate in Promotions. Events describe moments when customers redeem coupons and earn points or rewards. The list of all types of activities is listed below.  The details describing the activity are collected in a property named `data`. In this object, software integrators will find all further information explaining the event context.  # noqa: E501
    """
    id: Optional[StrictStr] = Field(None, description="Unique event ID, assigned by Voucherify.")
    type: Optional[StrictStr] = Field(None, description="Event type.")
    data: Optional[conlist(CustomerActivityData)] = Field(None, description="Contains details about the event. The objects that are returned in the data attribute differ based on the context of the event type.")
    created_at: Optional[datetime] = Field(None, description="Timestamp representing the date and time when the customer activity occurred in ISO 8601 format.")
    __properties = ["id", "type", "data", "created_at"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('customer.confirmed', 'customer.created', 'customer.updated', 'customer.deleted', 'customer.referred', 'customer.custom_event', 'customer.segment.entered', 'customer.segment.left', 'customer.sms.sent', 'customer.sms.recovered', 'customer.sms.failed', 'customer.email.sent', 'customer.email.recovered', 'customer.email.failed', 'customer.activecampaign.sent', 'customer.activecampaign.recovered', 'customer.activecampaign.failed', 'customer.braze.sent', 'customer.braze.recovered', 'customer.braze.failed', 'customer.mailchimp.sent', 'customer.mailchimp.recovered', 'customer.mailchimp.failed', 'customer.intercom.sent', 'customer.intercom.recovered', 'customer.intercom.failed', 'customer.shopify.sent', 'customer.shopify.recovered', 'customer.shopify.failed', 'customer.klaviyo.sent', 'customer.klaviyo.recovered', 'customer.klaviyo.failed', 'customer.batch.sent', 'customer.batch.recovered', 'customer.batch.failed', 'customer.rewarded', 'customer.rewarded.loyalty_points', 'customer.voucher.gift.balance_added', 'customer.voucher.loyalty_card.points_added', 'customer.voucher.loyalty_card.points_transferred', 'customer.voucher.loyalty_card.points_expired', 'customer.voucher.deleted', 'customer.publication.succeeded', 'customer.publication.failed', 'customer.validation.succeeded', 'customer.validation.failed', 'customer.redemption.failed', 'customer.redemption.succeeded', 'customer.redemption.rollback.failed', 'customer.redemption.rollback.succeeded', 'customer.consents.given', 'customer.consents.revoked', 'customer.order.canceled', 'customer.order.created', 'customer.order.fulfilled', 'customer.order.paid', 'customer.order.processing', 'customer.order.updated', 'customer.reward_redemptions.created', 'customer.reward_redemptions.pending', 'customer.reward_redemptions.completed', 'customer.reward_redemptions.rolledback', 'customer.loyalty.updated', 'customer.loyalty.tier.upgraded', 'customer.loyalty.tier.downgraded', 'customer.loyalty.tier.prolonged', 'customer.loyalty.tier.expiration.changed', 'customer.loyalty.tier.joined', 'customer.loyalty.tier.left',):
            raise ValueError("must be one of enum values ('customer.confirmed', 'customer.created', 'customer.updated', 'customer.deleted', 'customer.referred', 'customer.custom_event', 'customer.segment.entered', 'customer.segment.left', 'customer.sms.sent', 'customer.sms.recovered', 'customer.sms.failed', 'customer.email.sent', 'customer.email.recovered', 'customer.email.failed', 'customer.activecampaign.sent', 'customer.activecampaign.recovered', 'customer.activecampaign.failed', 'customer.braze.sent', 'customer.braze.recovered', 'customer.braze.failed', 'customer.mailchimp.sent', 'customer.mailchimp.recovered', 'customer.mailchimp.failed', 'customer.intercom.sent', 'customer.intercom.recovered', 'customer.intercom.failed', 'customer.shopify.sent', 'customer.shopify.recovered', 'customer.shopify.failed', 'customer.klaviyo.sent', 'customer.klaviyo.recovered', 'customer.klaviyo.failed', 'customer.batch.sent', 'customer.batch.recovered', 'customer.batch.failed', 'customer.rewarded', 'customer.rewarded.loyalty_points', 'customer.voucher.gift.balance_added', 'customer.voucher.loyalty_card.points_added', 'customer.voucher.loyalty_card.points_transferred', 'customer.voucher.loyalty_card.points_expired', 'customer.voucher.deleted', 'customer.publication.succeeded', 'customer.publication.failed', 'customer.validation.succeeded', 'customer.validation.failed', 'customer.redemption.failed', 'customer.redemption.succeeded', 'customer.redemption.rollback.failed', 'customer.redemption.rollback.succeeded', 'customer.consents.given', 'customer.consents.revoked', 'customer.order.canceled', 'customer.order.created', 'customer.order.fulfilled', 'customer.order.paid', 'customer.order.processing', 'customer.order.updated', 'customer.reward_redemptions.created', 'customer.reward_redemptions.pending', 'customer.reward_redemptions.completed', 'customer.reward_redemptions.rolledback', 'customer.loyalty.updated', 'customer.loyalty.tier.upgraded', 'customer.loyalty.tier.downgraded', 'customer.loyalty.tier.prolonged', 'customer.loyalty.tier.expiration.changed', 'customer.loyalty.tier.joined', 'customer.loyalty.tier.left')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomerActivity:
        """Create an instance of CustomerActivity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item in self.data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['data'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomerActivity:
        """Create an instance of CustomerActivity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomerActivity.parse_obj(obj)

        _obj = CustomerActivity.parse_obj({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "data": [CustomerActivityData.from_dict(_item) for _item in obj.get("data")] if obj.get("data") is not None else None,
            "created_at": obj.get("created_at")
        })
        return _obj


