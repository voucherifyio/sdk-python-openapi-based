# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from openapi_client.models.any import Any

class FiltersCondition(BaseModel):
    """
    FiltersCondition
    """
    var_in: Optional[Any] = Field(None, alias="$in")
    not_in: Optional[Any] = Field(None, alias="$not_in")
    var_is: Optional[Any] = Field(None, alias="$is")
    is_days_ago: Optional[Any] = Field(None, alias="$is_days_ago")
    is_days_in_future: Optional[Any] = Field(None, alias="$is_days_in_future")
    is_not: Optional[Any] = Field(None, alias="$is_not")
    has_value: Optional[Any] = Field(None, alias="$has_value")
    is_unknown: Optional[Any] = Field(None, alias="$is_unknown")
    contains: Optional[Any] = Field(None, alias="$contains")
    not_contain: Optional[Any] = Field(None, alias="$not_contain")
    starts_with: Optional[Any] = Field(None, alias="$starts_with")
    ends_with: Optional[Any] = Field(None, alias="$ends_with")
    more_than: Optional[Any] = Field(None, alias="$more_than")
    less_than: Optional[Any] = Field(None, alias="$less_than")
    more_than_ago: Optional[Any] = Field(None, alias="$more_than_ago")
    less_than_ago: Optional[Any] = Field(None, alias="$less_than_ago")
    more_than_future: Optional[Any] = Field(None, alias="$more_than_future")
    less_than_future: Optional[Any] = Field(None, alias="$less_than_future")
    more_than_equal: Optional[Any] = Field(None, alias="$more_than_equal")
    less_than_equal: Optional[Any] = Field(None, alias="$less_than_equal")
    after: Optional[Any] = Field(None, alias="$after")
    before: Optional[Any] = Field(None, alias="$before")
    count: Optional[Any] = Field(None, alias="$count")
    count_less: Optional[Any] = Field(None, alias="$count_less")
    count_more: Optional[Any] = Field(None, alias="$count_more")
    __properties = ["$in", "$not_in", "$is", "$is_days_ago", "$is_days_in_future", "$is_not", "$has_value", "$is_unknown", "$contains", "$not_contain", "$starts_with", "$ends_with", "$more_than", "$less_than", "$more_than_ago", "$less_than_ago", "$more_than_future", "$less_than_future", "$more_than_equal", "$less_than_equal", "$after", "$before", "$count", "$count_less", "$count_more"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FiltersCondition:
        """Create an instance of FiltersCondition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of var_in
        if self.var_in:
            _dict['$in'] = self.var_in.to_dict()
        # override the default output from pydantic by calling `to_dict()` of not_in
        if self.not_in:
            _dict['$not_in'] = self.not_in.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_is
        if self.var_is:
            _dict['$is'] = self.var_is.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_days_ago
        if self.is_days_ago:
            _dict['$is_days_ago'] = self.is_days_ago.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_days_in_future
        if self.is_days_in_future:
            _dict['$is_days_in_future'] = self.is_days_in_future.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_not
        if self.is_not:
            _dict['$is_not'] = self.is_not.to_dict()
        # override the default output from pydantic by calling `to_dict()` of has_value
        if self.has_value:
            _dict['$has_value'] = self.has_value.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_unknown
        if self.is_unknown:
            _dict['$is_unknown'] = self.is_unknown.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contains
        if self.contains:
            _dict['$contains'] = self.contains.to_dict()
        # override the default output from pydantic by calling `to_dict()` of not_contain
        if self.not_contain:
            _dict['$not_contain'] = self.not_contain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of starts_with
        if self.starts_with:
            _dict['$starts_with'] = self.starts_with.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ends_with
        if self.ends_with:
            _dict['$ends_with'] = self.ends_with.to_dict()
        # override the default output from pydantic by calling `to_dict()` of more_than
        if self.more_than:
            _dict['$more_than'] = self.more_than.to_dict()
        # override the default output from pydantic by calling `to_dict()` of less_than
        if self.less_than:
            _dict['$less_than'] = self.less_than.to_dict()
        # override the default output from pydantic by calling `to_dict()` of more_than_ago
        if self.more_than_ago:
            _dict['$more_than_ago'] = self.more_than_ago.to_dict()
        # override the default output from pydantic by calling `to_dict()` of less_than_ago
        if self.less_than_ago:
            _dict['$less_than_ago'] = self.less_than_ago.to_dict()
        # override the default output from pydantic by calling `to_dict()` of more_than_future
        if self.more_than_future:
            _dict['$more_than_future'] = self.more_than_future.to_dict()
        # override the default output from pydantic by calling `to_dict()` of less_than_future
        if self.less_than_future:
            _dict['$less_than_future'] = self.less_than_future.to_dict()
        # override the default output from pydantic by calling `to_dict()` of more_than_equal
        if self.more_than_equal:
            _dict['$more_than_equal'] = self.more_than_equal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of less_than_equal
        if self.less_than_equal:
            _dict['$less_than_equal'] = self.less_than_equal.to_dict()
        # override the default output from pydantic by calling `to_dict()` of after
        if self.after:
            _dict['$after'] = self.after.to_dict()
        # override the default output from pydantic by calling `to_dict()` of before
        if self.before:
            _dict['$before'] = self.before.to_dict()
        # override the default output from pydantic by calling `to_dict()` of count
        if self.count:
            _dict['$count'] = self.count.to_dict()
        # override the default output from pydantic by calling `to_dict()` of count_less
        if self.count_less:
            _dict['$count_less'] = self.count_less.to_dict()
        # override the default output from pydantic by calling `to_dict()` of count_more
        if self.count_more:
            _dict['$count_more'] = self.count_more.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FiltersCondition:
        """Create an instance of FiltersCondition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FiltersCondition.parse_obj(obj)

        _obj = FiltersCondition.parse_obj({
            "var_in": Any.from_dict(obj.get("$in")) if obj.get("$in") is not None else None,
            "not_in": Any.from_dict(obj.get("$not_in")) if obj.get("$not_in") is not None else None,
            "var_is": Any.from_dict(obj.get("$is")) if obj.get("$is") is not None else None,
            "is_days_ago": Any.from_dict(obj.get("$is_days_ago")) if obj.get("$is_days_ago") is not None else None,
            "is_days_in_future": Any.from_dict(obj.get("$is_days_in_future")) if obj.get("$is_days_in_future") is not None else None,
            "is_not": Any.from_dict(obj.get("$is_not")) if obj.get("$is_not") is not None else None,
            "has_value": Any.from_dict(obj.get("$has_value")) if obj.get("$has_value") is not None else None,
            "is_unknown": Any.from_dict(obj.get("$is_unknown")) if obj.get("$is_unknown") is not None else None,
            "contains": Any.from_dict(obj.get("$contains")) if obj.get("$contains") is not None else None,
            "not_contain": Any.from_dict(obj.get("$not_contain")) if obj.get("$not_contain") is not None else None,
            "starts_with": Any.from_dict(obj.get("$starts_with")) if obj.get("$starts_with") is not None else None,
            "ends_with": Any.from_dict(obj.get("$ends_with")) if obj.get("$ends_with") is not None else None,
            "more_than": Any.from_dict(obj.get("$more_than")) if obj.get("$more_than") is not None else None,
            "less_than": Any.from_dict(obj.get("$less_than")) if obj.get("$less_than") is not None else None,
            "more_than_ago": Any.from_dict(obj.get("$more_than_ago")) if obj.get("$more_than_ago") is not None else None,
            "less_than_ago": Any.from_dict(obj.get("$less_than_ago")) if obj.get("$less_than_ago") is not None else None,
            "more_than_future": Any.from_dict(obj.get("$more_than_future")) if obj.get("$more_than_future") is not None else None,
            "less_than_future": Any.from_dict(obj.get("$less_than_future")) if obj.get("$less_than_future") is not None else None,
            "more_than_equal": Any.from_dict(obj.get("$more_than_equal")) if obj.get("$more_than_equal") is not None else None,
            "less_than_equal": Any.from_dict(obj.get("$less_than_equal")) if obj.get("$less_than_equal") is not None else None,
            "after": Any.from_dict(obj.get("$after")) if obj.get("$after") is not None else None,
            "before": Any.from_dict(obj.get("$before")) if obj.get("$before") is not None else None,
            "count": Any.from_dict(obj.get("$count")) if obj.get("$count") is not None else None,
            "count_less": Any.from_dict(obj.get("$count_less")) if obj.get("$count_less") is not None else None,
            "count_more": Any.from_dict(obj.get("$count_more")) if obj.get("$count_more") is not None else None
        })
        return _obj


