# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator
from openapi_client.models.loyalties_members_points_expiration_list_response_body_data_item_bucket import LoyaltiesMembersPointsExpirationListResponseBodyDataItemBucket

class LoyaltiesMembersPointsExpirationListResponseBodyDataItem(BaseModel):
    """
    LoyaltiesMembersPointsExpirationListResponseBodyDataItem
    """
    id: StrictStr = Field(..., description="Unique loyalty points bucket ID.")
    voucher_id: StrictStr = Field(..., description="Unique parent loyalty card ID.")
    campaign_id: StrictStr = Field(..., description=" Unique parent campaign ID.")
    bucket: LoyaltiesMembersPointsExpirationListResponseBodyDataItemBucket = Field(...)
    created_at: datetime = Field(..., description="Timestamp representing the date and time when the loyalty points bucket object was created in ISO 8601 format.")
    status: StrictStr = Field(..., description="Loyalty points bucket point status.")
    expires_at: datetime = Field(..., description="Date when the number of points defined in the bucket object are due to expire.")
    updated_at: Optional[datetime] = Field(None, description="Timestamp representing the date and time when the loyalty points bucket object was updated in ISO 8601 format.")
    object: constr(strict=True) = Field(..., description="The type of object represented by JSON. This object stores information about the loyalty points bucket.")
    __properties = ["id", "voucher_id", "campaign_id", "bucket", "created_at", "status", "expires_at", "updated_at", "object"]

    @validator('object')
    def object_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"loyalty_points_bucket", value):
            raise ValueError(r"must validate the regular expression /loyalty_points_bucket/")
        return value

    @validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('loyalty_points_bucket',):
            raise ValueError("must be one of enum values ('loyalty_points_bucket')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> LoyaltiesMembersPointsExpirationListResponseBodyDataItem:
        """Create an instance of LoyaltiesMembersPointsExpirationListResponseBodyDataItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of bucket
        if self.bucket:
            _dict['bucket'] = self.bucket.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> LoyaltiesMembersPointsExpirationListResponseBodyDataItem:
        """Create an instance of LoyaltiesMembersPointsExpirationListResponseBodyDataItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LoyaltiesMembersPointsExpirationListResponseBodyDataItem.parse_obj(obj)

        _obj = LoyaltiesMembersPointsExpirationListResponseBodyDataItem.parse_obj({
            "id": obj.get("id"),
            "voucher_id": obj.get("voucher_id"),
            "campaign_id": obj.get("campaign_id"),
            "bucket": LoyaltiesMembersPointsExpirationListResponseBodyDataItemBucket.from_dict(obj.get("bucket")) if obj.get("bucket") is not None else None,
            "created_at": obj.get("created_at"),
            "status": obj.get("status"),
            "expires_at": obj.get("expires_at"),
            "updated_at": obj.get("updated_at"),
            "object": obj.get("object") if obj.get("object") is not None else 'loyalty_points_bucket'
        })
        return _obj


