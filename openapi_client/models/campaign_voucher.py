# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from openapi_client.models.campaign_base_validity_timeframe import CampaignBaseValidityTimeframe
from openapi_client.models.campaign_loyalty_card import CampaignLoyaltyCard
from openapi_client.models.campaign_loyalty_voucher_redemption import CampaignLoyaltyVoucherRedemption
from openapi_client.models.code_config_required_length_charset_pattern import CodeConfigRequiredLengthCharsetPattern
from openapi_client.models.discount import Discount
from openapi_client.models.gift import Gift

class CampaignVoucher(BaseModel):
    """
    Schema model for a campaign voucher.  # noqa: E501
    """
    type: StrictStr = Field(..., description="Type of voucher.")
    discount: Optional[Discount] = None
    gift: Optional[Gift] = None
    loyalty_card: Optional[CampaignLoyaltyCard] = None
    redemption: CampaignLoyaltyVoucherRedemption = Field(...)
    code_config: CodeConfigRequiredLengthCharsetPattern = Field(...)
    is_referral_code: StrictBool = Field(..., description="Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`.")
    start_date: Optional[datetime] = Field(None, description="Activation timestamp defines when the campaign starts to be active in ISO 8601 format. Campaign is *inactive before* this date. ")
    expiration_date: Optional[datetime] = Field(None, description="Expiration timestamp defines when the campaign expires in ISO 8601 format.  Campaign is *inactive after* this date.")
    validity_timeframe: Optional[CampaignBaseValidityTimeframe] = None
    __properties = ["type", "discount", "gift", "loyalty_card", "redemption", "code_config", "is_referral_code", "start_date", "expiration_date", "validity_timeframe"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CampaignVoucher:
        """Create an instance of CampaignVoucher from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of discount
        if self.discount:
            _dict['discount'] = self.discount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gift
        if self.gift:
            _dict['gift'] = self.gift.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loyalty_card
        if self.loyalty_card:
            _dict['loyalty_card'] = self.loyalty_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of redemption
        if self.redemption:
            _dict['redemption'] = self.redemption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of code_config
        if self.code_config:
            _dict['code_config'] = self.code_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of validity_timeframe
        if self.validity_timeframe:
            _dict['validity_timeframe'] = self.validity_timeframe.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CampaignVoucher:
        """Create an instance of CampaignVoucher from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CampaignVoucher.parse_obj(obj)

        _obj = CampaignVoucher.parse_obj({
            "type": obj.get("type") if obj.get("type") is not None else 'DISCOUNT_VOUCHER',
            "discount": Discount.from_dict(obj.get("discount")) if obj.get("discount") is not None else None,
            "gift": Gift.from_dict(obj.get("gift")) if obj.get("gift") is not None else None,
            "loyalty_card": CampaignLoyaltyCard.from_dict(obj.get("loyalty_card")) if obj.get("loyalty_card") is not None else None,
            "redemption": CampaignLoyaltyVoucherRedemption.from_dict(obj.get("redemption")) if obj.get("redemption") is not None else None,
            "code_config": CodeConfigRequiredLengthCharsetPattern.from_dict(obj.get("code_config")) if obj.get("code_config") is not None else None,
            "is_referral_code": obj.get("is_referral_code"),
            "start_date": obj.get("start_date"),
            "expiration_date": obj.get("expiration_date"),
            "validity_timeframe": CampaignBaseValidityTimeframe.from_dict(obj.get("validity_timeframe")) if obj.get("validity_timeframe") is not None else None
        })
        return _obj


