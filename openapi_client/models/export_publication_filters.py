# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field
from openapi_client.models.field_conditions import FieldConditions
from openapi_client.models.junction import Junction

class ExportPublicationFilters(BaseModel):
    """
    ExportPublicationFilters
    """
    junction: Optional[Junction] = None
    voucher_code: Optional[FieldConditions] = None
    customer_id: Optional[FieldConditions] = None
    customer_source_id: Optional[FieldConditions] = None
    var_date: Optional[FieldConditions] = Field(None, alias="date")
    channel: Optional[FieldConditions] = None
    campaign: Optional[FieldConditions] = None
    is_winner: Optional[FieldConditions] = None
    metadata: Optional[FieldConditions] = None
    __properties = ["junction", "voucher_code", "customer_id", "customer_source_id", "date", "channel", "campaign", "is_winner", "metadata"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExportPublicationFilters:
        """Create an instance of ExportPublicationFilters from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of voucher_code
        if self.voucher_code:
            _dict['voucher_code'] = self.voucher_code.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_id
        if self.customer_id:
            _dict['customer_id'] = self.customer_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_source_id
        if self.customer_source_id:
            _dict['customer_source_id'] = self.customer_source_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_date
        if self.var_date:
            _dict['date'] = self.var_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of channel
        if self.channel:
            _dict['channel'] = self.channel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of campaign
        if self.campaign:
            _dict['campaign'] = self.campaign.to_dict()
        # override the default output from pydantic by calling `to_dict()` of is_winner
        if self.is_winner:
            _dict['is_winner'] = self.is_winner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExportPublicationFilters:
        """Create an instance of ExportPublicationFilters from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExportPublicationFilters.parse_obj(obj)

        _obj = ExportPublicationFilters.parse_obj({
            "junction": obj.get("junction"),
            "voucher_code": FieldConditions.from_dict(obj.get("voucher_code")) if obj.get("voucher_code") is not None else None,
            "customer_id": FieldConditions.from_dict(obj.get("customer_id")) if obj.get("customer_id") is not None else None,
            "customer_source_id": FieldConditions.from_dict(obj.get("customer_source_id")) if obj.get("customer_source_id") is not None else None,
            "var_date": FieldConditions.from_dict(obj.get("date")) if obj.get("date") is not None else None,
            "channel": FieldConditions.from_dict(obj.get("channel")) if obj.get("channel") is not None else None,
            "campaign": FieldConditions.from_dict(obj.get("campaign")) if obj.get("campaign") is not None else None,
            "is_winner": FieldConditions.from_dict(obj.get("is_winner")) if obj.get("is_winner") is not None else None,
            "metadata": FieldConditions.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None
        })
        return _obj


