# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, validator
from openapi_client.models.referral_program import ReferralProgram

class SimpleCampaign(BaseModel):
    """
    Request body schema for creating a discount voucher campaign using **POST** `/campaigns`.  # noqa: E501
    """
    id: Optional[StrictStr] = Field(None, description="Campaign name.")
    name: Optional[StrictStr] = Field(None, description="Campaign name.")
    campaign_type: Optional[StrictStr] = Field(None, description="Type of campaign.")
    type: Optional[StrictStr] = Field(None, description="Defines whether the campaign can be updated with new vouchers after campaign creation. - `AUTO_UPDATE`: By choosing the auto update option you will create a campaign that can be enhanced by new vouchers after the time of creation (e.g. by publish vouchers method). -  `STATIC`: vouchers need to be manually published.")
    is_referral_code: Optional[StrictBool] = Field(None, description="Flag indicating whether this voucher is a referral code; `true` for campaign type `REFERRAL_PROGRAM`.")
    voucher: Optional[Dict[str, Any]] = None
    lucky_draw: Optional[Dict[str, Any]] = None
    referral_program: Optional[ReferralProgram] = None
    auto_join: Optional[StrictBool] = Field(None, description="Indicates whether customers will be able to auto-join a loyalty campaign if any earning rule is fulfilled.")
    join_once: Optional[StrictBool] = Field(None, description="If this value is set to `true`, customers will be able to join the campaign only once.")
    active: Optional[StrictBool] = Field(None, description="Indicates whether campaign is active")
    created_at: Optional[datetime] = Field(None, description="Timestamp representing the date and time when the campaign was created in ISO 8601 format.")
    object: Optional[StrictStr] = Field('campaign', description="The type of object represented by JSON. This object stores information about the campaign.")
    __properties = ["id", "name", "campaign_type", "type", "is_referral_code", "voucher", "lucky_draw", "referral_program", "auto_join", "join_once", "active", "created_at", "object"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AUTO_UPDATE', 'STATIC',):
            raise ValueError("must be one of enum values ('AUTO_UPDATE', 'STATIC')")
        return value

    @validator('object')
    def object_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('campaign',):
            raise ValueError("must be one of enum values ('campaign')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SimpleCampaign:
        """Create an instance of SimpleCampaign from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of referral_program
        if self.referral_program:
            _dict['referral_program'] = self.referral_program.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SimpleCampaign:
        """Create an instance of SimpleCampaign from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SimpleCampaign.parse_obj(obj)

        _obj = SimpleCampaign.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "campaign_type": obj.get("campaign_type"),
            "type": obj.get("type"),
            "is_referral_code": obj.get("is_referral_code"),
            "voucher": obj.get("voucher"),
            "lucky_draw": obj.get("lucky_draw"),
            "referral_program": ReferralProgram.from_dict(obj.get("referral_program")) if obj.get("referral_program") is not None else None,
            "auto_join": obj.get("auto_join"),
            "join_once": obj.get("join_once"),
            "active": obj.get("active"),
            "created_at": obj.get("created_at"),
            "object": obj.get("object") if obj.get("object") is not None else 'campaign'
        })
        return _obj


