# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictInt
from openapi_client.models.customer_summary_redemptions_gift import CustomerSummaryRedemptionsGift
from openapi_client.models.customer_summary_redemptions_loyalty_card import CustomerSummaryRedemptionsLoyaltyCard

class CustomerSummaryRedemptions(BaseModel):
    """
    CustomerSummaryRedemptions
    """
    total_redeemed: StrictInt = Field(..., description="Total number of redemptions made by the customer.")
    total_failed: StrictInt = Field(..., description="Total number of redemptions that failed.")
    total_succeeded: StrictInt = Field(..., description="Total number of redemptions that succeeded.")
    total_rolled_back: StrictInt = Field(..., description="Total number of redemptions that were rolled back for the customer.")
    total_rollback_failed: StrictInt = Field(..., description="Total number of redemption rollbacks that failed.")
    total_rollback_succeeded: StrictInt = Field(..., description="Total number of redemption rollbacks that succeeded.")
    gift: CustomerSummaryRedemptionsGift = Field(...)
    loyalty_card: CustomerSummaryRedemptionsLoyaltyCard = Field(...)
    __properties = ["total_redeemed", "total_failed", "total_succeeded", "total_rolled_back", "total_rollback_failed", "total_rollback_succeeded", "gift", "loyalty_card"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CustomerSummaryRedemptions:
        """Create an instance of CustomerSummaryRedemptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of gift
        if self.gift:
            _dict['gift'] = self.gift.to_dict()
        # override the default output from pydantic by calling `to_dict()` of loyalty_card
        if self.loyalty_card:
            _dict['loyalty_card'] = self.loyalty_card.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CustomerSummaryRedemptions:
        """Create an instance of CustomerSummaryRedemptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CustomerSummaryRedemptions.parse_obj(obj)

        _obj = CustomerSummaryRedemptions.parse_obj({
            "total_redeemed": obj.get("total_redeemed"),
            "total_failed": obj.get("total_failed"),
            "total_succeeded": obj.get("total_succeeded"),
            "total_rolled_back": obj.get("total_rolled_back"),
            "total_rollback_failed": obj.get("total_rollback_failed"),
            "total_rollback_succeeded": obj.get("total_rollback_succeeded"),
            "gift": CustomerSummaryRedemptionsGift.from_dict(obj.get("gift")) if obj.get("gift") is not None else None,
            "loyalty_card": CustomerSummaryRedemptionsLoyaltyCard.from_dict(obj.get("loyalty_card")) if obj.get("loyalty_card") is not None else None
        })
        return _obj


