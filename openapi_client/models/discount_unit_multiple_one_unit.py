# coding: utf-8

"""
    Voucherify API

    Voucherify promotion engine REST API. Please see https://docs.voucherify.io/docs for more details.

    The version of the OpenAPI document: v2018-08-01
    Contact: support@voucherify.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, validator
from openapi_client.models.simple_product_discount_unit import SimpleProductDiscountUnit
from openapi_client.models.simple_sku_discount_unit import SimpleSkuDiscountUnit

class DiscountUnitMultipleOneUnit(BaseModel):
    """
    DiscountUnitMultipleOneUnit
    """
    unit_off: Optional[Union[StrictFloat, StrictInt]] = Field(None, description="Number of units to be granted a full value discount.")
    unit_off_formula: Optional[StrictStr] = None
    effect: StrictStr = Field(..., description="Defines how the unit is added to the customer's order.  ")
    unit_type: StrictStr = Field(..., description="The product deemed as free, chosen from product inventory (e.g. time, items).")
    product: Optional[SimpleProductDiscountUnit] = None
    sku: Optional[SimpleSkuDiscountUnit] = None
    __properties = ["unit_off", "unit_off_formula", "effect", "unit_type", "product", "sku"]

    @validator('effect')
    def effect_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ADD_NEW_ITEMS', 'ADD_MISSING_ITEMS',):
            raise ValueError("must be one of enum values ('ADD_NEW_ITEMS', 'ADD_MISSING_ITEMS')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DiscountUnitMultipleOneUnit:
        """Create an instance of DiscountUnitMultipleOneUnit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sku
        if self.sku:
            _dict['sku'] = self.sku.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DiscountUnitMultipleOneUnit:
        """Create an instance of DiscountUnitMultipleOneUnit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DiscountUnitMultipleOneUnit.parse_obj(obj)

        _obj = DiscountUnitMultipleOneUnit.parse_obj({
            "unit_off": obj.get("unit_off"),
            "unit_off_formula": obj.get("unit_off_formula"),
            "effect": obj.get("effect"),
            "unit_type": obj.get("unit_type"),
            "product": SimpleProductDiscountUnit.from_dict(obj.get("product")) if obj.get("product") is not None else None,
            "sku": SimpleSkuDiscountUnit.from_dict(obj.get("sku")) if obj.get("sku") is not None else None
        })
        return _obj


